{"version":3,"sources":["webpack:///react-sigma.min.js","webpack:///webpack/bootstrap a696084b9d88c7ee096d","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///./src/tools.js","webpack:///./src/Sigma.js","webpack:///./sigma/main.js","webpack:///./src/NeoGraphItemsProducers.js","webpack:///./sigma/parsers.json.js","webpack:///./src/EdgeShapes.js","webpack:///./src/Filter.js","webpack:///./src/ForceAtlas2.js","webpack:///./src/LoadGEXF.js","webpack:///./src/LoadJSON.js","webpack:///./src/NOverlap.js","webpack:///./src/NeoCypher.js","webpack:///./src/NodeShapes.js","webpack:///./src/RandomizeNodePositions.js","webpack:///./src/RelativeSize.js","webpack:///./src/SigmaEnableWebGL.js","webpack:///./src/ReactSigmaLayoutPlugin.js","webpack:///./src/Utils.js","webpack:///./sigma/edges.js","webpack:///./sigma/layout.forceAtlas2.js","webpack:///./sigma/layout.noverlap.js","webpack:///./sigma/neo4j.cypher.js","webpack:///./sigma/nodes.js","webpack:///./sigma/parsers.gexf.js","webpack:///./sigma/plugins.animate.js","webpack:///./sigma/plugins.filter.js","webpack:///./sigma/plugins.relativeSize.js","webpack:///./sigma/webgl.js","webpack:///./src/index.js"],"names":["ReactSigma","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","undefined","embedProps","elements","extraProps","__WEBPACK_IMPORTED_MODULE_0_react___default","a","Children","map","element","cloneElement","__WEBPACK_IMPORTED_MODULE_0_react__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","__WEBPACK_IMPORTED_MODULE_1__tools__","__WEBPACK_IMPORTED_MODULE_2__sigma_main__","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","Sigma","_React$PureComponent","this","_this","getPrototypeOf","state","renderer","settings","sigma","initRenderer","bind","bindHandlers","graph","read","container","options","type","sigmaRenderer","addRenderer","refresh","setState","killRenderer","console","log","kill","children","createElement","ref","style","handlers","forEach","event","handler","toUpperCase","substr","PureComponent","defaultProps","defaultNodeColor","defaultLabelSize","defaultLabelColor","labelThreshold","hoverFontStyle","batchEdgesDrawing","drawEdges","drawEdgeLabels","maxWidth","height","115","__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js__","__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js__","__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js__","__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js__","__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js__","__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js__","__WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js__","__WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js__","__WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js__","__WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js__","__WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js__","__WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js__","__WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js__","__WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js__","__WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js__","__WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js__","__WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js__","__WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js__","__WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js__","__WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js__","__WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js__","__WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js__","__WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js__","__WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js__","__WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js__","__WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js__","window","renderers","def","canvas","34","utils","pkg","captors","mouse","camera","_moveHandler","e","x","y","pos","_settings","_self","dispatchEvent","mouseCoords","_isMouseDown","_isMoving","_hasDragged","_movingTimeoutId","clearTimeout","setTimeout","misc","animation","killAll","_camera","isMoving","cameraPosition","getX","_startMouseX","getY","_startMouseY","_startCameraX","_startCameraY","_lastCameraX","_lastCameraY","goTo","preventDefault","returnValue","stopPropagation","_upHandler","easing","duration","_downHandler","_downStartTime","Date","getTime","which","_outHandler","_clickHandler","isDragging","_doubleClickHandler","ratio","getCenter","zoomTo","_wheelHandler","wheelDelta","getDelta","_target","classes","dispatcher","extend","doubleClick","addEventListener","document","unbindDoubleClick","removeEventListener","35","touch","position","offset","getOffset","pageX","left","pageY","top","_handleStart","x0","x1","y0","y1","pos0","pos1","_downTouches","touches","_touchMode","_startTouchX0","_startTouchY0","_startCameraAngle","angle","_startCameraRatio","_startTouchX1","_startTouchY1","_startTouchAngle","Math","atan2","_startTouchDistance","sqrt","_handleLeave","inertiaRatio","_doubleTap","_handleMove","cos","sin","end","diff","start","dAngle","dRatio","newStageX","newStageY","newStageRatio","newStageAngle","_lastCameraAngle","_lastCameraRatio","_doubleTapHandler","onComplete","36","id","isAnimated","embedObject","coordinates","keys","isNaN","applyView","write","prefix","readPrefix","node","nodes","edges","relCos","relSin","nodeRatio","pow","edgeRatio","xOffset","width","yOffset","graphPosition","vector","X","Y","getMatrix","scale","matrices","rotation","translation","matrix","multiply","getRectangle","widthVect","heightVect","centerVect","marginX","marginY","x2","y2","37","data","datas","Array","slice","arguments","a1","a2","k","embedObjects","args","concat","splice","apply","38","events","eArray","split","_handlers","push","unbind","j","eventName","getEvent","one","39","_quadIndex","point","quadBounds","xmp","ymp","_quadIndexes","rectangle","quadCorners","indexes","_quadCollision","corners","_geom","collision","_quadSubdivide","index","quad","next","level","subw","round","bounds","subh","qx","qy","_quadTree","maxElements","maxLevel","_quadInsert","el","sizedPoint","_quadRetrievePoint","_quadRetrieveArea","rectData","collisionFunc","els","splitSquare","pointToSquare","size","lineToSquare","quadraticCurveToSquare","cp","pt","getPointOnQuadraticCurve","minX","min","maxX","max","minY","maxY","selfLoopToSquare","getSelfLoopControlPoints","isAxisAligned","r","axisAlignedTopPoints","lowerLeftCoor","lowerRightCoor","llc","rectangleCorners","lrc","b","axis","c1","c2","projection","axisCollision","sc1","sc2","ci","p1","p2","maxc1","maxc2","minc1","minc2","col","edgequad","_tree","_cache","query","result","_enabled","params","source","getQuadraticControlPoint","area","rect","serialized","JSON","stringify","edgesArray","40","__bindGraphMethod","methodName","scope","fn","res","_methodBeforeBindings","_methodBindings","__emptyObject","obj","_methods","_indexes","_initBindings","_defaultSettings","immutable","clone","_defaultSettingsFunction","nodesArray","nodesIndex","edgesIndex","inNeighborsIndex","outNeighborsIndex","allNeighborsIndex","inNeighborsCount","outNeighborsCount","allNeighborsCount","addMethod","hasMethod","attach","before","bindings","attachBefore","addIndex","validNode","edge","validEdge","dropEdge","g","addNode","addEdge","v","toString","in","out","41","42","global","_bind","i_end","isArray","_unbind","j_end","_dispatch","_executeFirstJob","test","pushed","time","__dateNow","job","_sortedByPriorityJobs","shift","done","currentTime","weightTime","weight","averageTime","count","_activateJob","_runningJobs","status","startTime","__clone","_loop","deadJob","_jobs","after","_waitingJobs","_isRunning","_lastFrameTime","_parameters","frameDuration","_killJob","_addJob","v1","v2","_noStart","__extend","Error","_hasJob","found","history","_doneJobs","_killAll","jobs","_getIsRunning","_clearHistory","_getStats","stats","pattern","isPatternString","__objectValues","RegExp","match","item","now","conrad","hasJob","addJob","killJob","getStats","isRunning","clearHistory","version","43","middlewares","copy","writePrefix","44","rescale","margin","getBoundaries","sizeMax","weightMax","w","h","rescaleSettings","validSettings","nodePosition","nodeSize","edgeSize","np","indexOf","ns","es","doEdges","Infinity","45","_getID","val","anim","initialVal","dateNow","easings","coef","t","cancelAnimationFrame","running","onNewFrame","frameId","requestAnimationFrame","filter","has","46","bindDOMEvents","Element","domElement","attr","attrName","getAttributeNS","tag","tagName","class","isNode","isEdge","isHover","click","onOver","toElement","onOut","fromElement","originalTarget","47","bindEvents","getNodes","mX","mY","inserted","selected","modifiedX","modifiedY","quadtree","hidden","getEdges","insertEdge","isCanvas","maxEpsilon","nodeIndex","nodesOnScreen","edgequadtree","getDistance","isPointOnBezierCurve","isPointOnQuadraticCurve","isPointOnSegment","bindCaptor","captor","onClick","onDoubleClick","onRightClick","le","outNodes","outEdges","overNodes","overEdges","onMove","newOutNodes","newOverNodes","currentOverNodes","newOutEdges","newOverEdges","currentOverEdges","48","drawHovers","draw","hoveredNode","hoveredEdge","contexts","hover","defaultNodeType","defaultEdgeType","nodeRenderers","hovers","edgeRenderers","edgehovers","extremitiesRenderers","extremities","embedSettings","clearRect","hoveredNodes","hoveredEdges","52","context","color","edgeColor","defaultEdgeColor","hover_color","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","56","57","58","fontStyle","fontSize","font","fillStyle","label","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","measureText","arcTo","closePath","fill","arc","PI","nodeRenderer","fillText","59","labels","60","61","HTMLElement","domElements","edgesOnScreen","conradId","initDOM","scene","resize","render","batchSize","tempGCO","drawNodes","drawLabels","clear","globalCompositeOperation","dom","setAttribute","appendChild","toLowerCase","getContext","oldWidth","oldHeight","pixelRatio","getPixelRatio","offsetWidth","offsetHeight","pop","parentNode","removeChild","69","__instances","conf","_conf","cameras","_handler","addCamera","renderCamera","renderersPerCamera","killCamera","cameraFrames","getElementById","skipIndexation","process","force","instances","70","verbose","classPrefix","minArrowSize","labelColor","labelSize","labelSizeRatio","webglOversamplingRatio","borderSize","defaultNodeBorderColor","hoverFont","singleHover","labelHoverShadow","labelHoverShadowColor","nodeHoverColor","defaultNodeHoverColor","labelHoverBGColor","defaultHoverLabelBGColor","labelHoverColor","defaultLabelHoverColor","edgeHoverColor","edgeHoverSizeRatio","defaultEdgeHoverColor","edgeHoverExtremities","hideEdgesOnMove","canvasEdgesBatchSize","webglEdgesBatchSize","scalingMode","sideMargin","minEdgeSize","maxEdgeSize","minNodeSize","maxNodeSize","touchEnabled","mouseEnabled","mouseWheelEnabled","doubleClickEnabled","eventsEnabled","zoomingRatio","doubleClickZoomingRatio","zoomMin","zoomMax","mouseZoomDuration","doubleClickZoomDuration","mouseInertiaDuration","mouseInertiaRatio","touchInertiaDuration","touchInertiaRatio","doubleClickTimeout","doubleTapTimeout","dragTimeout","autoResize","autoRescale","enableCamera","enableHovering","enableEdgeHovering","edgeHoverPrecision","rescaleIgnoreSize","skipErrors","nodesPowRatio","edgesPowRatio","animationsTime","71","lastTime","vendors","callback","currTime","timeToCall","Function","oThis","fNOP","fBound","aArgs","fToBind","72","_root","pkgName","reduce","objName","floatColorCache","floatColor","original","parseInt","charAt","newRatio","xi","yi","getPointOnBezierCurve","cx","cy","dx","dy","B0_t","B1_t","B2_t","B3_t","getCircleIntersection","r0","r1","rx","ry","abs","xi_prime","yi_prime","epsilon","crossProduct","nCrossProduct","cpx","cpy","dP1P2","old_dt","dP1","dP2","rThreshold","dt","cpx1","cpy1","cpx2","cpy2","dP1CP1","offsetX","layerX","clientX","offsetY","layerY","clientY","screen","deviceXDPI","logicalXDPI","systemXDPI","devicePixelRatio","getWidth","ownerSVGElement","baseVal","namespaceURI","getHeight","ctrlKey","metaKey","altKey","shiftKey","detail","offsetTop","offsetLeft","offsetParent","clicks","linearNone","quadraticIn","quadraticOut","quadraticInOut","cubicIn","cubicOut","cubicInOut","loadShader","gl","shaderSource","shaderType","error","compiled","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","loadProgram","shaders","attribs","loc","linked","program","createProgram","attachShader","bindAttribLocation","locations","opt_attribs","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","m2","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","palette","NeoGraphItemsProducers","_currentColor","_colorsMap","properties","random","colorsMap","neo4j_labels","neo4j_data","startNode","endNode","neo4j_type","120","xhr","XMLHttpRequest","names","ActiveXObject","parsers","json","url","sig","open","onreadystatechange","readyState","parse","responseText","send","__WEBPACK_IMPORTED_MODULE_1__sigma_edges__","EdgeShapes","_React$Component","default","Component","__WEBPACK_IMPORTED_MODULE_1__sigma_plugins_filter__","Filter","_ref","_temp","_ret","_len","_key","plugins","_apply","nodesBy","neighborsOf","undo","__WEBPACK_IMPORTED_MODULE_1__sigma_layout_forceAtlas2__","ForceAtlas2","_refreshGraph","prevProps","prevState","stopForceAtlas2","killForceAtlas2","timer","_this2","startForceAtlas2","_stripOptions","timeout","assign","worker","linLogMode","__WEBPACK_IMPORTED_MODULE_1__sigma_parsers_gexf__","__WEBPACK_IMPORTED_MODULE_2__tools__","LoadGEXF","loaded","onLoad","_onLoad","_load","path","gexf","onGraphLoaded","__WEBPACK_IMPORTED_MODULE_1__sigma_main_js__","__WEBPACK_IMPORTED_MODULE_2__sigma_parsers_json_js__","__WEBPACK_IMPORTED_MODULE_3__tools__","LoadJSON","__WEBPACK_IMPORTED_MODULE_1__sigma_plugins_animate__","__WEBPACK_IMPORTED_MODULE_2__sigma_layout_noverlap__","__WEBPACK_IMPORTED_MODULE_3__ReactSigmaLayoutPlugin__","_extends","NOverlap","startNoverlap","config","configNoverlap","stop","stopNoverlap","__WEBPACK_IMPORTED_MODULE_1__sigma_parsers_json_js__","__WEBPACK_IMPORTED_MODULE_2__sigma_neo4j_cypher__","__WEBPACK_IMPORTED_MODULE_3__NeoGraphItemsProducers__","__WEBPACK_IMPORTED_MODULE_4__tools__","NeoCypher","_runQuery","neo4j","cypher","user","password","producers","__WEBPACK_IMPORTED_MODULE_1__sigma_nodes__","NodeShapes","RandomizeNodePositions","__WEBPACK_IMPORTED_MODULE_1__sigma_plugins_relativeSize__","RelativeSize","relativeSize","initialSize","SigmaEnableWebGL","__WEBPACK_IMPORTED_MODULE_0__sigma_main__","__WEBPACK_IMPORTED_MODULE_1__sigma_webgl__","__WEBPACK_IMPORTED_MODULE_1__Utils__","ReactSigmaLayoutPlugin","_mounted","_start","listener","propsChanged","prev","114","__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js__","__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js__","__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js__","__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js__","__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js__","__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js__","__WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js__","__WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js__","__WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js__","__WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js__","__WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js__","__WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js__","__WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js__","__WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js__","__WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js__","__WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js__","__WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js__","21","dashed","active","active_color","save","setLineDash","restore","22","dotted","23","parallel","sX","sY","tX","tY","dist","24","tapered","globalAlpha","25","26","27","28","31","curve","sSize","dX","dY","sign","join","textAlign","textBaseline","translate","rotate","32","curvedArrow","33","49","arrow","tSize","aSize","aX","aY","vX","vY","50","bezierCurveTo","quadraticCurveTo","51","53","54","55","126","15","Supervisor","sigInst","workerFn","getForceAtlas2Worker","URL","webkitURL","ppn","ppe","shouldUseWorker","webWorkers","workerUrl","started","Worker","blob","makeBlob","createObjectURL","postMessage","webkitPostMessage","eval","msgName","nodesByteArray","Float32Array","applyLayoutChanges","sendByteArrayToWorker","graphToByteArrays","Blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","append","getBlob","nbytes","ebytes","nIndex","edgesByteArray","degree","action","content","buffer","buffers","killWorker","terminate","configure","supervisor","configForceAtlas2","isForceAtlas2Running","16","crush","fnString","ep","rp","replace","getWorkerFn","inWebWorker","W","nodeProperties","edgeProperties","ppr","regionProperties","init","NodeMatrix","EdgeMatrix","nodesLength","edgesLength","pass","n1","n2","outboundAttCompensation","coefficient","xDist","yDist","ewc","distance","factor","outboundAttractionDistribution","barnesHutOptimize","q","q2","RegionMatrix","scalingRatio","barnesHutTheta","adjustSizes","gravity","strongGravityMode","edgeWeightInfluence","swinging","traction","nodespeed","maxForce","slowDown","iterations","run","sendNewCoords","converged","startingIterations","iterationsPerRender","old_dx","old_dy","mass","convergence","fixed","centerX","centerY","nextSibling","firstChild","massCenterX","massCenterY","createEvent","initEvent","createEventObject","eventType","118","Noverlap","animate","atomicGo","iterCount","xwidth","yheight","xcenter","ycenter","grid","row","minXBox","maxXBox","minYBox","maxYBox","adjacentNodes","subRow","subCol","nxmin","nxmax","nymin","nymax","nodesCount","xmin","xmax","ymin","ymax","dn","dn_x","dn_size","scaleNodes","nodeMargin","dn_y","permittedExpansion","gridSize","floor","nodeId","subNodeId","speed","go","maxIterations","rendererIndex","_eventEmitter","_instance","isNoverlapRunning","119","endpoint","method","setRequestHeader","btoa","cypher_parse","nodesMap","edgesMap","results","sigmaNode","relationships","sigmaEdge","cypherCallback","defaultProducers","statements","statement","resultDataContents","includeStats","response","getLabels","getTypes","116","__WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js__","__WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js__","29","shapes","register","drawShape","drawBorder","enumerateShapes","genericDrawShape","shapeFunc","genericDrawBorder","drawSquare","drawCircle","drawDiamond","drawCross","lineWeight","cross","drawEquilateral","pcount","equilateral","numPoints","radius","starShape","star","inRatio","innerRatio","outR","inR","angleOffset","drawPacman","ShapeLibrary","enumerate","30","imgCache","initPlugin","inst","drawImage","image","ih","iw","clip","src","onerror","onload","xratio","yratio","drawSVGImage","group","clipCircle","createElementNS","clipPath","clipPathId","setAttributeNS","absolutePath","navigator","userAgent","location","href","borderColor","svg","circle","update","childNodes","className","getAttribute","display","shape","CustomShapes","128","19","Node","viz","attributes","Edge","Graph","xml","_metaData","metas","_xml","meta","lastmodifieddate","_helpers","nodeListEach","child","textContent","_model","cls","model","title","default_el","nodeListToArray","defaultValue","_data","node_or_edge","attvalues_els","getElementsByTagName","ah","nodeListToHash","namedNodeMapToObject","enforceType","_nodes","hasViz","_nodeViz","color_el","getFirstElementByTagNS","getRGB","pos_el","size_el","shape_el","_edges","default_type","_edgeViz","thick_el","thickness","root","getModelTags","mode","edgeType","defaultEdgetype","nodeModel","edgeModel","fetch","gexf_url","getResult","async","overrideMimeType","responseXML","DOMParser","parseFromString","fetchAndParse","attributesTags","modelTags","nodeList","len","nodeName","func","prop","nodeMap","getElementsByTagNameNS","attribute","attr_value","values","20","edgeId","_id","arr","direction","121","parseColor","interpolateColors","step","startPositions","animations","122","_keysIndex","_chain","processor","predicate","unregister","_s","_g","deepCopy","cloneChain","chain","eid","Processors","ln","neighbors","nn","no","edgesBy","la","unshift","export","import","124","117","__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js__","__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js__","__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js__","__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js__","__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js__","__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js__","__WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js__","62","webgl","WebGLRenderingContext","63","nodeFloatArrays","edgeFloatArrays","edgeIndicesArrays","array","POINTS","ATTRIBUTES","computeIndices","nodesGl","edgesGl","indices","edgePrograms","initProgram","useProgram","indicesData","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","nodePrograms","preserveDrawingBuffer","viewport","COLOR_BUFFER_BIT","64","targetSize","positionLocation1","getAttribLocation","positionLocation2","thicknessLocation","targetSizeLocation","delayLocation","minusLocation","headLocation","headPositionLocation","colorLocation","resolutionLocation","getUniformLocation","matrixLocation","matrixHalfPiLocation","matrixHalfPiMinusLocation","ratioLocation","nodeRatioLocation","arrowHeadLocation","scaleLocation","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","uniform2f","uniform1f","uniformMatrix3fv","uniformMatrix2fv","enableVertexAttribArray","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","drawArrays","TRIANGLES","vertexShader","fragmentShader","VERTEX_SHADER","FRAGMENT_SHADER","65","66","fast","positionLocation","DYNAMIC_DRAW","LINES","67","sizeLocation","angleLocation","68","__WEBPACK_IMPORTED_MODULE_0__Sigma__","__WEBPACK_IMPORTED_MODULE_1__EdgeShapes__","__WEBPACK_IMPORTED_MODULE_2__NodeShapes__","__WEBPACK_IMPORTED_MODULE_3__LoadJSON__","__WEBPACK_IMPORTED_MODULE_4__LoadGEXF__","__WEBPACK_IMPORTED_MODULE_5__Filter__","__WEBPACK_IMPORTED_MODULE_6__ForceAtlas2__","__WEBPACK_IMPORTED_MODULE_7__RelativeSize__","__WEBPACK_IMPORTED_MODULE_8__NOverlap__","__WEBPACK_IMPORTED_MODULE_9__NeoCypher__","__WEBPACK_IMPORTED_MODULE_10__NeoGraphItemsProducers__","__WEBPACK_IMPORTED_MODULE_11__RandomizeNodePositions__","__WEBPACK_IMPORTED_MODULE_12__SigmaEnableWebGL__"],"mappings":"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","file":"react-sigma.min.js","sourcesContent":["var ReactSigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 29);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\nmodule.exports = undefined;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony export (immutable) */ exports[\"a\"] = embedProps;\n\n\nfunction embedProps(elements, extraProps) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.Children.map(elements, function (element) {\n                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(element, extraProps);\n        });\n}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__tools__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_main__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_main___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__sigma_main__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n/**\n *\n * Sigma - React.JS flow-typed interface for Sigma js library - fastest opensource rendering engine for network graphs.\n * Sigma makes it easy to publish networks on Web pages, and allows developers to integrate network exploration in\n * rich Web applications.\n *\n * Parameter types\n * ```\n * type Sigma$Graph$Data = {\n *   nodes: [Sigma$Node],\n *   edges: [Sigma$Edge]\n * };\n *\n * type Sigma$Node = {\n *   id: string,\n *   label?: string,\n *   x?: number,\n *   y?: number,\n *   size?: number,\n *   color?: color\n * };\n *\n * type Sigma$Edge = {\n *   id: string,\n *   source: string,\n *   target: string,\n *   label?: string,\n *   color?: color\n * };\n * ```\n *\n *\n * @signature `<Sigma graph={graph} settings={settings} onClickNode={func}.../>`\n *\n * @param {CSS} style   CSS style description for main div holding graph, should be specified in React format\n * @param {Sigma$Settings} settings     js object with sigma initialization options, for full list see [sigma settings page](https://github.com/jacomyal/sigma.js/wiki/Settings)\n * @param {string} renderer     can be \"webgl\" or \"canvas\"\n * @param {Sigma$Graph$Data} graph   js object with array of nodes and edges used to initialize sigma\n * @param {Sigma$EventHandler} onClickNode      set sigma callback for \"clickNode\" event (see below)\n * @param {Sigma$EventHandler} onOverNode      set sigma callback for \"overNode\" event\n * @param {Sigma$EventHandler} onOutNode      set sigma callback for \"outNode\" event\n * @param {Sigma$EventHandler} onClickEdge     set sigma callback for \"clickEdge\" event\n * @param {Sigma$EventHandler} onOverEdge      set sigma callback for \"overEdge\" event\n * @param {Sigma$EventHandler} onOutEdge      set sigma callback for \"outEdge\" event\n *\n * @example\n * Can be composed with sigma sub-components using JSX syntax\n * <Sigma renderer=\"webgl\" style={{maxWidth:\"inherit\", height:\"400px\"}}\n *        settings={{drawEdges:false}}\n *        onOverNode={e => console.log(\"Mouse over node: \" + e.data.node.label)}>\n *        graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n *   <RelativeSize initialSize={8}/>\n * </Sigma>\n *\n */\n\nvar Sigma = function (_React$PureComponent) {\n  _inherits(Sigma, _React$PureComponent);\n\n  function Sigma(props) {\n    _classCallCheck(this, Sigma);\n\n    var _this = _possibleConstructorReturn(this, (Sigma.__proto__ || Object.getPrototypeOf(Sigma)).call(this, props));\n\n    _this.state = { renderer: false };\n    var settings = _this.props.settings ? _this.props.settings : {};\n    _this.sigma = new sigma({ settings: settings });\n    _this.initRenderer = _this.initRenderer.bind(_this);\n    Sigma.bindHandlers(_this.props, _this.sigma);\n    if (_this.props.graph) _this.sigma.graph.read(_this.props.graph);\n    return _this;\n  }\n\n  _createClass(Sigma, [{\n    key: 'initRenderer',\n    value: function initRenderer(container) {\n      if (container) {\n        var options = { container: container };\n        if (this.props.renderer) options.type = this.props.renderer;\n        this.sigmaRenderer = this.sigma.addRenderer(options);\n        this.sigma.refresh();\n        this.setState({ renderer: true });\n      } else if (this.sigmaRenderer) {\n        this.sigma.killRenderer(this.sigmaRenderer);\n        this.sigmaRenderer = null;\n        this.setState({ renderer: false });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      console.log(\"Sigma unmounting\");\n      this.sigma.kill();\n      this.sigmaRenderer = null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.state.renderer ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__tools__[\"a\" /* embedProps */])(this.props.children, { sigma: this.sigma }) : null;\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { ref: this.initRenderer, style: this.props.style },\n        children\n      );\n    }\n\n    /**\n    Initialize event handlers with sigma.\n    \n    Event handler function receives [Sigma Event](https://github.com/jacomyal/sigma.js/wiki/Events-API)\n    with the structure of following type:\n    ```\n    type Sigma$Event = {\n      data: {\n        node?: Neo4j$Node, //for node events is sigma node data\n        edge?: Neo4j$Edge, //for edge events is sigma edge data\n        captor: {   // information about event handler, for instance position on the page {clientX, clientY}\n          clientX: number,\n          clientY: number\n    }}}\n    \n    type Sigma$EventHandler = (node:Sigma$Event) => void\n    \n    ```\n    **/\n\n  }], [{\n    key: 'bindHandlers',\n    value: function bindHandlers(handlers, sigma) {\n      [\"clickNode\", \"overNode\", \"outNode\", \"clickEdge\", \"overEdge\", \"outEdge\", \"clickStage\"].forEach(function (event) {\n        var handler = \"on\" + event[0].toUpperCase() + event.substr(1);\n        if (handlers[handler]) {\n          sigma.bind(event, handlers[handler]);\n        }\n      });\n    }\n  }]);\n\n  return Sigma;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);\n\nSigma.defaultProps = {\n  settings: {\n    defaultNodeColor: \"#3388AA\",\n    defaultLabelSize: 8,\n    defaultLabelColor: \"#777\",\n    labelThreshold: 12,\n    hoverFontStyle: \"text-size: 11\",\n    batchEdgesDrawing: true,\n    drawEdges: true,\n    drawEdgeLabels: false\n  },\n  style: {\n    maxWidth: \"inherit\",\n    height: \"400px\"\n  }\n};\n\n\n/* harmony default export */ exports[\"a\"] = Sigma;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 115);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 115:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js__ = __webpack_require__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js__ = __webpack_require__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js__ = __webpack_require__(61);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js__ = __webpack_require__(52);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js__ = __webpack_require__(44);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js__ = __webpack_require__(43);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js__ = __webpack_require__(47);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js__);\n// Sigma build is quite big and not friendly for webpack, therefore we use custom import\n\n// Core:\n\n\n// Utils:\n\n\n\n\n// Main classes:\n\n\n\n\n\n\n\n\n// Captors:\n\n\n\n// Renderers:\n\n\n// Sub functions per engine:\n\n\n\n\n\n\n\n// Middlewares:\n\n\n\n// Miscellaneous:\n\n\n\n\n\nvar sigma = window.sigma;\n\n// By default we exclude WbGL renderer from the Sigma component.\n// WebGL has to be imported explicitly via <SigmaEnableWebGL /> in the global context.\nsigma.renderers.def = sigma.renderers.canvas;\n\n// We do not support svg at all to reduce package size\n//    'src/renderers/sigma.renderers.svg.js',\n//    'src/renderers/svg/sigma.svg.utils.js',\n//    'src/renderers/svg/sigma.svg.nodes.def.js',\n//    'src/renderers/svg/sigma.svg.edges.def.js',\n//    'src/renderers/svg/sigma.svg.edges.curve.js',\n//    'src/renderers/svg/sigma.svg.labels.def.js',\n//    'src/renderers/svg/sigma.svg.hovers.def.js',\n\n/* harmony default export */ exports[\"default\"] = sigma;\n\n/***/ },\n\n/***/ 34:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.captors');\n\n  /**\n   * The user inputs default captor. It deals with mouse events, keyboards\n   * events and touch events.\n   *\n   * @param  {DOMElement}   target   The DOM element where the listeners will be\n   *                                 bound.\n   * @param  {camera}       camera   The camera related to the target.\n   * @param  {configurable} settings The settings function.\n   * @return {sigma.captor}          The fresh new captor instance.\n   */\n  sigma.captors.mouse = function(target, camera, settings) {\n    var _self = this,\n        _target = target,\n        _camera = camera,\n        _settings = settings,\n\n        // CAMERA MANAGEMENT:\n        // ******************\n        // The camera position when the user starts dragging:\n        _startCameraX,\n        _startCameraY,\n        _startCameraAngle,\n\n        // The latest stage position:\n        _lastCameraX,\n        _lastCameraY,\n        _lastCameraAngle,\n        _lastCameraRatio,\n\n        // MOUSE MANAGEMENT:\n        // *****************\n        // The mouse position when the user starts dragging:\n        _startMouseX,\n        _startMouseY,\n\n        _isMouseDown,\n        _isMoving,\n        _hasDragged,\n        _downStartTime,\n        _movingTimeoutId;\n\n    sigma.classes.dispatcher.extend(this);\n\n    sigma.utils.doubleClick(_target, 'click', _doubleClickHandler);\n    _target.addEventListener('DOMMouseScroll', _wheelHandler, false);\n    _target.addEventListener('mousewheel', _wheelHandler, false);\n    _target.addEventListener('mousemove', _moveHandler, false);\n    _target.addEventListener('mousedown', _downHandler, false);\n    _target.addEventListener('click', _clickHandler, false);\n    _target.addEventListener('mouseout', _outHandler, false);\n    document.addEventListener('mouseup', _upHandler, false);\n\n\n\n\n    /**\n     * This method unbinds every handlers that makes the captor work.\n     */\n    this.kill = function() {\n      sigma.utils.unbindDoubleClick(_target, 'click');\n      _target.removeEventListener('DOMMouseScroll', _wheelHandler);\n      _target.removeEventListener('mousewheel', _wheelHandler);\n      _target.removeEventListener('mousemove', _moveHandler);\n      _target.removeEventListener('mousedown', _downHandler);\n      _target.removeEventListener('click', _clickHandler);\n      _target.removeEventListener('mouseout', _outHandler);\n      document.removeEventListener('mouseup', _upHandler);\n    };\n\n\n\n\n    // MOUSE EVENTS:\n    // *************\n\n    /**\n     * The handler listening to the 'move' mouse event. It will effectively\n     * drag the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _moveHandler(e) {\n      var x,\n          y,\n          pos;\n\n      // Dispatch event:\n      if (_settings('mouseEnabled')) {\n        _self.dispatchEvent('mousemove',\n          sigma.utils.mouseCoords(e));\n\n        if (_isMouseDown) {\n          _isMoving = true;\n          _hasDragged = true;\n\n          if (_movingTimeoutId)\n            clearTimeout(_movingTimeoutId);\n\n          _movingTimeoutId = setTimeout(function() {\n            _isMoving = false;\n          }, _settings('dragTimeout'));\n\n          sigma.misc.animation.killAll(_camera);\n\n          _camera.isMoving = true;\n          pos = _camera.cameraPosition(\n            sigma.utils.getX(e) - _startMouseX,\n            sigma.utils.getY(e) - _startMouseY,\n            true\n          );\n\n          x = _startCameraX - pos.x;\n          y = _startCameraY - pos.y;\n\n          if (x !== _camera.x || y !== _camera.y) {\n            _lastCameraX = _camera.x;\n            _lastCameraY = _camera.y;\n\n            _camera.goTo({\n              x: x,\n              y: y\n            });\n          }\n\n          if (e.preventDefault)\n            e.preventDefault();\n          else\n            e.returnValue = false;\n\n          e.stopPropagation();\n          return false;\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'up' mouse event. It will stop dragging the\n     * graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _upHandler(e) {\n      if (_settings('mouseEnabled') && _isMouseDown) {\n        _isMouseDown = false;\n        if (_movingTimeoutId)\n          clearTimeout(_movingTimeoutId);\n\n        _camera.isMoving = false;\n\n        var x = sigma.utils.getX(e),\n            y = sigma.utils.getY(e);\n\n        if (_isMoving) {\n          sigma.misc.animation.killAll(_camera);\n          sigma.misc.animation.camera(\n            _camera,\n            {\n              x: _camera.x +\n                _settings('mouseInertiaRatio') * (_camera.x - _lastCameraX),\n              y: _camera.y +\n                _settings('mouseInertiaRatio') * (_camera.y - _lastCameraY)\n            },\n            {\n              easing: 'quadraticOut',\n              duration: _settings('mouseInertiaDuration')\n            }\n          );\n        } else if (\n          _startMouseX !== x ||\n          _startMouseY !== y\n        )\n          _camera.goTo({\n            x: _camera.x,\n            y: _camera.y\n          });\n\n        _self.dispatchEvent('mouseup',\n          sigma.utils.mouseCoords(e));\n\n        // Update _isMoving flag:\n        _isMoving = false;\n      }\n    }\n\n    /**\n     * The handler listening to the 'down' mouse event. It will start observing\n     * the mouse position for dragging the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _downHandler(e) {\n      if (_settings('mouseEnabled')) {\n        _startCameraX = _camera.x;\n        _startCameraY = _camera.y;\n\n        _lastCameraX = _camera.x;\n        _lastCameraY = _camera.y;\n\n        _startMouseX = sigma.utils.getX(e);\n        _startMouseY = sigma.utils.getY(e);\n\n        _hasDragged = false;\n        _downStartTime = (new Date()).getTime();\n\n        switch (e.which) {\n          case 2:\n            // Middle mouse button pressed\n            // Do nothing.\n            break;\n          case 3:\n            // Right mouse button pressed\n            _self.dispatchEvent('rightclick',\n              sigma.utils.mouseCoords(e, _startMouseX, _startMouseY));\n            break;\n          // case 1:\n          default:\n            // Left mouse button pressed\n            _isMouseDown = true;\n\n            _self.dispatchEvent('mousedown',\n              sigma.utils.mouseCoords(e, _startMouseX, _startMouseY));\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'out' mouse event. It will just redispatch\n     * the event.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _outHandler(e) {\n      if (_settings('mouseEnabled'))\n        _self.dispatchEvent('mouseout');\n    }\n\n    /**\n     * The handler listening to the 'click' mouse event. It will redispatch the\n     * click event, but with normalized X and Y coordinates.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _clickHandler(e) {\n      if (_settings('mouseEnabled')) {\n        var event = sigma.utils.mouseCoords(e);\n        event.isDragging =\n          (((new Date()).getTime() - _downStartTime) > 100) && _hasDragged;\n        _self.dispatchEvent('click', event);\n      }\n\n      if (e.preventDefault)\n        e.preventDefault();\n      else\n        e.returnValue = false;\n\n      e.stopPropagation();\n      return false;\n    }\n\n    /**\n     * The handler listening to the double click custom event. It will\n     * basically zoom into the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _doubleClickHandler(e) {\n      var pos,\n          ratio,\n          animation;\n\n      if (_settings('mouseEnabled')) {\n        ratio = 1 / _settings('doubleClickZoomingRatio');\n\n        _self.dispatchEvent('doubleclick',\n            sigma.utils.mouseCoords(e, _startMouseX, _startMouseY));\n\n        if (_settings('doubleClickEnabled')) {\n          pos = _camera.cameraPosition(\n            sigma.utils.getX(e) - sigma.utils.getCenter(e).x,\n            sigma.utils.getY(e) - sigma.utils.getCenter(e).y,\n            true\n          );\n\n          animation = {\n            duration: _settings('doubleClickZoomDuration')\n          };\n\n          sigma.utils.zoomTo(_camera, pos.x, pos.y, ratio, animation);\n        }\n\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n\n        e.stopPropagation();\n        return false;\n      }\n    }\n\n    /**\n     * The handler listening to the 'wheel' mouse event. It will basically zoom\n     * in or not into the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _wheelHandler(e) {\n      var pos,\n          ratio,\n          animation,\n          wheelDelta = sigma.utils.getDelta(e);\n\n      if (_settings('mouseEnabled') && _settings('mouseWheelEnabled') && wheelDelta !== 0) {\n        ratio = wheelDelta > 0 ?\n          1 / _settings('zoomingRatio') :\n          _settings('zoomingRatio');\n\n        pos = _camera.cameraPosition(\n          sigma.utils.getX(e) - sigma.utils.getCenter(e).x,\n          sigma.utils.getY(e) - sigma.utils.getCenter(e).y,\n          true\n        );\n\n        animation = {\n          duration: _settings('mouseZoomDuration')\n        };\n\n        sigma.utils.zoomTo(_camera, pos.x, pos.y, ratio, animation);\n\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n\n        e.stopPropagation();\n        return false;\n      }\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 35:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.captors');\n\n  /**\n   * The user inputs default captor. It deals with mouse events, keyboards\n   * events and touch events.\n   *\n   * @param  {DOMElement}   target   The DOM element where the listeners will be\n   *                                 bound.\n   * @param  {camera}       camera   The camera related to the target.\n   * @param  {configurable} settings The settings function.\n   * @return {sigma.captor}          The fresh new captor instance.\n   */\n  sigma.captors.touch = function(target, camera, settings) {\n    var _self = this,\n        _target = target,\n        _camera = camera,\n        _settings = settings,\n\n        // CAMERA MANAGEMENT:\n        // ******************\n        // The camera position when the user starts dragging:\n        _startCameraX,\n        _startCameraY,\n        _startCameraAngle,\n        _startCameraRatio,\n\n        // The latest stage position:\n        _lastCameraX,\n        _lastCameraY,\n        _lastCameraAngle,\n        _lastCameraRatio,\n\n        // TOUCH MANAGEMENT:\n        // *****************\n        // Touches that are down:\n        _downTouches = [],\n\n        _startTouchX0,\n        _startTouchY0,\n        _startTouchX1,\n        _startTouchY1,\n        _startTouchAngle,\n        _startTouchDistance,\n\n        _touchMode,\n\n        _isMoving,\n        _doubleTap,\n        _movingTimeoutId;\n\n    sigma.classes.dispatcher.extend(this);\n\n    sigma.utils.doubleClick(_target, 'touchstart', _doubleTapHandler);\n    _target.addEventListener('touchstart', _handleStart, false);\n    _target.addEventListener('touchend', _handleLeave, false);\n    _target.addEventListener('touchcancel', _handleLeave, false);\n    _target.addEventListener('touchleave', _handleLeave, false);\n    _target.addEventListener('touchmove', _handleMove, false);\n\n    function position(e) {\n      var offset = sigma.utils.getOffset(_target);\n\n      return {\n        x: e.pageX - offset.left,\n        y: e.pageY - offset.top\n      };\n    }\n\n    /**\n     * This method unbinds every handlers that makes the captor work.\n     */\n    this.kill = function() {\n      sigma.utils.unbindDoubleClick(_target, 'touchstart');\n      _target.addEventListener('touchstart', _handleStart);\n      _target.addEventListener('touchend', _handleLeave);\n      _target.addEventListener('touchcancel', _handleLeave);\n      _target.addEventListener('touchleave', _handleLeave);\n      _target.addEventListener('touchmove', _handleMove);\n    };\n\n    // TOUCH EVENTS:\n    // *************\n    /**\n     * The handler listening to the 'touchstart' event. It will set the touch\n     * mode (\"_touchMode\") and start observing the user touch moves.\n     *\n     * @param {event} e A touch event.\n     */\n    function _handleStart(e) {\n      if (_settings('touchEnabled')) {\n        var x0,\n            x1,\n            y0,\n            y1,\n            pos0,\n            pos1;\n\n        _downTouches = e.touches;\n\n        switch (_downTouches.length) {\n          case 1:\n            _camera.isMoving = true;\n            _touchMode = 1;\n\n            _startCameraX = _camera.x;\n            _startCameraY = _camera.y;\n\n            _lastCameraX = _camera.x;\n            _lastCameraY = _camera.y;\n\n            pos0 = position(_downTouches[0]);\n            _startTouchX0 = pos0.x;\n            _startTouchY0 = pos0.y;\n\n            break;\n          case 2:\n            _camera.isMoving = true;\n            _touchMode = 2;\n\n            pos0 = position(_downTouches[0]);\n            pos1 = position(_downTouches[1]);\n            x0 = pos0.x;\n            y0 = pos0.y;\n            x1 = pos1.x;\n            y1 = pos1.y;\n\n            _lastCameraX = _camera.x;\n            _lastCameraY = _camera.y;\n\n            _startCameraAngle = _camera.angle;\n            _startCameraRatio = _camera.ratio;\n\n            _startCameraX = _camera.x;\n            _startCameraY = _camera.y;\n\n            _startTouchX0 = x0;\n            _startTouchY0 = y0;\n            _startTouchX1 = x1;\n            _startTouchY1 = y1;\n\n            _startTouchAngle = Math.atan2(\n              _startTouchY1 - _startTouchY0,\n              _startTouchX1 - _startTouchX0\n            );\n            _startTouchDistance = Math.sqrt(\n              (_startTouchY1 - _startTouchY0) *\n                (_startTouchY1 - _startTouchY0) +\n              (_startTouchX1 - _startTouchX0) *\n                (_startTouchX1 - _startTouchX0)\n            );\n\n            e.preventDefault();\n            return false;\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'touchend', 'touchcancel' and 'touchleave'\n     * event. It will update the touch mode if there are still at least one\n     * finger, and stop dragging else.\n     *\n     * @param {event} e A touch event.\n     */\n    function _handleLeave(e) {\n      if (_settings('touchEnabled')) {\n        _downTouches = e.touches;\n        var inertiaRatio = _settings('touchInertiaRatio');\n\n        if (_movingTimeoutId) {\n          _isMoving = false;\n          clearTimeout(_movingTimeoutId);\n        }\n\n        switch (_touchMode) {\n          case 2:\n            if (e.touches.length === 1) {\n              _handleStart(e);\n\n              e.preventDefault();\n              break;\n            }\n            /* falls through */\n          case 1:\n            _camera.isMoving = false;\n            _self.dispatchEvent('stopDrag');\n\n            if (_isMoving) {\n              _doubleTap = false;\n              sigma.misc.animation.camera(\n                _camera,\n                {\n                  x: _camera.x +\n                    inertiaRatio * (_camera.x - _lastCameraX),\n                  y: _camera.y +\n                    inertiaRatio * (_camera.y - _lastCameraY)\n                },\n                {\n                  easing: 'quadraticOut',\n                  duration: _settings('touchInertiaDuration')\n                }\n              );\n            }\n\n            _isMoving = false;\n            _touchMode = 0;\n            break;\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'touchmove' event. It will effectively drag\n     * the graph, and eventually zooms and turn it if the user is using two\n     * fingers.\n     *\n     * @param {event} e A touch event.\n     */\n    function _handleMove(e) {\n      if (!_doubleTap && _settings('touchEnabled')) {\n        var x0,\n            x1,\n            y0,\n            y1,\n            cos,\n            sin,\n            end,\n            pos0,\n            pos1,\n            diff,\n            start,\n            dAngle,\n            dRatio,\n            newStageX,\n            newStageY,\n            newStageRatio,\n            newStageAngle;\n\n        _downTouches = e.touches;\n        _isMoving = true;\n\n        if (_movingTimeoutId)\n          clearTimeout(_movingTimeoutId);\n\n        _movingTimeoutId = setTimeout(function() {\n          _isMoving = false;\n        }, _settings('dragTimeout'));\n\n        switch (_touchMode) {\n          case 1:\n            pos0 = position(_downTouches[0]);\n            x0 = pos0.x;\n            y0 = pos0.y;\n\n            diff = _camera.cameraPosition(\n              x0 - _startTouchX0,\n              y0 - _startTouchY0,\n              true\n            );\n\n            newStageX = _startCameraX - diff.x;\n            newStageY = _startCameraY - diff.y;\n\n            if (newStageX !== _camera.x || newStageY !== _camera.y) {\n              _lastCameraX = _camera.x;\n              _lastCameraY = _camera.y;\n\n              _camera.goTo({\n                x: newStageX,\n                y: newStageY\n              });\n\n              _self.dispatchEvent('mousemove',\n                sigma.utils.mouseCoords(e, pos0.x, pos0.y));\n\n              _self.dispatchEvent('drag');\n            }\n            break;\n          case 2:\n            pos0 = position(_downTouches[0]);\n            pos1 = position(_downTouches[1]);\n            x0 = pos0.x;\n            y0 = pos0.y;\n            x1 = pos1.x;\n            y1 = pos1.y;\n\n            start = _camera.cameraPosition(\n              (_startTouchX0 + _startTouchX1) / 2 -\n                sigma.utils.getCenter(e).x,\n              (_startTouchY0 + _startTouchY1) / 2 -\n                sigma.utils.getCenter(e).y,\n              true\n            );\n            end = _camera.cameraPosition(\n              (x0 + x1) / 2 - sigma.utils.getCenter(e).x,\n              (y0 + y1) / 2 - sigma.utils.getCenter(e).y,\n              true\n            );\n\n            dAngle = Math.atan2(y1 - y0, x1 - x0) - _startTouchAngle;\n            dRatio = Math.sqrt(\n              (y1 - y0) * (y1 - y0) + (x1 - x0) * (x1 - x0)\n            ) / _startTouchDistance;\n\n            // Translation:\n            x0 = start.x;\n            y0 = start.y;\n\n            // Homothetic transformation:\n            newStageRatio = _startCameraRatio / dRatio;\n            x0 = x0 * dRatio;\n            y0 = y0 * dRatio;\n\n            // Rotation:\n            newStageAngle = _startCameraAngle - dAngle;\n            cos = Math.cos(-dAngle);\n            sin = Math.sin(-dAngle);\n            x1 = x0 * cos + y0 * sin;\n            y1 = y0 * cos - x0 * sin;\n            x0 = x1;\n            y0 = y1;\n\n            // Finalize:\n            newStageX = x0 - end.x + _startCameraX;\n            newStageY = y0 - end.y + _startCameraY;\n\n            if (\n              newStageRatio !== _camera.ratio ||\n              newStageAngle !== _camera.angle ||\n              newStageX !== _camera.x ||\n              newStageY !== _camera.y\n            ) {\n              _lastCameraX = _camera.x;\n              _lastCameraY = _camera.y;\n              _lastCameraAngle = _camera.angle;\n              _lastCameraRatio = _camera.ratio;\n\n              _camera.goTo({\n                x: newStageX,\n                y: newStageY,\n                angle: newStageAngle,\n                ratio: newStageRatio\n              });\n\n              _self.dispatchEvent('drag');\n            }\n\n            break;\n        }\n\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    /**\n     * The handler listening to the double tap custom event. It will\n     * basically zoom into the graph.\n     *\n     * @param {event} e A touch event.\n     */\n    function _doubleTapHandler(e) {\n      var pos,\n          ratio,\n          animation;\n\n      if (e.touches && e.touches.length === 1 && _settings('touchEnabled')) {\n        _doubleTap = true;\n\n        ratio = 1 / _settings('doubleClickZoomingRatio');\n\n        pos = position(e.touches[0]);\n        _self.dispatchEvent('doubleclick',\n          sigma.utils.mouseCoords(e, pos.x, pos.y));\n\n        if (_settings('doubleClickEnabled')) {\n          pos = _camera.cameraPosition(\n            pos.x - sigma.utils.getCenter(e).x,\n            pos.y - sigma.utils.getCenter(e).y,\n            true\n          );\n\n          animation = {\n            duration: _settings('doubleClickZoomDuration'),\n            onComplete: function() {\n              _doubleTap = false;\n            }\n          };\n\n          sigma.utils.zoomTo(_camera, pos.x, pos.y, ratio, animation);\n        }\n\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n\n        e.stopPropagation();\n        return false;\n      }\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 36:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  sigma.utils.pkg('sigma.classes');\n\n  /**\n   * The camera constructor. It just initializes its attributes and methods.\n   *\n   * @param  {string}       id       The id.\n   * @param  {sigma.classes.graph}  graph    The graph.\n   * @param  {configurable} settings The settings function.\n   * @param  {?object}      options  Eventually some overriding options.\n   * @return {camera}                Returns the fresh new camera instance.\n   */\n  sigma.classes.camera = function(id, graph, settings, options) {\n    sigma.classes.dispatcher.extend(this);\n\n    Object.defineProperty(this, 'graph', {\n      value: graph\n    });\n    Object.defineProperty(this, 'id', {\n      value: id\n    });\n    Object.defineProperty(this, 'readPrefix', {\n      value: 'read_cam' + id + ':'\n    });\n    Object.defineProperty(this, 'prefix', {\n      value: 'cam' + id + ':'\n    });\n\n    this.x = 0;\n    this.y = 0;\n    this.ratio = 1;\n    this.angle = 0;\n    this.isAnimated = false;\n    this.settings = (typeof options === 'object' && options) ?\n      settings.embedObject(options) :\n      settings;\n  };\n\n  /**\n   * Updates the camera position.\n   *\n   * @param  {object} coordinates The new coordinates object.\n   * @return {camera}             Returns the camera.\n   */\n  sigma.classes.camera.prototype.goTo = function(coordinates) {\n    if (!this.settings('enableCamera'))\n      return this;\n\n    var i,\n        l,\n        c = coordinates || {},\n        keys = ['x', 'y', 'ratio', 'angle'];\n\n    for (i = 0, l = keys.length; i < l; i++)\n      if (c[keys[i]] !== undefined) {\n        if (typeof c[keys[i]] === 'number' && !isNaN(c[keys[i]]))\n          this[keys[i]] = c[keys[i]];\n        else\n          throw 'Value for \"' + keys[i] + '\" is not a number.';\n      }\n\n    this.dispatchEvent('coordinatesUpdated');\n    return this;\n  };\n\n  /**\n   * This method takes a graph and computes for each node and edges its\n   * coordinates relatively to the center of the camera. Basically, it will\n   * compute the coordinates that will be used by the graphic renderers.\n   *\n   * Since it should be possible to use different cameras and different\n   * renderers, it is possible to specify a prefix to put before the new\n   * coordinates (to get something like \"node.camera1_x\")\n   *\n   * @param  {?string} read    The prefix of the coordinates to read.\n   * @param  {?string} write   The prefix of the coordinates to write.\n   * @param  {?object} options Eventually an object of options. Those can be:\n   *                           - A restricted nodes array.\n   *                           - A restricted edges array.\n   *                           - A width.\n   *                           - A height.\n   * @return {camera}        Returns the camera.\n   */\n  sigma.classes.camera.prototype.applyView = function(read, write, options) {\n    options = options || {};\n    write = write !== undefined ? write : this.prefix;\n    read = read !== undefined ? read : this.readPrefix;\n\n    var nodes = options.nodes || this.graph.nodes(),\n        edges = options.edges || this.graph.edges();\n\n    var i,\n        l,\n        node,\n        relCos = Math.cos(this.angle) / this.ratio,\n        relSin = Math.sin(this.angle) / this.ratio,\n        nodeRatio = Math.pow(this.ratio, this.settings('nodesPowRatio')),\n        edgeRatio = Math.pow(this.ratio, this.settings('edgesPowRatio')),\n        xOffset = (options.width || 0) / 2 - this.x * relCos - this.y * relSin,\n        yOffset = (options.height || 0) / 2 - this.y * relCos + this.x * relSin;\n\n    for (i = 0, l = nodes.length; i < l; i++) {\n      node = nodes[i];\n      node[write + 'x'] =\n        (node[read + 'x'] || 0) * relCos +\n        (node[read + 'y'] || 0) * relSin +\n        xOffset;\n      node[write + 'y'] =\n        (node[read + 'y'] || 0) * relCos -\n        (node[read + 'x'] || 0) * relSin +\n        yOffset;\n      node[write + 'size'] =\n        (node[read + 'size'] || 0) /\n        nodeRatio;\n    }\n\n    for (i = 0, l = edges.length; i < l; i++) {\n      edges[i][write + 'size'] =\n        (edges[i][read + 'size'] || 0) /\n        edgeRatio;\n    }\n\n    return this;\n  };\n\n  /**\n   * This function converts the coordinates of a point from the frame of the\n   * camera to the frame of the graph.\n   *\n   * @param  {number} x The X coordinate of the point in the frame of the\n   *                    camera.\n   * @param  {number} y The Y coordinate of the point in the frame of the\n   *                    camera.\n   * @return {object}   The point coordinates in the frame of the graph.\n   */\n  sigma.classes.camera.prototype.graphPosition = function(x, y, vector) {\n    var X = 0,\n        Y = 0,\n        cos = Math.cos(this.angle),\n        sin = Math.sin(this.angle);\n\n    // Revert the origin differential vector:\n    if (!vector) {\n      X = - (this.x * cos + this.y * sin) / this.ratio;\n      Y = - (this.y * cos - this.x * sin) / this.ratio;\n    }\n\n    return {\n      x: (x * cos + y * sin) / this.ratio + X,\n      y: (y * cos - x * sin) / this.ratio + Y\n    };\n  };\n\n  /**\n   * This function converts the coordinates of a point from the frame of the\n   * graph to the frame of the camera.\n   *\n   * @param  {number} x The X coordinate of the point in the frame of the\n   *                    graph.\n   * @param  {number} y The Y coordinate of the point in the frame of the\n   *                    graph.\n   * @return {object}   The point coordinates in the frame of the camera.\n   */\n  sigma.classes.camera.prototype.cameraPosition = function(x, y, vector) {\n    var X = 0,\n        Y = 0,\n        cos = Math.cos(this.angle),\n        sin = Math.sin(this.angle);\n\n    // Revert the origin differential vector:\n    if (!vector) {\n      X = - (this.x * cos + this.y * sin) / this.ratio;\n      Y = - (this.y * cos - this.x * sin) / this.ratio;\n    }\n\n    return {\n      x: ((x - X) * cos - (y - Y) * sin) * this.ratio,\n      y: ((y - Y) * cos + (x - X) * sin) * this.ratio\n    };\n  };\n\n  /**\n   * This method returns the transformation matrix of the camera. This is\n   * especially useful to apply the camera view directly in shaders, in case of\n   * WebGL rendering.\n   *\n   * @return {array} The transformation matrix.\n   */\n  sigma.classes.camera.prototype.getMatrix = function() {\n    var scale = sigma.utils.matrices.scale(1 / this.ratio),\n        rotation = sigma.utils.matrices.rotation(this.angle),\n        translation = sigma.utils.matrices.translation(-this.x, -this.y),\n        matrix = sigma.utils.matrices.multiply(\n          translation,\n          sigma.utils.matrices.multiply(\n            rotation,\n            scale\n          )\n        );\n\n    return matrix;\n  };\n\n  /**\n   * Taking a width and a height as parameters, this method returns the\n   * coordinates of the rectangle representing the camera on screen, in the\n   * graph's referentiel.\n   *\n   * To keep displaying labels of nodes going out of the screen, the method\n   * keeps a margin around the screen in the returned rectangle.\n   *\n   * @param  {number} width  The width of the screen.\n   * @param  {number} height The height of the screen.\n   * @return {object}        The rectangle as x1, y1, x2 and y2, representing\n   *                         two opposite points.\n   */\n  sigma.classes.camera.prototype.getRectangle = function(width, height) {\n    var widthVect = this.cameraPosition(width, 0, true),\n        heightVect = this.cameraPosition(0, height, true),\n        centerVect = this.cameraPosition(width / 2, height / 2, true),\n        marginX = this.cameraPosition(width / 4, 0, true).x,\n        marginY = this.cameraPosition(0, height / 4, true).y;\n\n    return {\n      x1: this.x - centerVect.x - marginX,\n      y1: this.y - centerVect.y - marginY,\n      x2: this.x - centerVect.x + marginX + widthVect.x,\n      y2: this.y - centerVect.y - marginY + widthVect.y,\n      height: Math.sqrt(\n        Math.pow(heightVect.x, 2) +\n        Math.pow(heightVect.y + 2 * marginY, 2)\n      )\n    };\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  /**\n   * This utils aims to facilitate the manipulation of each instance setting.\n   * Using a function instead of an object brings two main advantages: First,\n   * it will be easier in the future to catch settings updates through a\n   * function than an object. Second, giving it a full object will \"merge\" it\n   * to the settings object properly, keeping us to have to always add a loop.\n   *\n   * @return {configurable} The \"settings\" function.\n   */\n  var configurable = function() {\n    var i,\n        l,\n        data = {},\n        datas = Array.prototype.slice.call(arguments, 0);\n\n    /**\n     * The method to use to set or get any property of this instance.\n     *\n     * @param  {string|object}    a1 If it is a string and if a2 is undefined,\n     *                               then it will return the corresponding\n     *                               property. If it is a string and if a2 is\n     *                               set, then it will set a2 as the property\n     *                               corresponding to a1, and return this. If\n     *                               it is an object, then each pair string +\n     *                               object(or any other type) will be set as a\n     *                               property.\n     * @param  {*?}               a2 The new property corresponding to a1 if a1\n     *                               is a string.\n     * @return {*|configurable}      Returns itself or the corresponding\n     *                               property.\n     *\n     * Polymorphism:\n     * *************\n     * Here are some basic use examples:\n     *\n     *  > settings = new configurable();\n     *  > settings('mySetting', 42);\n     *  > settings('mySetting'); // Logs: 42\n     *  > settings('mySetting', 123);\n     *  > settings('mySetting'); // Logs: 123\n     *  > settings({mySetting: 456});\n     *  > settings('mySetting'); // Logs: 456\n     *\n     * Also, it is possible to use the function as a fallback:\n     *  > settings({mySetting: 'abc'}, 'mySetting');  // Logs: 'abc'\n     *  > settings({hisSetting: 'abc'}, 'mySetting'); // Logs: 456\n     */\n    var settings = function(a1, a2) {\n      var o,\n          i,\n          l,\n          k;\n\n      if (arguments.length === 1 && typeof a1 === 'string') {\n        if (data[a1] !== undefined)\n          return data[a1];\n        for (i = 0, l = datas.length; i < l; i++)\n          if (datas[i][a1] !== undefined)\n            return datas[i][a1];\n        return undefined;\n      } else if (typeof a1 === 'object' && typeof a2 === 'string') {\n        return (a1 || {})[a2] !== undefined ? a1[a2] : settings(a2);\n      } else {\n        o = (typeof a1 === 'object' && a2 === undefined) ? a1 : {};\n\n        if (typeof a1 === 'string')\n          o[a1] = a2;\n\n        for (i = 0, k = Object.keys(o), l = k.length; i < l; i++)\n          data[k[i]] = o[k[i]];\n\n        return this;\n      }\n    };\n\n    /**\n     * This method returns a new configurable function, with new objects\n     *\n     * @param  {object*}  Any number of objects to search in.\n     * @return {function} Returns the function. Check its documentation to know\n     *                    more about how it works.\n     */\n    settings.embedObjects = function() {\n      var args = datas.concat(\n        data\n      ).concat(\n        Array.prototype.splice.call(arguments, 0)\n      );\n\n      return configurable.apply({}, args);\n    };\n\n    // Initialize\n    for (i = 0, l = arguments.length; i < l; i++)\n      settings(arguments[i]);\n\n    return settings;\n  };\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.configurable = configurable;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = configurable;\n    exports.configurable = configurable;\n  } else\n    this.configurable = configurable;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  /**\n   * Dispatcher constructor.\n   *\n   * @return {dispatcher} The new dispatcher instance.\n   */\n  var dispatcher = function() {\n    Object.defineProperty(this, '_handlers', {\n      value: {}\n    });\n  };\n\n\n\n\n  /**\n   * Will execute the handler everytime that the indicated event (or the\n   * indicated events) will be triggered.\n   *\n   * @param  {string}           events  The name of the event (or the events\n   *                                    separated by spaces).\n   * @param  {function(Object)} handler The handler to bind.\n   * @return {dispatcher}               Returns the instance itself.\n   */\n  dispatcher.prototype.bind = function(events, handler) {\n    var i,\n        l,\n        event,\n        eArray;\n\n    if (\n      arguments.length === 1 &&\n      typeof arguments[0] === 'object'\n    )\n      for (events in arguments[0])\n        this.bind(events, arguments[0][events]);\n    else if (\n      arguments.length === 2 &&\n      typeof arguments[1] === 'function'\n    ) {\n      eArray = typeof events === 'string' ? events.split(' ') : events;\n\n      for (i = 0, l = eArray.length; i !== l; i += 1) {\n        event = eArray[i];\n\n        // Check that event is not '':\n        if (!event)\n          continue;\n\n        if (!this._handlers[event])\n          this._handlers[event] = [];\n\n        // Using an object instead of directly the handler will make possible\n        // later to add flags\n        this._handlers[event].push({\n          handler: handler\n        });\n      }\n    } else\n      throw 'bind: Wrong arguments.';\n\n    return this;\n  };\n\n  /**\n   * Removes the handler from a specified event (or specified events).\n   *\n   * @param  {?string}           events  The name of the event (or the events\n   *                                     separated by spaces). If undefined,\n   *                                     then all handlers are removed.\n   * @param  {?function(object)} handler The handler to unbind. If undefined,\n   *                                     each handler bound to the event or the\n   *                                     events will be removed.\n   * @return {dispatcher}                Returns the instance itself.\n   */\n  dispatcher.prototype.unbind = function(events, handler) {\n    var i,\n        n,\n        j,\n        m,\n        k,\n        a,\n        event,\n        eArray = typeof events === 'string' ? events.split(' ') : events;\n\n    if (!arguments.length) {\n      for (k in this._handlers)\n        delete this._handlers[k];\n      return this;\n    }\n\n    if (handler) {\n      for (i = 0, n = eArray.length; i !== n; i += 1) {\n        event = eArray[i];\n        if (this._handlers[event]) {\n          a = [];\n          for (j = 0, m = this._handlers[event].length; j !== m; j += 1)\n            if (this._handlers[event][j].handler !== handler)\n              a.push(this._handlers[event][j]);\n\n          this._handlers[event] = a;\n        }\n\n        if (this._handlers[event] && this._handlers[event].length === 0)\n          delete this._handlers[event];\n      }\n    } else\n      for (i = 0, n = eArray.length; i !== n; i += 1)\n        delete this._handlers[eArray[i]];\n\n    return this;\n  };\n\n  /**\n   * Executes each handler bound to the event\n   *\n   * @param  {string}     events The name of the event (or the events separated\n   *                             by spaces).\n   * @param  {?object}    data   The content of the event (optional).\n   * @return {dispatcher}        Returns the instance itself.\n   */\n  dispatcher.prototype.dispatchEvent = function(events, data) {\n    var i,\n        n,\n        j,\n        m,\n        a,\n        event,\n        eventName,\n        self = this,\n        eArray = typeof events === 'string' ? events.split(' ') : events;\n\n    data = data === undefined ? {} : data;\n\n    for (i = 0, n = eArray.length; i !== n; i += 1) {\n      eventName = eArray[i];\n\n      if (this._handlers[eventName]) {\n        event = self.getEvent(eventName, data);\n        a = [];\n\n        for (j = 0, m = this._handlers[eventName].length; j !== m; j += 1) {\n          this._handlers[eventName][j].handler(event);\n          if (!this._handlers[eventName][j].one)\n            a.push(this._handlers[eventName][j]);\n        }\n\n        this._handlers[eventName] = a;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Return an event object.\n   *\n   * @param  {string}  events The name of the event.\n   * @param  {?object} data   The content of the event (optional).\n   * @return {object}         Returns the instance itself.\n   */\n  dispatcher.prototype.getEvent = function(event, data) {\n    return {\n      type: event,\n      data: data || {},\n      target: this\n    };\n  };\n\n  /**\n   * A useful function to deal with inheritance. It will make the target\n   * inherit the prototype of the class dispatcher as well as its constructor.\n   *\n   * @param {object} target The target.\n   */\n  dispatcher.extend = function(target, args) {\n    var k;\n\n    for (k in dispatcher.prototype)\n      if (dispatcher.prototype.hasOwnProperty(k))\n        target[k] = dispatcher.prototype[k];\n\n    dispatcher.apply(target, args);\n  };\n\n\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.dispatcher = dispatcher;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = dispatcher;\n    exports.dispatcher = dispatcher;\n  } else\n    this.dispatcher = dispatcher;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * Sigma Quadtree Module for edges\n   * ===============================\n   *\n   * Author: Sébastien Heymann,\n   *   from the quad of Guillaume Plique (Yomguithereal)\n   * Version: 0.2\n   */\n\n\n\n  /**\n   * Quad Geometric Operations\n   * -------------------------\n   *\n   * A useful batch of geometric operations used by the quadtree.\n   */\n\n  var _geom = {\n\n    /**\n     * Transforms a graph node with x, y and size into an\n     * axis-aligned square.\n     *\n     * @param  {object} A graph node with at least a point (x, y) and a size.\n     * @return {object} A square: two points (x1, y1), (x2, y2) and height.\n     */\n    pointToSquare: function(n) {\n      return {\n        x1: n.x - n.size,\n        y1: n.y - n.size,\n        x2: n.x + n.size,\n        y2: n.y - n.size,\n        height: n.size * 2\n      };\n    },\n\n    /**\n     * Transforms a graph edge with x1, y1, x2, y2 and size into an\n     * axis-aligned square.\n     *\n     * @param  {object} A graph edge with at least two points\n     *                  (x1, y1), (x2, y2) and a size.\n     * @return {object} A square: two points (x1, y1), (x2, y2) and height.\n     */\n    lineToSquare: function(e) {\n      if (e.y1 < e.y2) {\n        // (e.x1, e.y1) on top\n        if (e.x1 < e.x2) {\n          // (e.x1, e.y1) on left\n          return {\n            x1: e.x1 - e.size,\n            y1: e.y1 - e.size,\n            x2: e.x2 + e.size,\n            y2: e.y1 - e.size,\n            height: e.y2 - e.y1 + e.size * 2\n          };\n        }\n        // (e.x1, e.y1) on right\n        return {\n          x1: e.x2 - e.size,\n          y1: e.y1 - e.size,\n          x2: e.x1 + e.size,\n          y2: e.y1 - e.size,\n          height: e.y2 - e.y1 + e.size * 2\n        };\n      }\n\n      // (e.x2, e.y2) on top\n      if (e.x1 < e.x2) {\n        // (e.x1, e.y1) on left\n        return {\n          x1: e.x1 - e.size,\n          y1: e.y2 - e.size,\n          x2: e.x2 + e.size,\n          y2: e.y2 - e.size,\n          height: e.y1 - e.y2 + e.size * 2\n        };\n      }\n      // (e.x2, e.y2) on right\n      return {\n        x1: e.x2 - e.size,\n        y1: e.y2 - e.size,\n        x2: e.x1 + e.size,\n        y2: e.y2 - e.size,\n        height: e.y1 - e.y2 + e.size * 2\n      };\n    },\n\n    /**\n     * Transforms a graph edge of type 'curve' with x1, y1, x2, y2,\n     * control point and size into an axis-aligned square.\n     *\n     * @param  {object} e  A graph edge with at least two points\n     *                     (x1, y1), (x2, y2) and a size.\n     * @param  {object} cp A control point (x,y).\n     * @return {object}    A square: two points (x1, y1), (x2, y2) and height.\n     */\n    quadraticCurveToSquare: function(e, cp) {\n      var pt = sigma.utils.getPointOnQuadraticCurve(\n        0.5,\n        e.x1,\n        e.y1,\n        e.x2,\n        e.y2,\n        cp.x,\n        cp.y\n      );\n\n      // Bounding box of the two points and the point at the middle of the\n      // curve:\n      var minX = Math.min(e.x1, e.x2, pt.x),\n          maxX = Math.max(e.x1, e.x2, pt.x),\n          minY = Math.min(e.y1, e.y2, pt.y),\n          maxY = Math.max(e.y1, e.y2, pt.y);\n\n      return {\n        x1: minX - e.size,\n        y1: minY - e.size,\n        x2: maxX + e.size,\n        y2: minY - e.size,\n        height: maxY - minY + e.size * 2\n      };\n    },\n\n    /**\n     * Transforms a graph self loop into an axis-aligned square.\n     *\n     * @param  {object} n A graph node with a point (x, y) and a size.\n     * @return {object}   A square: two points (x1, y1), (x2, y2) and height.\n     */\n    selfLoopToSquare: function(n) {\n      // Fitting to the curve is too costly, we compute a larger bounding box\n      // using the control points:\n      var cp = sigma.utils.getSelfLoopControlPoints(n.x, n.y, n.size);\n\n      // Bounding box of the point and the two control points:\n      var minX = Math.min(n.x, cp.x1, cp.x2),\n          maxX = Math.max(n.x, cp.x1, cp.x2),\n          minY = Math.min(n.y, cp.y1, cp.y2),\n          maxY = Math.max(n.y, cp.y1, cp.y2);\n\n      return {\n        x1: minX - n.size,\n        y1: minY - n.size,\n        x2: maxX + n.size,\n        y2: minY - n.size,\n        height: maxY - minY + n.size * 2\n      };\n    },\n\n    /**\n     * Checks whether a rectangle is axis-aligned.\n     *\n     * @param  {object}  A rectangle defined by two points\n     *                   (x1, y1) and (x2, y2).\n     * @return {boolean} True if the rectangle is axis-aligned.\n     */\n    isAxisAligned: function(r) {\n      return r.x1 === r.x2 || r.y1 === r.y2;\n    },\n\n    /**\n     * Compute top points of an axis-aligned rectangle. This is useful in\n     * cases when the rectangle has been rotated (left, right or bottom up) and\n     * later operations need to know the top points.\n     *\n     * @param  {object} An axis-aligned rectangle defined by two points\n     *                  (x1, y1), (x2, y2) and height.\n     * @return {object} A rectangle: two points (x1, y1), (x2, y2) and height.\n     */\n    axisAlignedTopPoints: function(r) {\n\n      // Basic\n      if (r.y1 === r.y2 && r.x1 < r.x2)\n        return r;\n\n      // Rotated to right\n      if (r.x1 === r.x2 && r.y2 > r.y1)\n        return {\n          x1: r.x1 - r.height, y1: r.y1,\n          x2: r.x1, y2: r.y1,\n          height: r.height\n        };\n\n      // Rotated to left\n      if (r.x1 === r.x2 && r.y2 < r.y1)\n        return {\n          x1: r.x1, y1: r.y2,\n          x2: r.x2 + r.height, y2: r.y2,\n          height: r.height\n        };\n\n      // Bottom's up\n      return {\n        x1: r.x2, y1: r.y1 - r.height,\n        x2: r.x1, y2: r.y1 - r.height,\n        height: r.height\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower left corner from its top points.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerLeftCoor: function(r) {\n      var width = (\n        Math.sqrt(\n          Math.pow(r.x2 - r.x1, 2) +\n          Math.pow(r.y2 - r.y1, 2)\n        )\n      );\n\n      return {\n        x: r.x1 - (r.y2 - r.y1) * r.height / width,\n        y: r.y1 + (r.x2 - r.x1) * r.height / width\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower right corner from its top points\n     * and its lower left corner.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @param  {object} A corner's coordinates (x, y).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerRightCoor: function(r, llc) {\n      return {\n        x: llc.x - r.x1 + r.x2,\n        y: llc.y - r.y1 + r.y2\n      };\n    },\n\n    /**\n     * Get the coordinates of all the corners of a rectangle from its top point.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {array}  An array of the four corners' coordinates (x, y).\n     */\n    rectangleCorners: function(r) {\n      var llc = this.lowerLeftCoor(r),\n          lrc = this.lowerRightCoor(r, llc);\n\n      return [\n        {x: r.x1, y: r.y1},\n        {x: r.x2, y: r.y2},\n        {x: llc.x, y: llc.y},\n        {x: lrc.x, y: lrc.y}\n      ];\n    },\n\n    /**\n     * Split a square defined by its boundaries into four.\n     *\n     * @param  {object} Boundaries of the square (x, y, width, height).\n     * @return {array}  An array containing the four new squares, themselves\n     *                  defined by an array of their four corners (x, y).\n     */\n    splitSquare: function(b) {\n      return [\n        [\n          {x: b.x, y: b.y},\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x + b.width, y: b.y},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x, y: b.y + b.height},\n          {x: b.x + b.width / 2, y: b.y + b.height}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height},\n          {x: b.x + b.width, y: b.y + b.height}\n        ]\n      ];\n    },\n\n    /**\n     * Compute the four axis between corners of rectangle A and corners of\n     * rectangle B. This is needed later to check an eventual collision.\n     *\n     * @param  {array} An array of rectangle A's four corners (x, y).\n     * @param  {array} An array of rectangle B's four corners (x, y).\n     * @return {array} An array of four axis defined by their coordinates (x,y).\n     */\n    axis: function(c1, c2) {\n      return [\n        {x: c1[1].x - c1[0].x, y: c1[1].y - c1[0].y},\n        {x: c1[1].x - c1[3].x, y: c1[1].y - c1[3].y},\n        {x: c2[0].x - c2[2].x, y: c2[0].y - c2[2].y},\n        {x: c2[0].x - c2[1].x, y: c2[0].y - c2[1].y}\n      ];\n    },\n\n    /**\n     * Project a rectangle's corner on an axis.\n     *\n     * @param  {object} Coordinates of a corner (x, y).\n     * @param  {object} Coordinates of an axis (x, y).\n     * @return {object} The projection defined by coordinates (x, y).\n     */\n    projection: function(c, a) {\n      var l = (\n        (c.x * a.x + c.y * a.y) /\n        (Math.pow(a.x, 2) + Math.pow(a.y, 2))\n      );\n\n      return {\n        x: l * a.x,\n        y: l * a.y\n      };\n    },\n\n    /**\n     * Check whether two rectangles collide on one particular axis.\n     *\n     * @param  {object}   An axis' coordinates (x, y).\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide on the axis.\n     */\n    axisCollision: function(a, c1, c2) {\n      var sc1 = [],\n          sc2 = [];\n\n      for (var ci = 0; ci < 4; ci++) {\n        var p1 = this.projection(c1[ci], a),\n            p2 = this.projection(c2[ci], a);\n\n        sc1.push(p1.x * a.x + p1.y * a.y);\n        sc2.push(p2.x * a.x + p2.y * a.y);\n      }\n\n      var maxc1 = Math.max.apply(Math, sc1),\n          maxc2 = Math.max.apply(Math, sc2),\n          minc1 = Math.min.apply(Math, sc1),\n          minc2 = Math.min.apply(Math, sc2);\n\n      return (minc2 <= maxc1 && maxc2 >= minc1);\n    },\n\n    /**\n     * Check whether two rectangles collide on each one of their four axis. If\n     * all axis collide, then the two rectangles do collide on the plane.\n     *\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide.\n     */\n    collision: function(c1, c2) {\n      var axis = this.axis(c1, c2),\n          col = true;\n\n      for (var i = 0; i < 4; i++)\n        col = col && this.axisCollision(axis[i], c1, c2);\n\n      return col;\n    }\n  };\n\n\n  /**\n   * Quad Functions\n   * ------------\n   *\n   * The Quadtree functions themselves.\n   * For each of those functions, we consider that in a splitted quad, the\n   * index of each node is the following:\n   * 0: top left\n   * 1: top right\n   * 2: bottom left\n   * 3: bottom right\n   *\n   * Moreover, the hereafter quad's philosophy is to consider that if an element\n   * collides with more than one nodes, this element belongs to each of the\n   * nodes it collides with where other would let it lie on a higher node.\n   */\n\n  /**\n   * Get the index of the node containing the point in the quad\n   *\n   * @param  {object}  point      A point defined by coordinates (x, y).\n   * @param  {object}  quadBounds Boundaries of the quad (x, y, width, heigth).\n   * @return {integer}            The index of the node containing the point.\n   */\n  function _quadIndex(point, quadBounds) {\n    var xmp = quadBounds.x + quadBounds.width / 2,\n        ymp = quadBounds.y + quadBounds.height / 2,\n        top = (point.y < ymp),\n        left = (point.x < xmp);\n\n    if (top) {\n      if (left)\n        return 0;\n      else\n        return 1;\n    }\n    else {\n      if (left)\n        return 2;\n      else\n        return 3;\n    }\n  }\n\n  /**\n   * Get a list of indexes of nodes containing an axis-aligned rectangle\n   *\n   * @param  {object}  rectangle   A rectangle defined by two points (x1, y1),\n   *                               (x2, y2) and height.\n   * @param  {array}   quadCorners An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadIndexes(rectangle, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if ((rectangle.x2 >= quadCorners[i][0].x) &&\n          (rectangle.x1 <= quadCorners[i][1].x) &&\n          (rectangle.y1 + rectangle.height >= quadCorners[i][0].y) &&\n          (rectangle.y1 <= quadCorners[i][2].y))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Get a list of indexes of nodes containing a non-axis-aligned rectangle\n   *\n   * @param  {array}  corners      An array containing each corner of the\n   *                               rectangle defined by its coordinates (x, y).\n   * @param  {array}  quadCorners  An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadCollision(corners, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if (_geom.collision(corners, quadCorners[i]))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Subdivide a quad by creating a node at a precise index. The function does\n   * not generate all four nodes not to potentially create unused nodes.\n   *\n   * @param  {integer}  index The index of the node to create.\n   * @param  {object}   quad  The quad object to subdivide.\n   * @return {object}         A new quad representing the node created.\n   */\n  function _quadSubdivide(index, quad) {\n    var next = quad.level + 1,\n        subw = Math.round(quad.bounds.width / 2),\n        subh = Math.round(quad.bounds.height / 2),\n        qx = Math.round(quad.bounds.x),\n        qy = Math.round(quad.bounds.y),\n        x,\n        y;\n\n    switch (index) {\n      case 0:\n        x = qx;\n        y = qy;\n        break;\n      case 1:\n        x = qx + subw;\n        y = qy;\n        break;\n      case 2:\n        x = qx;\n        y = qy + subh;\n        break;\n      case 3:\n        x = qx + subw;\n        y = qy + subh;\n        break;\n    }\n\n    return _quadTree(\n      {x: x, y: y, width: subw, height: subh},\n      next,\n      quad.maxElements,\n      quad.maxLevel\n    );\n  }\n\n  /**\n   * Recursively insert an element into the quadtree. Only points\n   * with size, i.e. axis-aligned squares, may be inserted with this\n   * method.\n   *\n   * @param  {object}  el         The element to insert in the quadtree.\n   * @param  {object}  sizedPoint A sized point defined by two top points\n   *                              (x1, y1), (x2, y2) and height.\n   * @param  {object}  quad       The quad in which to insert the element.\n   * @return {undefined}          The function does not return anything.\n   */\n  function _quadInsert(el, sizedPoint, quad) {\n    if (quad.level < quad.maxLevel) {\n\n      // Searching appropriate quads\n      var indexes = _quadIndexes(sizedPoint, quad.corners);\n\n      // Iterating\n      for (var i = 0, l = indexes.length; i < l; i++) {\n\n        // Subdividing if necessary\n        if (quad.nodes[indexes[i]] === undefined)\n          quad.nodes[indexes[i]] = _quadSubdivide(indexes[i], quad);\n\n        // Recursion\n        _quadInsert(el, sizedPoint, quad.nodes[indexes[i]]);\n      }\n    }\n    else {\n\n      // Pushing the element in a leaf node\n      quad.elements.push(el);\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements held by the node containing the\n   * searched point.\n   *\n   * @param  {object}  point The searched point (x, y).\n   * @param  {object}  quad  The searched quad.\n   * @return {array}         An array of elements contained in the relevant\n   *                         node.\n   */\n  function _quadRetrievePoint(point, quad) {\n    if (quad.level < quad.maxLevel) {\n      var index = _quadIndex(point, quad.bounds);\n\n      // If node does not exist we return an empty list\n      if (quad.nodes[index] !== undefined) {\n        return _quadRetrievePoint(point, quad.nodes[index]);\n      }\n      else {\n        return [];\n      }\n    }\n    else {\n      return quad.elements;\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements contained within an rectangular area\n   * that may or may not be axis-aligned.\n   *\n   * @param  {object|array} rectData       The searched area defined either by\n   *                                       an array of four corners (x, y) in\n   *                                       the case of a non-axis-aligned\n   *                                       rectangle or an object with two top\n   *                                       points (x1, y1), (x2, y2) and height.\n   * @param  {object}       quad           The searched quad.\n   * @param  {function}     collisionFunc  The collision function used to search\n   *                                       for node indexes.\n   * @param  {array?}       els            The retrieved elements.\n   * @return {array}                       An array of elements contained in the\n   *                                       area.\n   */\n  function _quadRetrieveArea(rectData, quad, collisionFunc, els) {\n    els = els || {};\n\n    if (quad.level < quad.maxLevel) {\n      var indexes = collisionFunc(rectData, quad.corners);\n\n      for (var i = 0, l = indexes.length; i < l; i++)\n        if (quad.nodes[indexes[i]] !== undefined)\n          _quadRetrieveArea(\n            rectData,\n            quad.nodes[indexes[i]],\n            collisionFunc,\n            els\n          );\n    } else\n      for (var j = 0, m = quad.elements.length; j < m; j++)\n        if (els[quad.elements[j].id] === undefined)\n          els[quad.elements[j].id] = quad.elements[j];\n\n    return els;\n  }\n\n  /**\n   * Creates the quadtree object itself.\n   *\n   * @param  {object}   bounds       The boundaries of the quad defined by an\n   *                                 origin (x, y), width and heigth.\n   * @param  {integer}  level        The level of the quad in the tree.\n   * @param  {integer}  maxElements  The max number of element in a leaf node.\n   * @param  {integer}  maxLevel     The max recursion level of the tree.\n   * @return {object}                The quadtree object.\n   */\n  function _quadTree(bounds, level, maxElements, maxLevel) {\n    return {\n      level: level || 0,\n      bounds: bounds,\n      corners: _geom.splitSquare(bounds),\n      maxElements: maxElements || 40,\n      maxLevel: maxLevel || 8,\n      elements: [],\n      nodes: []\n    };\n  }\n\n\n  /**\n   * Sigma Quad Constructor\n   * ----------------------\n   *\n   * The edgequad API as exposed to sigma.\n   */\n\n  /**\n   * The edgequad core that will become the sigma interface with the quadtree.\n   *\n   * property {object} _tree     Property holding the quadtree object.\n   * property {object} _geom     Exposition of the _geom namespace for testing.\n   * property {object} _cache    Cache for the area method.\n   * property {boolean} _enabled Can index and retreive elements.\n   */\n  var edgequad = function() {\n    this._geom = _geom;\n    this._tree = null;\n    this._cache = {\n      query: false,\n      result: false\n    };\n    this._enabled = true;\n  };\n\n  /**\n   * Index a graph by inserting its edges into the quadtree.\n   *\n   * @param  {object} graph   A graph instance.\n   * @param  {object} params  An object of parameters with at least the quad\n   *                          bounds.\n   * @return {object}         The quadtree object.\n   *\n   * Parameters:\n   * ----------\n   * bounds:      {object}   boundaries of the quad defined by its origin (x, y)\n   *                         width and heigth.\n   * prefix:      {string?}  a prefix for edge geometric attributes.\n   * maxElements: {integer?} the max number of elements in a leaf node.\n   * maxLevel:    {integer?} the max recursion level of the tree.\n   */\n  edgequad.prototype.index = function(graph, params) {\n    if (!this._enabled)\n      return this._tree;\n\n    // Enforcing presence of boundaries\n    if (!params.bounds)\n      throw 'sigma.classes.edgequad.index: bounds information not given.';\n\n    // Prefix\n    var prefix = params.prefix || '',\n        cp,\n        source,\n        target,\n        n,\n        e;\n\n    // Building the tree\n    this._tree = _quadTree(\n      params.bounds,\n      0,\n      params.maxElements,\n      params.maxLevel\n    );\n\n    var edges = graph.edges();\n\n    // Inserting graph edges into the tree\n    for (var i = 0, l = edges.length; i < l; i++) {\n      source = graph.nodes(edges[i].source);\n      target = graph.nodes(edges[i].target);\n      e = {\n        x1: source[prefix + 'x'],\n        y1: source[prefix + 'y'],\n        x2: target[prefix + 'x'],\n        y2: target[prefix + 'y'],\n        size: edges[i][prefix + 'size'] || 0\n      };\n\n      // Inserting edge\n      if (edges[i].type === 'curve' || edges[i].type === 'curvedArrow') {\n        if (source.id === target.id) {\n          n = {\n            x: source[prefix + 'x'],\n            y: source[prefix + 'y'],\n            size: source[prefix + 'size'] || 0\n          };\n          _quadInsert(\n            edges[i],\n            _geom.selfLoopToSquare(n),\n            this._tree);\n        }\n        else {\n          cp = sigma.utils.getQuadraticControlPoint(e.x1, e.y1, e.x2, e.y2);\n          _quadInsert(\n            edges[i],\n            _geom.quadraticCurveToSquare(e, cp),\n            this._tree);\n        }\n      }\n      else {\n        _quadInsert(\n          edges[i],\n          _geom.lineToSquare(e),\n          this._tree);\n      }\n    }\n\n    // Reset cache:\n    this._cache = {\n      query: false,\n      result: false\n    };\n\n    // remove?\n    return this._tree;\n  };\n\n  /**\n   * Retrieve every graph edges held by the quadtree node containing the\n   * searched point.\n   *\n   * @param  {number} x of the point.\n   * @param  {number} y of the point.\n   * @return {array}  An array of edges retrieved.\n   */\n  edgequad.prototype.point = function(x, y) {\n    if (!this._enabled)\n      return [];\n\n    return this._tree ?\n      _quadRetrievePoint({x: x, y: y}, this._tree) || [] :\n      [];\n  };\n\n  /**\n   * Retrieve every graph edges within a rectangular area. The methods keep the\n   * last area queried in cache for optimization reason and will act differently\n   * for the same reason if the area is axis-aligned or not.\n   *\n   * @param  {object} A rectangle defined by two top points (x1, y1), (x2, y2)\n   *                  and height.\n   * @return {array}  An array of edges retrieved.\n   */\n  edgequad.prototype.area = function(rect) {\n    if (!this._enabled)\n      return [];\n\n    var serialized = JSON.stringify(rect),\n        collisionFunc,\n        rectData;\n\n    // Returning cache?\n    if (this._cache.query === serialized)\n      return this._cache.result;\n\n    // Axis aligned ?\n    if (_geom.isAxisAligned(rect)) {\n      collisionFunc = _quadIndexes;\n      rectData = _geom.axisAlignedTopPoints(rect);\n    }\n    else {\n      collisionFunc = _quadCollision;\n      rectData = _geom.rectangleCorners(rect);\n    }\n\n    // Retrieving edges\n    var edges = this._tree ?\n      _quadRetrieveArea(\n        rectData,\n        this._tree,\n        collisionFunc\n      ) :\n      [];\n\n    // Object to array\n    var edgesArray = [];\n    for (var i in edges)\n      edgesArray.push(edges[i]);\n\n    // Caching\n    this._cache.query = serialized;\n    this._cache.result = edgesArray;\n\n    return edgesArray;\n  };\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.edgequad = edgequad;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = edgequad;\n    exports.edgequad = edgequad;\n  } else\n    this.edgequad = edgequad;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 40:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  var _methods = Object.create(null),\n      _indexes = Object.create(null),\n      _initBindings = Object.create(null),\n      _methodBindings = Object.create(null),\n      _methodBeforeBindings = Object.create(null),\n      _defaultSettings = {\n        immutable: true,\n        clone: true\n      },\n      _defaultSettingsFunction = function(key) {\n        return _defaultSettings[key];\n      };\n\n  /**\n   * The graph constructor. It initializes the data and the indexes, and binds\n   * the custom indexes and methods to its own scope.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the settings\n   * object:\n   *\n   *   {boolean} clone     Indicates if the data have to be cloned in methods\n   *                       to add nodes or edges.\n   *   {boolean} immutable Indicates if nodes \"id\" values and edges \"id\",\n   *                       \"source\" and \"target\" values must be set as\n   *                       immutable.\n   *\n   * @param  {?configurable} settings Eventually a settings function.\n   * @return {graph}                  The new graph instance.\n   */\n  var graph = function(settings) {\n    var k,\n        fn,\n        data;\n\n    /**\n     * DATA:\n     * *****\n     * Every data that is callable from graph methods are stored in this \"data\"\n     * object. This object will be served as context for all these methods,\n     * and it is possible to add other type of data in it.\n     */\n    data = {\n      /**\n       * SETTINGS FUNCTION:\n       * ******************\n       */\n      settings: settings || _defaultSettingsFunction,\n\n      /**\n       * MAIN DATA:\n       * **********\n       */\n      nodesArray: [],\n      edgesArray: [],\n\n      /**\n       * GLOBAL INDEXES:\n       * ***************\n       * These indexes just index data by ids.\n       */\n      nodesIndex: Object.create(null),\n      edgesIndex: Object.create(null),\n\n      /**\n       * LOCAL INDEXES:\n       * **************\n       * These indexes refer from node to nodes. Each key is an id, and each\n       * value is the array of the ids of related nodes.\n       */\n      inNeighborsIndex: Object.create(null),\n      outNeighborsIndex: Object.create(null),\n      allNeighborsIndex: Object.create(null),\n\n      inNeighborsCount: Object.create(null),\n      outNeighborsCount: Object.create(null),\n      allNeighborsCount: Object.create(null)\n    };\n\n    // Execute bindings:\n    for (k in _initBindings)\n      _initBindings[k].call(data);\n\n    // Add methods to both the scope and the data objects:\n    for (k in _methods) {\n      fn = __bindGraphMethod(k, data, _methods[k]);\n      this[k] = fn;\n      data[k] = fn;\n    }\n  };\n\n\n\n\n  /**\n   * A custom tool to bind methods such that function that are bound to it will\n   * be executed anytime the method is called.\n   *\n   * @param  {string}   methodName The name of the method to bind.\n   * @param  {object}   scope      The scope where the method must be executed.\n   * @param  {function} fn         The method itself.\n   * @return {function}            The new method.\n   */\n  function __bindGraphMethod(methodName, scope, fn) {\n    var result = function() {\n      var k,\n          res;\n\n      // Execute \"before\" bound functions:\n      for (k in _methodBeforeBindings[methodName])\n        _methodBeforeBindings[methodName][k].apply(scope, arguments);\n\n      // Apply the method:\n      res = fn.apply(scope, arguments);\n\n      // Execute bound functions:\n      for (k in _methodBindings[methodName])\n        _methodBindings[methodName][k].apply(scope, arguments);\n\n      // Return res:\n      return res;\n    };\n\n    return result;\n  }\n\n  /**\n   * This custom tool function removes every pair key/value from an hash. The\n   * goal is to avoid creating a new object while some other references are\n   * still hanging in some scopes...\n   *\n   * @param  {object} obj The object to empty.\n   * @return {object}     The empty object.\n   */\n  function __emptyObject(obj) {\n    var k;\n\n    for (k in obj)\n      if (!('hasOwnProperty' in obj) || obj.hasOwnProperty(k))\n        delete obj[k];\n\n    return obj;\n  }\n\n\n\n\n  /**\n   * This global method adds a method that will be bound to the futurly created\n   * graph instances.\n   *\n   * Since these methods will be bound to their scope when the instances are\n   * created, it does not use the prototype. Because of that, methods have to\n   * be added before instances are created to make them available.\n   *\n   * Here is an example:\n   *\n   *  > graph.addMethod('getNodesCount', function() {\n   *  >   return this.nodesArray.length;\n   *  > });\n   *  >\n   *  > var myGraph = new graph();\n   *  > console.log(myGraph.getNodesCount()); // outputs 0\n   *\n   * @param  {string}   methodName The name of the method.\n   * @param  {function} fn         The method itself.\n   * @return {object}              The global graph constructor.\n   */\n  graph.addMethod = function(methodName, fn) {\n    if (\n      typeof methodName !== 'string' ||\n      typeof fn !== 'function' ||\n      arguments.length !== 2\n    )\n      throw 'addMethod: Wrong arguments.';\n\n    if (_methods[methodName] || graph[methodName])\n      throw 'The method \"' + methodName + '\" already exists.';\n\n    _methods[methodName] = fn;\n    _methodBindings[methodName] = Object.create(null);\n    _methodBeforeBindings[methodName] = Object.create(null);\n\n    return this;\n  };\n\n  /**\n   * This global method returns true if the method has already been added, and\n   * false else.\n   *\n   * Here are some examples:\n   *\n   *  > graph.hasMethod('addNode'); // returns true\n   *  > graph.hasMethod('hasMethod'); // returns true\n   *  > graph.hasMethod('unexistingMethod'); // returns false\n   *\n   * @param  {string}  methodName The name of the method.\n   * @return {boolean}            The result.\n   */\n  graph.hasMethod = function(methodName) {\n    return !!(_methods[methodName] || graph[methodName]);\n  };\n\n  /**\n   * This global methods attaches a function to a method. Anytime the specified\n   * method is called, the attached function is called right after, with the\n   * same arguments and in the same scope. The attached function is called\n   * right before if the last argument is true, unless the method is the graph\n   * constructor.\n   *\n   * To attach a function to the graph constructor, use 'constructor' as the\n   * method name (first argument).\n   *\n   * The main idea is to have a clean way to keep custom indexes up to date,\n   * for instance:\n   *\n   *  > var timesAddNodeCalled = 0;\n   *  > graph.attach('addNode', 'timesAddNodeCalledInc', function() {\n   *  >   timesAddNodeCalled++;\n   *  > });\n   *  >\n   *  > var myGraph = new graph();\n   *  > console.log(timesAddNodeCalled); // outputs 0\n   *  >\n   *  > myGraph.addNode({ id: '1' }).addNode({ id: '2' });\n   *  > console.log(timesAddNodeCalled); // outputs 2\n   *\n   * The idea for calling a function before is to provide pre-processors, for\n   * instance:\n   *\n   *  > var colorPalette = { Person: '#C3CBE1', Place: '#9BDEBD' };\n   *  > graph.attach('addNode', 'applyNodeColorPalette', function(n) {\n   *  >   n.color = colorPalette[n.category];\n   *  > }, true);\n   *  >\n   *  > var myGraph = new graph();\n   *  > myGraph.addNode({ id: 'n0', category: 'Person' });\n   *  > console.log(myGraph.nodes('n0').color); // outputs '#C3CBE1'\n   *\n   * @param  {string}   methodName The name of the related method or\n   *                               \"constructor\".\n   * @param  {string}   key        The key to identify the function to attach.\n   * @param  {function} fn         The function to bind.\n   * @param  {boolean}  before     If true the function is called right before.\n   * @return {object}              The global graph constructor.\n   */\n  graph.attach = function(methodName, key, fn, before) {\n    if (\n      typeof methodName !== 'string' ||\n      typeof key !== 'string' ||\n      typeof fn !== 'function' ||\n      arguments.length < 3 ||\n      arguments.length > 4\n    )\n      throw 'attach: Wrong arguments.';\n\n    var bindings;\n\n    if (methodName === 'constructor')\n      bindings = _initBindings;\n    else {\n      if (before) {\n        if (!_methodBeforeBindings[methodName])\n        throw 'The method \"' + methodName + '\" does not exist.';\n\n        bindings = _methodBeforeBindings[methodName];\n      }\n      else {\n        if (!_methodBindings[methodName])\n          throw 'The method \"' + methodName + '\" does not exist.';\n\n        bindings = _methodBindings[methodName];\n      }\n    }\n\n    if (bindings[key])\n      throw 'A function \"' + key + '\" is already attached ' +\n            'to the method \"' + methodName + '\".';\n\n    bindings[key] = fn;\n\n    return this;\n  };\n\n  /**\n   * Alias of attach(methodName, key, fn, true).\n   */\n  graph.attachBefore = function(methodName, key, fn) {\n    return this.attach(methodName, key, fn, true);\n  };\n\n  /**\n   * This methods is just an helper to deal with custom indexes. It takes as\n   * arguments the name of the index and an object containing all the different\n   * functions to bind to the methods.\n   *\n   * Here is a basic example, that creates an index to keep the number of nodes\n   * in the current graph. It also adds a method to provide a getter on that\n   * new index:\n   *\n   *  > sigma.classes.graph.addIndex('nodesCount', {\n   *  >   constructor: function() {\n   *  >     this.nodesCount = 0;\n   *  >   },\n   *  >   addNode: function() {\n   *  >     this.nodesCount++;\n   *  >   },\n   *  >   dropNode: function() {\n   *  >     this.nodesCount--;\n   *  >   }\n   *  > });\n   *  >\n   *  > sigma.classes.graph.addMethod('getNodesCount', function() {\n   *  >   return this.nodesCount;\n   *  > });\n   *  >\n   *  > var myGraph = new sigma.classes.graph();\n   *  > console.log(myGraph.getNodesCount()); // outputs 0\n   *  >\n   *  > myGraph.addNode({ id: '1' }).addNode({ id: '2' });\n   *  > console.log(myGraph.getNodesCount()); // outputs 2\n   *\n   * @param  {string} name     The name of the index.\n   * @param  {object} bindings The object containing the functions to bind.\n   * @return {object}          The global graph constructor.\n   */\n  graph.addIndex = function(name, bindings) {\n    if (\n      typeof name !== 'string' ||\n      Object(bindings) !== bindings ||\n      arguments.length !== 2\n    )\n      throw 'addIndex: Wrong arguments.';\n\n    if (_indexes[name])\n      throw 'The index \"' + name + '\" already exists.';\n\n    var k;\n\n    // Store the bindings:\n    _indexes[name] = bindings;\n\n    // Attach the bindings:\n    for (k in bindings)\n      if (typeof bindings[k] !== 'function')\n        throw 'The bindings must be functions.';\n      else\n        graph.attach(k, name, bindings[k]);\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method adds a node to the graph. The node must be an object, with a\n   * string under the key \"id\". Except for this, it is possible to add any\n   * other attribute, that will be preserved all along the manipulations.\n   *\n   * If the graph option \"clone\" has a truthy value, the node will be cloned\n   * when added to the graph. Also, if the graph option \"immutable\" has a\n   * truthy value, its id will be defined as immutable.\n   *\n   * @param  {object} node The node to add.\n   * @return {object}      The graph instance.\n   */\n  graph.addMethod('addNode', function(node) {\n    // Check that the node is an object and has an id:\n    if (Object(node) !== node || arguments.length !== 1)\n      throw 'addNode: Wrong arguments.';\n\n    if (typeof node.id !== 'string' && typeof node.id !== 'number')\n      throw 'The node must have a string or number id.';\n\n    if (this.nodesIndex[node.id])\n      throw 'The node \"' + node.id + '\" already exists.';\n\n    var k,\n        id = node.id,\n        validNode = Object.create(null);\n\n    // Check the \"clone\" option:\n    if (this.settings('clone')) {\n      for (k in node)\n        if (k !== 'id')\n          validNode[k] = node[k];\n    } else\n      validNode = node;\n\n    // Check the \"immutable\" option:\n    if (this.settings('immutable'))\n      Object.defineProperty(validNode, 'id', {\n        value: id,\n        enumerable: true\n      });\n    else\n      validNode.id = id;\n\n    // Add empty containers for edges indexes:\n    this.inNeighborsIndex[id] = Object.create(null);\n    this.outNeighborsIndex[id] = Object.create(null);\n    this.allNeighborsIndex[id] = Object.create(null);\n\n    this.inNeighborsCount[id] = 0;\n    this.outNeighborsCount[id] = 0;\n    this.allNeighborsCount[id] = 0;\n\n    // Add the node to indexes:\n    this.nodesArray.push(validNode);\n    this.nodesIndex[validNode.id] = validNode;\n\n    // Return the current instance:\n    return this;\n  });\n\n  /**\n   * This method adds an edge to the graph. The edge must be an object, with a\n   * string under the key \"id\", and strings under the keys \"source\" and\n   * \"target\" that design existing nodes. Except for this, it is possible to\n   * add any other attribute, that will be preserved all along the\n   * manipulations.\n   *\n   * If the graph option \"clone\" has a truthy value, the edge will be cloned\n   * when added to the graph. Also, if the graph option \"immutable\" has a\n   * truthy value, its id, source and target will be defined as immutable.\n   *\n   * @param  {object} edge The edge to add.\n   * @return {object}      The graph instance.\n   */\n  graph.addMethod('addEdge', function(edge) {\n    // Check that the edge is an object and has an id:\n    if (Object(edge) !== edge || arguments.length !== 1)\n      throw 'addEdge: Wrong arguments.';\n\n    if (typeof edge.id !== 'string' && typeof edge.id !== 'number')\n      throw 'The edge must have a string or number id.';\n\n    if ((typeof edge.source !== 'string' && typeof edge.source !== 'number') ||\n        !this.nodesIndex[edge.source])\n      throw 'The edge source must have an existing node id.';\n\n    if ((typeof edge.target !== 'string' && typeof edge.target !== 'number') ||\n        !this.nodesIndex[edge.target])\n      throw 'The edge target must have an existing node id.';\n\n    if (this.edgesIndex[edge.id])\n      throw 'The edge \"' + edge.id + '\" already exists.';\n\n    var k,\n        validEdge = Object.create(null);\n\n    // Check the \"clone\" option:\n    if (this.settings('clone')) {\n      for (k in edge)\n        if (k !== 'id' && k !== 'source' && k !== 'target')\n          validEdge[k] = edge[k];\n    } else\n      validEdge = edge;\n\n    // Check the \"immutable\" option:\n    if (this.settings('immutable')) {\n      Object.defineProperty(validEdge, 'id', {\n        value: edge.id,\n        enumerable: true\n      });\n\n      Object.defineProperty(validEdge, 'source', {\n        value: edge.source,\n        enumerable: true\n      });\n\n      Object.defineProperty(validEdge, 'target', {\n        value: edge.target,\n        enumerable: true\n      });\n    } else {\n      validEdge.id = edge.id;\n      validEdge.source = edge.source;\n      validEdge.target = edge.target;\n    }\n\n    // Add the edge to indexes:\n    this.edgesArray.push(validEdge);\n    this.edgesIndex[validEdge.id] = validEdge;\n\n    if (!this.inNeighborsIndex[validEdge.target][validEdge.source])\n      this.inNeighborsIndex[validEdge.target][validEdge.source] =\n        Object.create(null);\n    this.inNeighborsIndex[validEdge.target][validEdge.source][validEdge.id] =\n      validEdge;\n\n    if (!this.outNeighborsIndex[validEdge.source][validEdge.target])\n      this.outNeighborsIndex[validEdge.source][validEdge.target] =\n        Object.create(null);\n    this.outNeighborsIndex[validEdge.source][validEdge.target][validEdge.id] =\n      validEdge;\n\n    if (!this.allNeighborsIndex[validEdge.source][validEdge.target])\n      this.allNeighborsIndex[validEdge.source][validEdge.target] =\n        Object.create(null);\n    this.allNeighborsIndex[validEdge.source][validEdge.target][validEdge.id] =\n      validEdge;\n\n    if (validEdge.target !== validEdge.source) {\n      if (!this.allNeighborsIndex[validEdge.target][validEdge.source])\n        this.allNeighborsIndex[validEdge.target][validEdge.source] =\n          Object.create(null);\n      this.allNeighborsIndex[validEdge.target][validEdge.source][validEdge.id] =\n        validEdge;\n    }\n\n    // Keep counts up to date:\n    this.inNeighborsCount[validEdge.target]++;\n    this.outNeighborsCount[validEdge.source]++;\n    this.allNeighborsCount[validEdge.target]++;\n    this.allNeighborsCount[validEdge.source]++;\n\n    return this;\n  });\n\n  /**\n   * This method drops a node from the graph. It also removes each edge that is\n   * bound to it, through the dropEdge method. An error is thrown if the node\n   * does not exist.\n   *\n   * @param  {string} id The node id.\n   * @return {object}    The graph instance.\n   */\n  graph.addMethod('dropNode', function(id) {\n    // Check that the arguments are valid:\n    if ((typeof id !== 'string' && typeof id !== 'number') ||\n        arguments.length !== 1)\n      throw 'dropNode: Wrong arguments.';\n\n    if (!this.nodesIndex[id])\n      throw 'The node \"' + id + '\" does not exist.';\n\n    var i, k, l;\n\n    // Remove the node from indexes:\n    delete this.nodesIndex[id];\n    for (i = 0, l = this.nodesArray.length; i < l; i++)\n      if (this.nodesArray[i].id === id) {\n        this.nodesArray.splice(i, 1);\n        break;\n      }\n\n    // Remove related edges:\n    for (i = this.edgesArray.length - 1; i >= 0; i--)\n      if (this.edgesArray[i].source === id || this.edgesArray[i].target === id)\n        this.dropEdge(this.edgesArray[i].id);\n\n    // Remove related edge indexes:\n    delete this.inNeighborsIndex[id];\n    delete this.outNeighborsIndex[id];\n    delete this.allNeighborsIndex[id];\n\n    delete this.inNeighborsCount[id];\n    delete this.outNeighborsCount[id];\n    delete this.allNeighborsCount[id];\n\n    for (k in this.nodesIndex) {\n      delete this.inNeighborsIndex[k][id];\n      delete this.outNeighborsIndex[k][id];\n      delete this.allNeighborsIndex[k][id];\n    }\n\n    return this;\n  });\n\n  /**\n   * This method drops an edge from the graph. An error is thrown if the edge\n   * does not exist.\n   *\n   * @param  {string} id The edge id.\n   * @return {object}    The graph instance.\n   */\n  graph.addMethod('dropEdge', function(id) {\n    // Check that the arguments are valid:\n    if ((typeof id !== 'string' && typeof id !== 'number') ||\n        arguments.length !== 1)\n      throw 'dropEdge: Wrong arguments.';\n\n    if (!this.edgesIndex[id])\n      throw 'The edge \"' + id + '\" does not exist.';\n\n    var i, l, edge;\n\n    // Remove the edge from indexes:\n    edge = this.edgesIndex[id];\n    delete this.edgesIndex[id];\n    for (i = 0, l = this.edgesArray.length; i < l; i++)\n      if (this.edgesArray[i].id === id) {\n        this.edgesArray.splice(i, 1);\n        break;\n      }\n\n    delete this.inNeighborsIndex[edge.target][edge.source][edge.id];\n    if (!Object.keys(this.inNeighborsIndex[edge.target][edge.source]).length)\n      delete this.inNeighborsIndex[edge.target][edge.source];\n\n    delete this.outNeighborsIndex[edge.source][edge.target][edge.id];\n    if (!Object.keys(this.outNeighborsIndex[edge.source][edge.target]).length)\n      delete this.outNeighborsIndex[edge.source][edge.target];\n\n    delete this.allNeighborsIndex[edge.source][edge.target][edge.id];\n    if (!Object.keys(this.allNeighborsIndex[edge.source][edge.target]).length)\n      delete this.allNeighborsIndex[edge.source][edge.target];\n\n    if (edge.target !== edge.source) {\n      delete this.allNeighborsIndex[edge.target][edge.source][edge.id];\n      if (!Object.keys(this.allNeighborsIndex[edge.target][edge.source]).length)\n        delete this.allNeighborsIndex[edge.target][edge.source];\n    }\n\n    this.inNeighborsCount[edge.target]--;\n    this.outNeighborsCount[edge.source]--;\n    this.allNeighborsCount[edge.source]--;\n    this.allNeighborsCount[edge.target]--;\n\n    return this;\n  });\n\n  /**\n   * This method destroys the current instance. It basically empties each index\n   * and methods attached to the graph.\n   */\n  graph.addMethod('kill', function() {\n    // Delete arrays:\n    this.nodesArray.length = 0;\n    this.edgesArray.length = 0;\n    delete this.nodesArray;\n    delete this.edgesArray;\n\n    // Delete indexes:\n    delete this.nodesIndex;\n    delete this.edgesIndex;\n    delete this.inNeighborsIndex;\n    delete this.outNeighborsIndex;\n    delete this.allNeighborsIndex;\n    delete this.inNeighborsCount;\n    delete this.outNeighborsCount;\n    delete this.allNeighborsCount;\n  });\n\n  /**\n   * This method empties the nodes and edges arrays, as well as the different\n   * indexes.\n   *\n   * @return {object} The graph instance.\n   */\n  graph.addMethod('clear', function() {\n    this.nodesArray.length = 0;\n    this.edgesArray.length = 0;\n\n    // Due to GC issues, I prefer not to create new object. These objects are\n    // only available from the methods and attached functions, but still, it is\n    // better to prevent ghost references to unrelevant data...\n    __emptyObject(this.nodesIndex);\n    __emptyObject(this.edgesIndex);\n    __emptyObject(this.nodesIndex);\n    __emptyObject(this.inNeighborsIndex);\n    __emptyObject(this.outNeighborsIndex);\n    __emptyObject(this.allNeighborsIndex);\n    __emptyObject(this.inNeighborsCount);\n    __emptyObject(this.outNeighborsCount);\n    __emptyObject(this.allNeighborsCount);\n\n    return this;\n  });\n\n  /**\n   * This method reads an object and adds the nodes and edges, through the\n   * proper methods \"addNode\" and \"addEdge\".\n   *\n   * Here is an example:\n   *\n   *  > var myGraph = new graph();\n   *  > myGraph.read({\n   *  >   nodes: [\n   *  >     { id: 'n0' },\n   *  >     { id: 'n1' }\n   *  >   ],\n   *  >   edges: [\n   *  >     {\n   *  >       id: 'e0',\n   *  >       source: 'n0',\n   *  >       target: 'n1'\n   *  >     }\n   *  >   ]\n   *  > });\n   *  >\n   *  > console.log(\n   *  >   myGraph.nodes().length,\n   *  >   myGraph.edges().length\n   *  > ); // outputs 2 1\n   *\n   * @param  {object} g The graph object.\n   * @return {object}   The graph instance.\n   */\n  graph.addMethod('read', function(g) {\n    var i,\n        a,\n        l;\n\n    a = g.nodes || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.addNode(a[i]);\n\n    a = g.edges || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.addEdge(a[i]);\n\n    return this;\n  });\n\n  /**\n   * This methods returns one or several nodes, depending on how it is called.\n   *\n   * To get the array of nodes, call \"nodes\" without argument. To get a\n   * specific node, call it with the id of the node. The get multiple node,\n   * call it with an array of ids, and it will return the array of nodes, in\n   * the same order.\n   *\n   * @param  {?(string|array)} v Eventually one id, an array of ids.\n   * @return {object|array}      The related node or array of nodes.\n   */\n  graph.addMethod('nodes', function(v) {\n    // Clone the array of nodes and return it:\n    if (!arguments.length)\n      return this.nodesArray.slice(0);\n\n    // Return the related node:\n    if (arguments.length === 1 &&\n        (typeof v === 'string' || typeof v === 'number'))\n      return this.nodesIndex[v];\n\n    // Return an array of the related node:\n    if (\n      arguments.length === 1 &&\n      Object.prototype.toString.call(v) === '[object Array]'\n    ) {\n      var i,\n          l,\n          a = [];\n\n      for (i = 0, l = v.length; i < l; i++)\n        if (typeof v[i] === 'string' || typeof v[i] === 'number')\n          a.push(this.nodesIndex[v[i]]);\n        else\n          throw 'nodes: Wrong arguments.';\n\n      return a;\n    }\n\n    throw 'nodes: Wrong arguments.';\n  });\n\n  /**\n   * This methods returns the degree of one or several nodes, depending on how\n   * it is called. It is also possible to get incoming or outcoming degrees\n   * instead by specifying 'in' or 'out' as a second argument.\n   *\n   * @param  {string|array} v     One id, an array of ids.\n   * @param  {?string}      which Which degree is required. Values are 'in',\n   *                              'out', and by default the normal degree.\n   * @return {number|array}       The related degree or array of degrees.\n   */\n  graph.addMethod('degree', function(v, which) {\n    // Check which degree is required:\n    which = {\n      'in': this.inNeighborsCount,\n      'out': this.outNeighborsCount\n    }[which || ''] || this.allNeighborsCount;\n\n    // Return the related node:\n    if (typeof v === 'string' || typeof v === 'number')\n      return which[v];\n\n    // Return an array of the related node:\n    if (Object.prototype.toString.call(v) === '[object Array]') {\n      var i,\n          l,\n          a = [];\n\n      for (i = 0, l = v.length; i < l; i++)\n        if (typeof v[i] === 'string' || typeof v[i] === 'number')\n          a.push(which[v[i]]);\n        else\n          throw 'degree: Wrong arguments.';\n\n      return a;\n    }\n\n    throw 'degree: Wrong arguments.';\n  });\n\n  /**\n   * This methods returns one or several edges, depending on how it is called.\n   *\n   * To get the array of edges, call \"edges\" without argument. To get a\n   * specific edge, call it with the id of the edge. The get multiple edge,\n   * call it with an array of ids, and it will return the array of edges, in\n   * the same order.\n   *\n   * @param  {?(string|array)} v Eventually one id, an array of ids.\n   * @return {object|array}      The related edge or array of edges.\n   */\n  graph.addMethod('edges', function(v) {\n    // Clone the array of edges and return it:\n    if (!arguments.length)\n      return this.edgesArray.slice(0);\n\n    // Return the related edge:\n    if (arguments.length === 1 &&\n        (typeof v === 'string' || typeof v === 'number'))\n      return this.edgesIndex[v];\n\n    // Return an array of the related edge:\n    if (\n      arguments.length === 1 &&\n      Object.prototype.toString.call(v) === '[object Array]'\n    ) {\n      var i,\n          l,\n          a = [];\n\n      for (i = 0, l = v.length; i < l; i++)\n        if (typeof v[i] === 'string' || typeof v[i] === 'number')\n          a.push(this.edgesIndex[v[i]]);\n        else\n          throw 'edges: Wrong arguments.';\n\n      return a;\n    }\n\n    throw 'edges: Wrong arguments.';\n  });\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof sigma !== 'undefined') {\n    sigma.classes = sigma.classes || Object.create(null);\n    sigma.classes.graph = graph;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = graph;\n    exports.graph = graph;\n  } else\n    this.graph = graph;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 41:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * Sigma Quadtree Module\n   * =====================\n   *\n   * Author: Guillaume Plique (Yomguithereal)\n   * Version: 0.2\n   */\n\n\n\n  /**\n   * Quad Geometric Operations\n   * -------------------------\n   *\n   * A useful batch of geometric operations used by the quadtree.\n   */\n\n  var _geom = {\n\n    /**\n     * Transforms a graph node with x, y and size into an\n     * axis-aligned square.\n     *\n     * @param  {object} A graph node with at least a point (x, y) and a size.\n     * @return {object} A square: two points (x1, y1), (x2, y2) and height.\n     */\n    pointToSquare: function(n) {\n      return {\n        x1: n.x - n.size,\n        y1: n.y - n.size,\n        x2: n.x + n.size,\n        y2: n.y - n.size,\n        height: n.size * 2\n      };\n    },\n\n    /**\n     * Checks whether a rectangle is axis-aligned.\n     *\n     * @param  {object}  A rectangle defined by two points\n     *                   (x1, y1) and (x2, y2).\n     * @return {boolean} True if the rectangle is axis-aligned.\n     */\n    isAxisAligned: function(r) {\n      return r.x1 === r.x2 || r.y1 === r.y2;\n    },\n\n    /**\n     * Compute top points of an axis-aligned rectangle. This is useful in\n     * cases when the rectangle has been rotated (left, right or bottom up) and\n     * later operations need to know the top points.\n     *\n     * @param  {object} An axis-aligned rectangle defined by two points\n     *                  (x1, y1), (x2, y2) and height.\n     * @return {object} A rectangle: two points (x1, y1), (x2, y2) and height.\n     */\n    axisAlignedTopPoints: function(r) {\n\n      // Basic\n      if (r.y1 === r.y2 && r.x1 < r.x2)\n        return r;\n\n      // Rotated to right\n      if (r.x1 === r.x2 && r.y2 > r.y1)\n        return {\n          x1: r.x1 - r.height, y1: r.y1,\n          x2: r.x1, y2: r.y1,\n          height: r.height\n        };\n\n      // Rotated to left\n      if (r.x1 === r.x2 && r.y2 < r.y1)\n        return {\n          x1: r.x1, y1: r.y2,\n          x2: r.x2 + r.height, y2: r.y2,\n          height: r.height\n        };\n\n      // Bottom's up\n      return {\n        x1: r.x2, y1: r.y1 - r.height,\n        x2: r.x1, y2: r.y1 - r.height,\n        height: r.height\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower left corner from its top points.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerLeftCoor: function(r) {\n      var width = (\n        Math.sqrt(\n          Math.pow(r.x2 - r.x1, 2) +\n          Math.pow(r.y2 - r.y1, 2)\n        )\n      );\n\n      return {\n        x: r.x1 - (r.y2 - r.y1) * r.height / width,\n        y: r.y1 + (r.x2 - r.x1) * r.height / width\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower right corner from its top points\n     * and its lower left corner.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @param  {object} A corner's coordinates (x, y).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerRightCoor: function(r, llc) {\n      return {\n        x: llc.x - r.x1 + r.x2,\n        y: llc.y - r.y1 + r.y2\n      };\n    },\n\n    /**\n     * Get the coordinates of all the corners of a rectangle from its top point.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {array}  An array of the four corners' coordinates (x, y).\n     */\n    rectangleCorners: function(r) {\n      var llc = this.lowerLeftCoor(r),\n          lrc = this.lowerRightCoor(r, llc);\n\n      return [\n        {x: r.x1, y: r.y1},\n        {x: r.x2, y: r.y2},\n        {x: llc.x, y: llc.y},\n        {x: lrc.x, y: lrc.y}\n      ];\n    },\n\n    /**\n     * Split a square defined by its boundaries into four.\n     *\n     * @param  {object} Boundaries of the square (x, y, width, height).\n     * @return {array}  An array containing the four new squares, themselves\n     *                  defined by an array of their four corners (x, y).\n     */\n    splitSquare: function(b) {\n      return [\n        [\n          {x: b.x, y: b.y},\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x + b.width, y: b.y},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x, y: b.y + b.height},\n          {x: b.x + b.width / 2, y: b.y + b.height}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height},\n          {x: b.x + b.width, y: b.y + b.height}\n        ]\n      ];\n    },\n\n    /**\n     * Compute the four axis between corners of rectangle A and corners of\n     * rectangle B. This is needed later to check an eventual collision.\n     *\n     * @param  {array} An array of rectangle A's four corners (x, y).\n     * @param  {array} An array of rectangle B's four corners (x, y).\n     * @return {array} An array of four axis defined by their coordinates (x,y).\n     */\n    axis: function(c1, c2) {\n      return [\n        {x: c1[1].x - c1[0].x, y: c1[1].y - c1[0].y},\n        {x: c1[1].x - c1[3].x, y: c1[1].y - c1[3].y},\n        {x: c2[0].x - c2[2].x, y: c2[0].y - c2[2].y},\n        {x: c2[0].x - c2[1].x, y: c2[0].y - c2[1].y}\n      ];\n    },\n\n    /**\n     * Project a rectangle's corner on an axis.\n     *\n     * @param  {object} Coordinates of a corner (x, y).\n     * @param  {object} Coordinates of an axis (x, y).\n     * @return {object} The projection defined by coordinates (x, y).\n     */\n    projection: function(c, a) {\n      var l = (\n        (c.x * a.x + c.y * a.y) /\n        (Math.pow(a.x, 2) + Math.pow(a.y, 2))\n      );\n\n      return {\n        x: l * a.x,\n        y: l * a.y\n      };\n    },\n\n    /**\n     * Check whether two rectangles collide on one particular axis.\n     *\n     * @param  {object}   An axis' coordinates (x, y).\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide on the axis.\n     */\n    axisCollision: function(a, c1, c2) {\n      var sc1 = [],\n          sc2 = [];\n\n      for (var ci = 0; ci < 4; ci++) {\n        var p1 = this.projection(c1[ci], a),\n            p2 = this.projection(c2[ci], a);\n\n        sc1.push(p1.x * a.x + p1.y * a.y);\n        sc2.push(p2.x * a.x + p2.y * a.y);\n      }\n\n      var maxc1 = Math.max.apply(Math, sc1),\n          maxc2 = Math.max.apply(Math, sc2),\n          minc1 = Math.min.apply(Math, sc1),\n          minc2 = Math.min.apply(Math, sc2);\n\n      return (minc2 <= maxc1 && maxc2 >= minc1);\n    },\n\n    /**\n     * Check whether two rectangles collide on each one of their four axis. If\n     * all axis collide, then the two rectangles do collide on the plane.\n     *\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide.\n     */\n    collision: function(c1, c2) {\n      var axis = this.axis(c1, c2),\n          col = true;\n\n      for (var i = 0; i < 4; i++)\n        col = col && this.axisCollision(axis[i], c1, c2);\n\n      return col;\n    }\n  };\n\n\n  /**\n   * Quad Functions\n   * ------------\n   *\n   * The Quadtree functions themselves.\n   * For each of those functions, we consider that in a splitted quad, the\n   * index of each node is the following:\n   * 0: top left\n   * 1: top right\n   * 2: bottom left\n   * 3: bottom right\n   *\n   * Moreover, the hereafter quad's philosophy is to consider that if an element\n   * collides with more than one nodes, this element belongs to each of the\n   * nodes it collides with where other would let it lie on a higher node.\n   */\n\n  /**\n   * Get the index of the node containing the point in the quad\n   *\n   * @param  {object}  point      A point defined by coordinates (x, y).\n   * @param  {object}  quadBounds Boundaries of the quad (x, y, width, heigth).\n   * @return {integer}            The index of the node containing the point.\n   */\n  function _quadIndex(point, quadBounds) {\n    var xmp = quadBounds.x + quadBounds.width / 2,\n        ymp = quadBounds.y + quadBounds.height / 2,\n        top = (point.y < ymp),\n        left = (point.x < xmp);\n\n    if (top) {\n      if (left)\n        return 0;\n      else\n        return 1;\n    }\n    else {\n      if (left)\n        return 2;\n      else\n        return 3;\n    }\n  }\n\n  /**\n   * Get a list of indexes of nodes containing an axis-aligned rectangle\n   *\n   * @param  {object}  rectangle   A rectangle defined by two points (x1, y1),\n   *                               (x2, y2) and height.\n   * @param  {array}   quadCorners An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadIndexes(rectangle, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if ((rectangle.x2 >= quadCorners[i][0].x) &&\n          (rectangle.x1 <= quadCorners[i][1].x) &&\n          (rectangle.y1 + rectangle.height >= quadCorners[i][0].y) &&\n          (rectangle.y1 <= quadCorners[i][2].y))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Get a list of indexes of nodes containing a non-axis-aligned rectangle\n   *\n   * @param  {array}  corners      An array containing each corner of the\n   *                               rectangle defined by its coordinates (x, y).\n   * @param  {array}  quadCorners  An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadCollision(corners, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if (_geom.collision(corners, quadCorners[i]))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Subdivide a quad by creating a node at a precise index. The function does\n   * not generate all four nodes not to potentially create unused nodes.\n   *\n   * @param  {integer}  index The index of the node to create.\n   * @param  {object}   quad  The quad object to subdivide.\n   * @return {object}         A new quad representing the node created.\n   */\n  function _quadSubdivide(index, quad) {\n    var next = quad.level + 1,\n        subw = Math.round(quad.bounds.width / 2),\n        subh = Math.round(quad.bounds.height / 2),\n        qx = Math.round(quad.bounds.x),\n        qy = Math.round(quad.bounds.y),\n        x,\n        y;\n\n    switch (index) {\n      case 0:\n        x = qx;\n        y = qy;\n        break;\n      case 1:\n        x = qx + subw;\n        y = qy;\n        break;\n      case 2:\n        x = qx;\n        y = qy + subh;\n        break;\n      case 3:\n        x = qx + subw;\n        y = qy + subh;\n        break;\n    }\n\n    return _quadTree(\n      {x: x, y: y, width: subw, height: subh},\n      next,\n      quad.maxElements,\n      quad.maxLevel\n    );\n  }\n\n  /**\n   * Recursively insert an element into the quadtree. Only points\n   * with size, i.e. axis-aligned squares, may be inserted with this\n   * method.\n   *\n   * @param  {object}  el         The element to insert in the quadtree.\n   * @param  {object}  sizedPoint A sized point defined by two top points\n   *                              (x1, y1), (x2, y2) and height.\n   * @param  {object}  quad       The quad in which to insert the element.\n   * @return {undefined}          The function does not return anything.\n   */\n  function _quadInsert(el, sizedPoint, quad) {\n    if (quad.level < quad.maxLevel) {\n\n      // Searching appropriate quads\n      var indexes = _quadIndexes(sizedPoint, quad.corners);\n\n      // Iterating\n      for (var i = 0, l = indexes.length; i < l; i++) {\n\n        // Subdividing if necessary\n        if (quad.nodes[indexes[i]] === undefined)\n          quad.nodes[indexes[i]] = _quadSubdivide(indexes[i], quad);\n\n        // Recursion\n        _quadInsert(el, sizedPoint, quad.nodes[indexes[i]]);\n      }\n    }\n    else {\n\n      // Pushing the element in a leaf node\n      quad.elements.push(el);\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements held by the node containing the\n   * searched point.\n   *\n   * @param  {object}  point The searched point (x, y).\n   * @param  {object}  quad  The searched quad.\n   * @return {array}         An array of elements contained in the relevant\n   *                         node.\n   */\n  function _quadRetrievePoint(point, quad) {\n    if (quad.level < quad.maxLevel) {\n      var index = _quadIndex(point, quad.bounds);\n\n      // If node does not exist we return an empty list\n      if (quad.nodes[index] !== undefined) {\n        return _quadRetrievePoint(point, quad.nodes[index]);\n      }\n      else {\n        return [];\n      }\n    }\n    else {\n      return quad.elements;\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements contained within an rectangular area\n   * that may or may not be axis-aligned.\n   *\n   * @param  {object|array} rectData       The searched area defined either by\n   *                                       an array of four corners (x, y) in\n   *                                       the case of a non-axis-aligned\n   *                                       rectangle or an object with two top\n   *                                       points (x1, y1), (x2, y2) and height.\n   * @param  {object}       quad           The searched quad.\n   * @param  {function}     collisionFunc  The collision function used to search\n   *                                       for node indexes.\n   * @param  {array?}       els            The retrieved elements.\n   * @return {array}                       An array of elements contained in the\n   *                                       area.\n   */\n  function _quadRetrieveArea(rectData, quad, collisionFunc, els) {\n    els = els || {};\n\n    if (quad.level < quad.maxLevel) {\n      var indexes = collisionFunc(rectData, quad.corners);\n\n      for (var i = 0, l = indexes.length; i < l; i++)\n        if (quad.nodes[indexes[i]] !== undefined)\n          _quadRetrieveArea(\n            rectData,\n            quad.nodes[indexes[i]],\n            collisionFunc,\n            els\n          );\n    } else\n      for (var j = 0, m = quad.elements.length; j < m; j++)\n        if (els[quad.elements[j].id] === undefined)\n          els[quad.elements[j].id] = quad.elements[j];\n\n    return els;\n  }\n\n  /**\n   * Creates the quadtree object itself.\n   *\n   * @param  {object}   bounds       The boundaries of the quad defined by an\n   *                                 origin (x, y), width and heigth.\n   * @param  {integer}  level        The level of the quad in the tree.\n   * @param  {integer}  maxElements  The max number of element in a leaf node.\n   * @param  {integer}  maxLevel     The max recursion level of the tree.\n   * @return {object}                The quadtree object.\n   */\n  function _quadTree(bounds, level, maxElements, maxLevel) {\n    return {\n      level: level || 0,\n      bounds: bounds,\n      corners: _geom.splitSquare(bounds),\n      maxElements: maxElements || 20,\n      maxLevel: maxLevel || 4,\n      elements: [],\n      nodes: []\n    };\n  }\n\n\n  /**\n   * Sigma Quad Constructor\n   * ----------------------\n   *\n   * The quad API as exposed to sigma.\n   */\n\n  /**\n   * The quad core that will become the sigma interface with the quadtree.\n   *\n   * property {object} _tree  Property holding the quadtree object.\n   * property {object} _geom  Exposition of the _geom namespace for testing.\n   * property {object} _cache Cache for the area method.\n   */\n  var quad = function() {\n    this._geom = _geom;\n    this._tree = null;\n    this._cache = {\n      query: false,\n      result: false\n    };\n  };\n\n  /**\n   * Index a graph by inserting its nodes into the quadtree.\n   *\n   * @param  {array}  nodes   An array of nodes to index.\n   * @param  {object} params  An object of parameters with at least the quad\n   *                          bounds.\n   * @return {object}         The quadtree object.\n   *\n   * Parameters:\n   * ----------\n   * bounds:      {object}   boundaries of the quad defined by its origin (x, y)\n   *                         width and heigth.\n   * prefix:      {string?}  a prefix for node geometric attributes.\n   * maxElements: {integer?} the max number of elements in a leaf node.\n   * maxLevel:    {integer?} the max recursion level of the tree.\n   */\n  quad.prototype.index = function(nodes, params) {\n\n    // Enforcing presence of boundaries\n    if (!params.bounds)\n      throw 'sigma.classes.quad.index: bounds information not given.';\n\n    // Prefix\n    var prefix = params.prefix || '';\n\n    // Building the tree\n    this._tree = _quadTree(\n      params.bounds,\n      0,\n      params.maxElements,\n      params.maxLevel\n    );\n\n    // Inserting graph nodes into the tree\n    for (var i = 0, l = nodes.length; i < l; i++) {\n\n      // Inserting node\n      _quadInsert(\n        nodes[i],\n        _geom.pointToSquare({\n          x: nodes[i][prefix + 'x'],\n          y: nodes[i][prefix + 'y'],\n          size: nodes[i][prefix + 'size']\n        }),\n        this._tree\n      );\n    }\n\n    // Reset cache:\n    this._cache = {\n      query: false,\n      result: false\n    };\n\n    // remove?\n    return this._tree;\n  };\n\n  /**\n   * Retrieve every graph nodes held by the quadtree node containing the\n   * searched point.\n   *\n   * @param  {number} x of the point.\n   * @param  {number} y of the point.\n   * @return {array}  An array of nodes retrieved.\n   */\n  quad.prototype.point = function(x, y) {\n    return this._tree ?\n      _quadRetrievePoint({x: x, y: y}, this._tree) || [] :\n      [];\n  };\n\n  /**\n   * Retrieve every graph nodes within a rectangular area. The methods keep the\n   * last area queried in cache for optimization reason and will act differently\n   * for the same reason if the area is axis-aligned or not.\n   *\n   * @param  {object} A rectangle defined by two top points (x1, y1), (x2, y2)\n   *                  and height.\n   * @return {array}  An array of nodes retrieved.\n   */\n  quad.prototype.area = function(rect) {\n    var serialized = JSON.stringify(rect),\n        collisionFunc,\n        rectData;\n\n    // Returning cache?\n    if (this._cache.query === serialized)\n      return this._cache.result;\n\n    // Axis aligned ?\n    if (_geom.isAxisAligned(rect)) {\n      collisionFunc = _quadIndexes;\n      rectData = _geom.axisAlignedTopPoints(rect);\n    }\n    else {\n      collisionFunc = _quadCollision;\n      rectData = _geom.rectangleCorners(rect);\n    }\n\n    // Retrieving nodes\n    var nodes = this._tree ?\n      _quadRetrieveArea(\n        rectData,\n        this._tree,\n        collisionFunc\n      ) :\n      [];\n\n    // Object to array\n    var nodesArray = [];\n    for (var i in nodes)\n      nodesArray.push(nodes[i]);\n\n    // Caching\n    this._cache.query = serialized;\n    this._cache.result = nodesArray;\n\n    return nodesArray;\n  };\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.quad = quad;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = quad;\n    exports.quad = quad;\n  } else\n    this.quad = quad;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 42:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/**\n * conrad.js is a tiny JavaScript jobs scheduler,\n *\n * Version: 0.1.0\n * Sources: http://github.com/jacomyal/conrad.js\n * Doc:     http://github.com/jacomyal/conrad.js#readme\n *\n * License:\n * --------\n * Copyright © 2013 Alexis Jacomy, Sciences-Po médialab\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * The Software is provided \"as is\", without warranty of any kind, express or\n * implied, including but not limited to the warranties of merchantability,\n * fitness for a particular purpose and noninfringement. In no event shall the\n * authors or copyright holders be liable for any claim, damages or other\n * liability, whether in an action of contract, tort or otherwise, arising\n * from, out of or in connection with the software or the use or other dealings\n * in the Software.\n */\n(function(global) {\n  'use strict';\n\n  // Check that conrad.js has not been loaded yet:\n  if (global.conrad)\n    throw new Error('conrad already exists');\n\n\n  /**\n   * PRIVATE VARIABLES:\n   * ******************\n   */\n\n  /**\n   * A flag indicating whether conrad is running or not.\n   *\n   * @type {Number}\n   */\n  var _lastFrameTime;\n\n  /**\n   * A flag indicating whether conrad is running or not.\n   *\n   * @type {Boolean}\n   */\n  var _isRunning = false;\n\n  /**\n   * The hash of registered jobs. Each job must at least have a unique ID\n   * under the key \"id\" and a function under the key \"job\". This hash\n   * contains each running job and each waiting job.\n   *\n   * @type {Object}\n   */\n  var _jobs = {};\n\n  /**\n   * The hash of currently running jobs.\n   *\n   * @type {Object}\n   */\n  var _runningJobs = {};\n\n  /**\n   * The array of currently running jobs, sorted by priority.\n   *\n   * @type {Array}\n   */\n  var _sortedByPriorityJobs = [];\n\n  /**\n   * The array of currently waiting jobs.\n   *\n   * @type {Object}\n   */\n  var _waitingJobs = {};\n\n  /**\n   * The array of finished jobs. They are stored in an array, since two jobs\n   * with the same \"id\" can happen at two different times.\n   *\n   * @type {Array}\n   */\n  var _doneJobs = [];\n\n  /**\n   * A dirty flag to keep conrad from starting: Indeed, when addJob() is called\n   * with several jobs, conrad must be started only at the end. This flag keeps\n   * me from duplicating the code that effectively adds a job.\n   *\n   * @type {Boolean}\n   */\n  var _noStart = false;\n\n  /**\n   * An hash containing some global settings about how conrad.js should\n   * behave.\n   *\n   * @type {Object}\n   */\n  var _parameters = {\n    frameDuration: 20,\n    history: true\n  };\n\n  /**\n   * This object contains every handlers bound to conrad events. It does not\n   * requirea any DOM implementation, since the events are all JavaScript.\n   *\n   * @type {Object}\n   */\n  var _handlers = Object.create(null);\n\n\n  /**\n   * PRIVATE FUNCTIONS:\n   * ******************\n   */\n\n  /**\n   * Will execute the handler everytime that the indicated event (or the\n   * indicated events) will be triggered.\n   *\n   * @param  {string|array|object} events  The name of the event (or the events\n   *                                       separated by spaces).\n   * @param  {function(Object)}    handler The handler to bind.\n   * @return {Object}                      Returns conrad.\n   */\n  function _bind(events, handler) {\n    var i,\n        i_end,\n        event,\n        eArray;\n\n    if (!arguments.length)\n      return;\n    else if (\n      arguments.length === 1 &&\n      Object(arguments[0]) === arguments[0]\n    )\n      for (events in arguments[0])\n        _bind(events, arguments[0][events]);\n    else if (arguments.length > 1) {\n      eArray =\n        Array.isArray(events) ?\n          events :\n          events.split(/ /);\n\n      for (i = 0, i_end = eArray.length; i !== i_end; i += 1) {\n        event = eArray[i];\n\n        if (!_handlers[event])\n          _handlers[event] = [];\n\n        // Using an object instead of directly the handler will make possible\n        // later to add flags\n        _handlers[event].push({\n          handler: handler\n        });\n      }\n    }\n  }\n\n  /**\n   * Removes the handler from a specified event (or specified events).\n   *\n   * @param  {?string}           events  The name of the event (or the events\n   *                                     separated by spaces). If undefined,\n   *                                     then all handlers are removed.\n   * @param  {?function(Object)} handler The handler to unbind. If undefined,\n   *                                     each handler bound to the event or the\n   *                                     events will be removed.\n   * @return {Object}            Returns conrad.\n   */\n  function _unbind(events, handler) {\n    var i,\n        i_end,\n        j,\n        j_end,\n        a,\n        event,\n        eArray = Array.isArray(events) ?\n                   events :\n                   events.split(/ /);\n\n    if (!arguments.length)\n      _handlers = Object.create(null);\n    else if (handler) {\n      for (i = 0, i_end = eArray.length; i !== i_end; i += 1) {\n        event = eArray[i];\n        if (_handlers[event]) {\n          a = [];\n          for (j = 0, j_end = _handlers[event].length; j !== j_end; j += 1)\n            if (_handlers[event][j].handler !== handler)\n              a.push(_handlers[event][j]);\n\n          _handlers[event] = a;\n        }\n\n        if (_handlers[event] && _handlers[event].length === 0)\n          delete _handlers[event];\n      }\n    } else\n      for (i = 0, i_end = eArray.length; i !== i_end; i += 1)\n        delete _handlers[eArray[i]];\n  }\n\n  /**\n   * Executes each handler bound to the event.\n   *\n   * @param  {string}  events The name of the event (or the events separated\n   *                          by spaces).\n   * @param  {?Object} data   The content of the event (optional).\n   * @return {Object}         Returns conrad.\n   */\n  function _dispatch(events, data) {\n    var i,\n        j,\n        i_end,\n        j_end,\n        event,\n        eventName,\n        eArray = Array.isArray(events) ?\n                   events :\n                   events.split(/ /);\n\n    data = data === undefined ? {} : data;\n\n    for (i = 0, i_end = eArray.length; i !== i_end; i += 1) {\n      eventName = eArray[i];\n\n      if (_handlers[eventName]) {\n        event = {\n          type: eventName,\n          data: data || {}\n        };\n\n        for (j = 0, j_end = _handlers[eventName].length; j !== j_end; j += 1)\n          try {\n            _handlers[eventName][j].handler(event);\n          } catch (e) {}\n      }\n    }\n  }\n\n  /**\n   * Executes the most prioritary job once, and deals with filling the stats\n   * (done, time, averageTime, currentTime, etc...).\n   *\n   * @return {?Object} Returns the job object if it has to be killed, null else.\n   */\n  function _executeFirstJob() {\n    var i,\n        l,\n        test,\n        kill,\n        pushed = false,\n        time = __dateNow(),\n        job = _sortedByPriorityJobs.shift();\n\n    // Execute the job and look at the result:\n    test = job.job();\n\n    // Deal with stats:\n    time = __dateNow() - time;\n    job.done++;\n    job.time += time;\n    job.currentTime += time;\n    job.weightTime = job.currentTime / (job.weight || 1);\n    job.averageTime = job.time / job.done;\n\n    // Check if the job has to be killed:\n    kill = job.count ? (job.count <= job.done) : !test;\n\n    // Reset priorities:\n    if (!kill) {\n      for (i = 0, l = _sortedByPriorityJobs.length; i < l; i++)\n        if (_sortedByPriorityJobs[i].weightTime > job.weightTime) {\n          _sortedByPriorityJobs.splice(i, 0, job);\n          pushed = true;\n          break;\n        }\n\n      if (!pushed)\n        _sortedByPriorityJobs.push(job);\n    }\n\n    return kill ? job : null;\n  }\n\n  /**\n   * Activates a job, by adding it to the _runningJobs object and the\n   * _sortedByPriorityJobs array. It also initializes its currentTime value.\n   *\n   * @param  {Object} job The job to activate.\n   */\n  function _activateJob(job) {\n    var l = _sortedByPriorityJobs.length;\n\n    // Add the job to the running jobs:\n    _runningJobs[job.id] = job;\n    job.status = 'running';\n\n    // Add the job to the priorities:\n    if (l) {\n      job.weightTime = _sortedByPriorityJobs[l - 1].weightTime;\n      job.currentTime = job.weightTime * (job.weight || 1);\n    }\n\n    // Initialize the job and dispatch:\n    job.startTime = __dateNow();\n    _dispatch('jobStarted', __clone(job));\n\n    _sortedByPriorityJobs.push(job);\n  }\n\n  /**\n   * The main loop of conrad.js:\n   *  . It executes job such that they all occupate the same processing time.\n   *  . It stops jobs that do not need to be executed anymore.\n   *  . It triggers callbacks when it is relevant.\n   *  . It starts waiting jobs when they need to be started.\n   *  . It injects frames to keep a constant frapes per second ratio.\n   *  . It stops itself when there are no more jobs to execute.\n   */\n  function _loop() {\n    var k,\n        o,\n        l,\n        job,\n        time,\n        deadJob;\n\n    // Deal with the newly added jobs (the _jobs object):\n    for (k in _jobs) {\n      job = _jobs[k];\n\n      if (job.after)\n        _waitingJobs[k] = job;\n      else\n        _activateJob(job);\n\n      delete _jobs[k];\n    }\n\n    // Set the _isRunning flag to false if there are no running job:\n    _isRunning = !!_sortedByPriorityJobs.length;\n\n    // Deal with the running jobs (the _runningJobs object):\n    while (\n      _sortedByPriorityJobs.length &&\n      __dateNow() - _lastFrameTime < _parameters.frameDuration\n    ) {\n      deadJob = _executeFirstJob();\n\n      // Deal with the case where the job has ended:\n      if (deadJob) {\n        _killJob(deadJob.id);\n\n        // Check for waiting jobs:\n        for (k in _waitingJobs)\n          if (_waitingJobs[k].after === deadJob.id) {\n            _activateJob(_waitingJobs[k]);\n            delete _waitingJobs[k];\n          }\n      }\n    }\n\n    // Check if conrad still has jobs to deal with, and kill it if not:\n    if (_isRunning) {\n      // Update the _lastFrameTime:\n      _lastFrameTime = __dateNow();\n\n      _dispatch('enterFrame');\n      setTimeout(_loop, 0);\n    } else\n      _dispatch('stop');\n  }\n\n  /**\n   * Adds one or more jobs, and starts the loop if no job was running before. A\n   * job is at least a unique string \"id\" and a function, and there are some\n   * parameters that you can specify for each job to modify the way conrad will\n   * execute it. If a job is added with the \"id\" of another job that is waiting\n   * or still running, an error will be thrown.\n   *\n   * When a job is added, it is referenced in the _jobs object, by its id.\n   * Then, if it has to be executed right now, it will be also referenced in\n   * the _runningJobs object. If it has to wait, then it will be added into the\n   * _waitingJobs object, until it can start.\n   *\n   * Keep reading this documentation to see how to call this method.\n   *\n   * @return {Object} Returns conrad.\n   *\n   * Adding one job:\n   * ***************\n   * Basically, a job is defined by its string id and a function (the job). It\n   * is also possible to add some parameters:\n   *\n   *  > conrad.addJob('myJobId', myJobFunction);\n   *  > conrad.addJob('myJobId', {\n   *  >   job: myJobFunction,\n   *  >   someParameter: someValue\n   *  > });\n   *  > conrad.addJob({\n   *  >   id: 'myJobId',\n   *  >   job: myJobFunction,\n   *  >   someParameter: someValue\n   *  > });\n   *\n   * Adding several jobs:\n   * ********************\n   * When adding several jobs at the same time, it is possible to specify\n   * parameters for each one individually or for all:\n   *\n   *  > conrad.addJob([\n   *  >   {\n   *  >     id: 'myJobId1',\n   *  >     job: myJobFunction1,\n   *  >     someParameter1: someValue1\n   *  >   },\n   *  >   {\n   *  >     id: 'myJobId2',\n   *  >     job: myJobFunction2,\n   *  >     someParameter2: someValue2\n   *  >   }\n   *  > ], {\n   *  >   someCommonParameter: someCommonValue\n   *  > });\n   *  > conrad.addJob({\n   *  >   myJobId1: {,\n   *  >     job: myJobFunction1,\n   *  >     someParameter1: someValue1\n   *  >   },\n   *  >   myJobId2: {,\n   *  >     job: myJobFunction2,\n   *  >     someParameter2: someValue2\n   *  >   }\n   *  > }, {\n   *  >   someCommonParameter: someCommonValue\n   *  > });\n   *  > conrad.addJob({\n   *  >   myJobId1: myJobFunction1,\n   *  >   myJobId2: myJobFunction2\n   *  > }, {\n   *  >   someCommonParameter: someCommonValue\n   *  > });\n   *\n   *  Recognized parameters:\n   *  **********************\n   *  Here is the exhaustive list of every accepted parameters:\n   *\n   *    {?Function} end      A callback to execute when the job is ended. It is\n   *                         not executed if the job is killed instead of ended\n   *                         \"naturally\".\n   *    {?Integer}  count    The number of time the job has to be executed.\n   *    {?Number}   weight   If specified, the job will be executed as it was\n   *                         added \"weight\" times.\n   *    {?String}   after    The id of another job (eventually not added yet).\n   *                         If specified, this job will start only when the\n   *                         specified \"after\" job is ended.\n   */\n  function _addJob(v1, v2) {\n    var i,\n        l,\n        o;\n\n    // Array of jobs:\n    if (Array.isArray(v1)) {\n      // Keep conrad to start until the last job is added:\n      _noStart = true;\n\n      for (i = 0, l = v1.length; i < l; i++)\n        _addJob(v1[i].id, __extend(v1[i], v2));\n\n      _noStart = false;\n      if (!_isRunning) {\n        // Update the _lastFrameTime:\n        _lastFrameTime = __dateNow();\n\n        _dispatch('start');\n        _loop();\n      }\n    } else if (typeof v1 === 'object') {\n      // One job (object):\n      if (typeof v1.id === 'string')\n        _addJob(v1.id, v1);\n\n      // Hash of jobs:\n      else {\n        // Keep conrad to start until the last job is added:\n        _noStart = true;\n\n        for (i in v1)\n          if (typeof v1[i] === 'function')\n            _addJob(i, __extend({\n              job: v1[i]\n            }, v2));\n          else\n            _addJob(i, __extend(v1[i], v2));\n\n        _noStart = false;\n        if (!_isRunning) {\n          // Update the _lastFrameTime:\n          _lastFrameTime = __dateNow();\n\n          _dispatch('start');\n          _loop();\n        }\n      }\n\n    // One job (string, *):\n    } else if (typeof v1 === 'string') {\n      if (_hasJob(v1))\n        throw new Error(\n          '[conrad.addJob] Job with id \"' + v1 + '\" already exists.'\n        );\n\n      // One job (string, function):\n      if (typeof v2 === 'function') {\n        o = {\n          id: v1,\n          done: 0,\n          time: 0,\n          status: 'waiting',\n          currentTime: 0,\n          averageTime: 0,\n          weightTime: 0,\n          job: v2\n        };\n\n      // One job (string, object):\n      } else if (typeof v2 === 'object') {\n        o = __extend(\n          {\n            id: v1,\n            done: 0,\n            time: 0,\n            status: 'waiting',\n            currentTime: 0,\n            averageTime: 0,\n            weightTime: 0\n          },\n          v2\n        );\n\n      // If none of those cases, throw an error:\n      } else\n        throw new Error('[conrad.addJob] Wrong arguments.');\n\n      // Effectively add the job:\n      _jobs[v1] = o;\n      _dispatch('jobAdded', __clone(o));\n\n      // Check if the loop has to be started:\n      if (!_isRunning && !_noStart) {\n        // Update the _lastFrameTime:\n        _lastFrameTime = __dateNow();\n\n        _dispatch('start');\n        _loop();\n      }\n\n    // If none of those cases, throw an error:\n    } else\n      throw new Error('[conrad.addJob] Wrong arguments.');\n\n    return this;\n  }\n\n  /**\n   * Kills one or more jobs, indicated by their ids. It is only possible to\n   * kill running jobs or waiting jobs. If you try to kill a job that does not\n   * exist or that is already killed, a warning will be thrown.\n   *\n   * @param  {Array|String} v1 A string job id or an array of job ids.\n   * @return {Object}       Returns conrad.\n   */\n  function _killJob(v1) {\n    var i,\n        l,\n        k,\n        a,\n        job,\n        found = false;\n\n    // Array of job ids:\n    if (Array.isArray(v1))\n      for (i = 0, l = v1.length; i < l; i++)\n        _killJob(v1[i]);\n\n    // One job's id:\n    else if (typeof v1 === 'string') {\n      a = [_runningJobs, _waitingJobs, _jobs];\n\n      // Remove the job from the hashes:\n      for (i = 0, l = a.length; i < l; i++)\n        if (v1 in a[i]) {\n          job = a[i][v1];\n\n          if (_parameters.history) {\n            job.status = 'done';\n            _doneJobs.push(job);\n          }\n\n          _dispatch('jobEnded', __clone(job));\n          delete a[i][v1];\n\n          if (typeof job.end === 'function')\n            job.end();\n\n          found = true;\n        }\n\n      // Remove the priorities array:\n      a = _sortedByPriorityJobs;\n      for (i = 0, l = a.length; i < l; i++)\n        if (a[i].id === v1) {\n          a.splice(i, 1);\n          break;\n        }\n\n      if (!found)\n        throw new Error('[conrad.killJob] Job \"' + v1 + '\" not found.');\n\n    // If none of those cases, throw an error:\n    } else\n      throw new Error('[conrad.killJob] Wrong arguments.');\n\n    return this;\n  }\n\n  /**\n   * Kills every running, waiting, and just added jobs.\n   *\n   * @return {Object} Returns conrad.\n   */\n  function _killAll() {\n    var k,\n        jobs = __extend(_jobs, _runningJobs, _waitingJobs);\n\n    // Take every jobs and push them into the _doneJobs object:\n    if (_parameters.history)\n      for (k in jobs) {\n        jobs[k].status = 'done';\n        _doneJobs.push(jobs[k]);\n\n        if (typeof jobs[k].end === 'function')\n          jobs[k].end();\n      }\n\n    // Reinitialize the different jobs lists:\n    _jobs = {};\n    _waitingJobs = {};\n    _runningJobs = {};\n    _sortedByPriorityJobs = [];\n\n    // In case some jobs are added right after the kill:\n    _isRunning = false;\n\n    return this;\n  }\n\n  /**\n   * Returns true if a job with the specified id is currently running or\n   * waiting, and false else.\n   *\n   * @param  {String}  id The id of the job.\n   * @return {?Object} Returns the job object if it exists.\n   */\n  function _hasJob(id) {\n    var job = _jobs[id] || _runningJobs[id] || _waitingJobs[id];\n    return job ? __extend(job) : null;\n  }\n\n  /**\n   * This method will set the setting specified by \"v1\" to the value specified\n   * by \"v2\" if both are given, and else return the current value of the\n   * settings \"v1\".\n   *\n   * @param  {String}   v1 The name of the property.\n   * @param  {?*}       v2 Eventually, a value to set to the specified\n   *                       property.\n   * @return {Object|*} Returns the specified settings value if \"v2\" is not\n   *                    given, and conrad else.\n   */\n  function _settings(v1, v2) {\n    var o;\n\n    if (typeof a1 === 'string' && arguments.length === 1)\n      return _parameters[a1];\n    else {\n      o = (typeof a1 === 'object' && arguments.length === 1) ?\n        a1 || {} :\n        {};\n      if (typeof a1 === 'string')\n        o[a1] = a2;\n\n      for (var k in o)\n        if (o[k] !== undefined)\n          _parameters[k] = o[k];\n        else\n          delete _parameters[k];\n\n      return this;\n    }\n  }\n\n  /**\n   * Returns true if conrad is currently running, and false else.\n   *\n   * @return {Boolean} Returns _isRunning.\n   */\n  function _getIsRunning() {\n    return _isRunning;\n  }\n\n  /**\n   * Unreference every job that is stored in the _doneJobs object. It will\n   * not be possible anymore to get stats about these jobs, but it will release\n   * the memory.\n   *\n   * @return {Object} Returns conrad.\n   */\n  function _clearHistory() {\n    _doneJobs = [];\n    return this;\n  }\n\n  /**\n   * Returns a snapshot of every data about jobs that wait to be started, are\n   * currently running or are done.\n   *\n   * It is possible to get only running, waiting or done jobs by giving\n   * \"running\", \"waiting\" or \"done\" as fist argument.\n   *\n   * It is also possible to get every job with a specified id by giving it as\n   * first argument. Also, using a RegExp instead of an id will return every\n   * jobs whose ids match the RegExp. And these two last use cases work as well\n   * by giving before \"running\", \"waiting\" or \"done\".\n   *\n   * @return {Array} The array of the matching jobs.\n   *\n   * Some call examples:\n   * *******************\n   *  > conrad.getStats('running')\n   *  > conrad.getStats('waiting')\n   *  > conrad.getStats('done')\n   *  > conrad.getStats('myJob')\n   *  > conrad.getStats(/test/)\n   *  > conrad.getStats('running', 'myRunningJob')\n   *  > conrad.getStats('running', /test/)\n   */\n  function _getStats(v1, v2) {\n    var a,\n        k,\n        i,\n        l,\n        stats,\n        pattern,\n        isPatternString;\n\n    if (!arguments.length) {\n      stats = [];\n\n      for (k in _jobs)\n        stats.push(_jobs[k]);\n\n      for (k in _waitingJobs)\n        stats.push(_waitingJobs[k]);\n\n      for (k in _runningJobs)\n        stats.push(_runningJobs[k]);\n\n      stats = stats.concat(_doneJobs);\n    }\n\n    if (typeof v1 === 'string')\n      switch (v1) {\n        case 'waiting':\n          stats = __objectValues(_waitingJobs);\n          break;\n        case 'running':\n          stats = __objectValues(_runningJobs);\n          break;\n        case 'done':\n          stats = _doneJobs;\n          break;\n        default:\n          pattern = v1;\n      }\n\n    if (v1 instanceof RegExp)\n      pattern = v1;\n\n    if (!pattern && (typeof v2 === 'string' || v2 instanceof RegExp))\n      pattern = v2;\n\n    // Filter jobs if a pattern is given:\n    if (pattern) {\n      isPatternString = typeof pattern === 'string';\n\n      if (stats instanceof Array) {\n        a = stats;\n      } else if (typeof stats === 'object') {\n        a = [];\n\n        for (k in stats)\n          a = a.concat(stats[k]);\n      } else {\n        a = [];\n\n        for (k in _jobs)\n          a.push(_jobs[k]);\n\n        for (k in _waitingJobs)\n          a.push(_waitingJobs[k]);\n\n        for (k in _runningJobs)\n          a.push(_runningJobs[k]);\n\n        a = a.concat(_doneJobs);\n      }\n\n      stats = [];\n      for (i = 0, l = a.length; i < l; i++)\n        if (isPatternString ? a[i].id === pattern : a[i].id.match(pattern))\n          stats.push(a[i]);\n    }\n\n    return __clone(stats);\n  }\n\n\n  /**\n   * TOOLS FUNCTIONS:\n   * ****************\n   */\n\n  /**\n   * This function takes any number of objects as arguments, copies from each\n   * of these objects each pair key/value into a new object, and finally\n   * returns this object.\n   *\n   * The arguments are parsed from the last one to the first one, such that\n   * when two objects have keys in common, the \"earliest\" object wins.\n   *\n   * Example:\n   * ********\n   *  > var o1 = {\n   *  >       a: 1,\n   *  >       b: 2,\n   *  >       c: '3'\n   *  >     },\n   *  >     o2 = {\n   *  >       c: '4',\n   *  >       d: [ 5 ]\n   *  >     };\n   *  > __extend(o1, o2);\n   *  > // Returns: {\n   *  > //   a: 1,\n   *  > //   b: 2,\n   *  > //   c: '3',\n   *  > //   d: [ 5 ]\n   *  > // };\n   *\n   * @param  {Object+} Any number of objects.\n   * @return {Object}  The merged object.\n   */\n  function __extend() {\n    var i,\n        k,\n        res = {},\n        l = arguments.length;\n\n    for (i = l - 1; i >= 0; i--)\n      for (k in arguments[i])\n        res[k] = arguments[i][k];\n\n    return res;\n  }\n\n  /**\n   * This function simply clones an object. This object must contain only\n   * objects, arrays and immutable values. Since it is not public, it does not\n   * deal with cyclic references, DOM elements and instantiated objects - so\n   * use it carefully.\n   *\n   * @param  {Object} The object to clone.\n   * @return {Object} The clone.\n   */\n  function __clone(item) {\n    var result, i, k, l;\n\n    if (!item)\n      return item;\n\n    if (Array.isArray(item)) {\n      result = [];\n      for (i = 0, l = item.length; i < l; i++)\n        result.push(__clone(item[i]));\n    } else if (typeof item === 'object') {\n      result = {};\n      for (i in item)\n        result[i] = __clone(item[i]);\n    } else\n      result = item;\n\n    return result;\n  }\n\n  /**\n   * Returns an array containing the values of an object.\n   *\n   * @param  {Object} The object.\n   * @return {Array}  The array of values.\n   */\n  function __objectValues(o) {\n    var k,\n        a = [];\n\n    for (k in o)\n      a.push(o[k]);\n\n    return a;\n  }\n\n  /**\n   * A short \"Date.now()\" polyfill.\n   *\n   * @return {Number} The current time (in ms).\n   */\n  function __dateNow() {\n    return Date.now ? Date.now() : new Date().getTime();\n  }\n\n  /**\n   * Polyfill for the Array.isArray function:\n   */\n  if (!Array.isArray)\n    Array.isArray = function(v) {\n      return Object.prototype.toString.call(v) === '[object Array]';\n    };\n\n\n  /**\n   * EXPORT PUBLIC API:\n   * ******************\n   */\n  var conrad = {\n    hasJob: _hasJob,\n    addJob: _addJob,\n    killJob: _killJob,\n    killAll: _killAll,\n    settings: _settings,\n    getStats: _getStats,\n    isRunning: _getIsRunning,\n    clearHistory: _clearHistory,\n\n    // Events management:\n    bind: _bind,\n    unbind: _unbind,\n\n    // Version:\n    version: '0.1.0'\n  };\n\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = conrad;\n    exports.conrad = conrad;\n  }\n  global.conrad = conrad;\n})(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 43:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.middlewares');\n\n  /**\n   * This middleware will just copy the graphic properties.\n   *\n   * @param {?string} readPrefix  The read prefix.\n   * @param {?string} writePrefix The write prefix.\n   */\n  sigma.middlewares.copy = function(readPrefix, writePrefix) {\n    var i,\n        l,\n        a;\n\n    if (writePrefix + '' === readPrefix + '')\n      return;\n\n    a = this.graph.nodes();\n    for (i = 0, l = a.length; i < l; i++) {\n      a[i][writePrefix + 'x'] = a[i][readPrefix + 'x'];\n      a[i][writePrefix + 'y'] = a[i][readPrefix + 'y'];\n      a[i][writePrefix + 'size'] = a[i][readPrefix + 'size'];\n    }\n\n    a = this.graph.edges();\n    for (i = 0, l = a.length; i < l; i++)\n      a[i][writePrefix + 'size'] = a[i][readPrefix + 'size'];\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 44:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.middlewares');\n  sigma.utils.pkg('sigma.utils');\n\n  /**\n   * This middleware will rescale the graph such that it takes an optimal space\n   * on the renderer.\n   *\n   * As each middleware, this function is executed in the scope of the sigma\n   * instance.\n   *\n   * @param {?string} readPrefix  The read prefix.\n   * @param {?string} writePrefix The write prefix.\n   * @param {object}  options     The parameters.\n   */\n  sigma.middlewares.rescale = function(readPrefix, writePrefix, options) {\n    var i,\n        l,\n        a,\n        b,\n        c,\n        d,\n        scale,\n        margin,\n        n = this.graph.nodes(),\n        e = this.graph.edges(),\n        settings = this.settings.embedObjects(options || {}),\n        bounds = settings('bounds') || sigma.utils.getBoundaries(\n          this.graph,\n          readPrefix,\n          true\n        ),\n        minX = bounds.minX,\n        minY = bounds.minY,\n        maxX = bounds.maxX,\n        maxY = bounds.maxY,\n        sizeMax = bounds.sizeMax,\n        weightMax = bounds.weightMax,\n        w = settings('width') || 1,\n        h = settings('height') || 1,\n        rescaleSettings = settings('autoRescale'),\n        validSettings = {\n          nodePosition: 1,\n          nodeSize: 1,\n          edgeSize: 1\n        };\n\n    /**\n     * What elements should we rescale?\n     */\n    if (!(rescaleSettings instanceof Array))\n      rescaleSettings = ['nodePosition', 'nodeSize', 'edgeSize'];\n\n    for (i = 0, l = rescaleSettings.length; i < l; i++)\n      if (!validSettings[rescaleSettings[i]])\n        throw new Error(\n          'The rescale setting \"' + rescaleSettings[i] + '\" is not recognized.'\n        );\n\n    var np = ~rescaleSettings.indexOf('nodePosition'),\n        ns = ~rescaleSettings.indexOf('nodeSize'),\n        es = ~rescaleSettings.indexOf('edgeSize');\n\n    /**\n     * First, we compute the scaling ratio, without considering the sizes\n     * of the nodes : Each node will have its center in the canvas, but might\n     * be partially out of it.\n     */\n    scale = settings('scalingMode') === 'outside' ?\n      Math.max(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      ) :\n      Math.min(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      );\n\n    /**\n     * Then, we correct that scaling ratio considering a margin, which is\n     * basically the size of the biggest node.\n     * This has to be done as a correction since to compare the size of the\n     * biggest node to the X and Y values, we have to first get an\n     * approximation of the scaling ratio.\n     **/\n    margin =\n      (\n        settings('rescaleIgnoreSize') ?\n          0 :\n          (settings('maxNodeSize') || sizeMax) / scale\n      ) +\n      (settings('sideMargin') || 0);\n    maxX += margin;\n    minX -= margin;\n    maxY += margin;\n    minY -= margin;\n\n    // Fix the scaling with the new extrema:\n    scale = settings('scalingMode') === 'outside' ?\n      Math.max(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      ) :\n      Math.min(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      );\n\n    // Size homothetic parameters:\n    if (!settings('maxNodeSize') && !settings('minNodeSize')) {\n      a = 1;\n      b = 0;\n    } else if (settings('maxNodeSize') === settings('minNodeSize')) {\n      a = 0;\n      b = +settings('maxNodeSize');\n    } else {\n      a = (settings('maxNodeSize') - settings('minNodeSize')) / sizeMax;\n      b = +settings('minNodeSize');\n    }\n\n    if (!settings('maxEdgeSize') && !settings('minEdgeSize')) {\n      c = 1;\n      d = 0;\n    } else if (settings('maxEdgeSize') === settings('minEdgeSize')) {\n      c = 0;\n      d = +settings('minEdgeSize');\n    } else {\n      c = (settings('maxEdgeSize') - settings('minEdgeSize')) / weightMax;\n      d = +settings('minEdgeSize');\n    }\n\n    // Rescale the nodes and edges:\n    for (i = 0, l = e.length; i < l; i++)\n      e[i][writePrefix + 'size'] =\n        e[i][readPrefix + 'size'] * (es ? c : 1) + (es ? d : 0);\n\n    for (i = 0, l = n.length; i < l; i++) {\n      n[i][writePrefix + 'size'] =\n        n[i][readPrefix + 'size'] * (ns ? a : 1) + (ns ? b : 0);\n      n[i][writePrefix + 'x'] =\n        (n[i][readPrefix + 'x'] - (maxX + minX) / 2) * (np ? scale : 1);\n      n[i][writePrefix + 'y'] =\n        (n[i][readPrefix + 'y'] - (maxY + minY) / 2) * (np ? scale : 1);\n    }\n  };\n\n  sigma.utils.getBoundaries = function(graph, prefix, doEdges) {\n    var i,\n        l,\n        e = graph.edges(),\n        n = graph.nodes(),\n        weightMax = -Infinity,\n        sizeMax = -Infinity,\n        minX = Infinity,\n        minY = Infinity,\n        maxX = -Infinity,\n        maxY = -Infinity;\n\n    if (doEdges)\n      for (i = 0, l = e.length; i < l; i++)\n        weightMax = Math.max(e[i][prefix + 'size'], weightMax);\n\n    for (i = 0, l = n.length; i < l; i++) {\n      sizeMax = Math.max(n[i][prefix + 'size'], sizeMax);\n      maxX = Math.max(n[i][prefix + 'x'], maxX);\n      minX = Math.min(n[i][prefix + 'x'], minX);\n      maxY = Math.max(n[i][prefix + 'y'], maxY);\n      minY = Math.min(n[i][prefix + 'y'], minY);\n    }\n\n    weightMax = weightMax || 1;\n    sizeMax = sizeMax || 1;\n\n    return {\n      weightMax: weightMax,\n      sizeMax: sizeMax,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 45:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc.animation.running');\n\n  /**\n   * Generates a unique ID for the animation.\n   *\n   * @return {string} Returns the new ID.\n   */\n  var _getID = (function() {\n    var id = 0;\n    return function() {\n      return '' + (++id);\n    };\n  })();\n\n  /**\n   * This function animates a camera. It has to be called with the camera to\n   * animate, the values of the coordinates to reach and eventually some\n   * options. It returns a number id, that you can use to kill the animation,\n   * with the method sigma.misc.animation.kill(id).\n   *\n   * The available options are:\n   *\n   *   {?number}            duration   The duration of the animation.\n   *   {?function}          onNewFrame A callback to execute when the animation\n   *                                   enter a new frame.\n   *   {?function}          onComplete A callback to execute when the animation\n   *                                   is completed or killed.\n   *   {?(string|function)} easing     The name of a function from the package\n   *                                   sigma.utils.easings, or a custom easing\n   *                                   function.\n   *\n   * @param  {camera}  camera  The camera to animate.\n   * @param  {object}  target  The coordinates to reach.\n   * @param  {?object} options Eventually an object to specify some options to\n   *                           the function. The available options are\n   *                           presented in the description of the function.\n   * @return {number}          The animation id, to make it easy to kill\n   *                           through the method \"sigma.misc.animation.kill\".\n   */\n  sigma.misc.animation.camera = function(camera, val, options) {\n    if (\n      !(camera instanceof sigma.classes.camera) ||\n      typeof val !== 'object' ||\n      !val\n    )\n      throw 'animation.camera: Wrong arguments.';\n\n    if (\n      typeof val.x !== 'number' &&\n      typeof val.y !== 'number' &&\n      typeof val.ratio !== 'number' &&\n      typeof val.angle !== 'number'\n    )\n      throw 'There must be at least one valid coordinate in the given val.';\n\n    var fn,\n        id,\n        anim,\n        easing,\n        duration,\n        initialVal,\n        o = options || {},\n        start = sigma.utils.dateNow();\n\n    // Store initial values:\n    initialVal = {\n      x: camera.x,\n      y: camera.y,\n      ratio: camera.ratio,\n      angle: camera.angle\n    };\n\n    duration = o.duration;\n    easing = typeof o.easing !== 'function' ?\n      sigma.utils.easings[o.easing || 'quadraticInOut'] :\n      o.easing;\n\n    fn = function() {\n      var coef,\n          t = o.duration ? (sigma.utils.dateNow() - start) / o.duration : 1;\n\n      // If the animation is over:\n      if (t >= 1) {\n        camera.isAnimated = false;\n        camera.goTo({\n          x: val.x !== undefined ? val.x : initialVal.x,\n          y: val.y !== undefined ? val.y : initialVal.y,\n          ratio: val.ratio !== undefined ? val.ratio : initialVal.ratio,\n          angle: val.angle !== undefined ? val.angle : initialVal.angle\n        });\n\n        cancelAnimationFrame(id);\n        delete sigma.misc.animation.running[id];\n\n        // Check callbacks:\n        if (typeof o.onComplete === 'function')\n          o.onComplete();\n\n      // Else, let's keep going:\n      } else {\n        coef = easing(t);\n        camera.isAnimated = true;\n        camera.goTo({\n          x: val.x !== undefined ?\n            initialVal.x + (val.x - initialVal.x) * coef :\n            initialVal.x,\n          y: val.y !== undefined ?\n            initialVal.y + (val.y - initialVal.y) * coef :\n            initialVal.y,\n          ratio: val.ratio !== undefined ?\n            initialVal.ratio + (val.ratio - initialVal.ratio) * coef :\n            initialVal.ratio,\n          angle: val.angle !== undefined ?\n            initialVal.angle + (val.angle - initialVal.angle) * coef :\n            initialVal.angle\n        });\n\n        // Check callbacks:\n        if (typeof o.onNewFrame === 'function')\n          o.onNewFrame();\n\n        anim.frameId = requestAnimationFrame(fn);\n      }\n    };\n\n    id = _getID();\n    anim = {\n      frameId: requestAnimationFrame(fn),\n      target: camera,\n      type: 'camera',\n      options: o,\n      fn: fn\n    };\n    sigma.misc.animation.running[id] = anim;\n\n    return id;\n  };\n\n  /**\n   * Kills a running animation. It triggers the eventual onComplete callback.\n   *\n   * @param  {number} id  The id of the animation to kill.\n   * @return {object}     Returns the sigma.misc.animation package.\n   */\n  sigma.misc.animation.kill = function(id) {\n    if (arguments.length !== 1 || typeof id !== 'number')\n      throw 'animation.kill: Wrong arguments.';\n\n    var o = sigma.misc.animation.running[id];\n\n    if (o) {\n      cancelAnimationFrame(id);\n      delete sigma.misc.animation.running[o.frameId];\n\n      if (o.type === 'camera')\n        o.target.isAnimated = false;\n\n      // Check callbacks:\n      if (typeof (o.options || {}).onComplete === 'function')\n        o.options.onComplete();\n    }\n\n    return this;\n  };\n\n  /**\n   * Kills every running animations, or only the one with the specified type,\n   * if a string parameter is given.\n   *\n   * @param  {?(string|object)} filter A string to filter the animations to kill\n   *                                   on their type (example: \"camera\"), or an\n   *                                   object to filter on their target.\n   * @return {number}                  Returns the number of animations killed\n   *                                   that way.\n   */\n  sigma.misc.animation.killAll = function(filter) {\n    var o,\n        id,\n        count = 0,\n        type = typeof filter === 'string' ? filter : null,\n        target = typeof filter === 'object' ? filter : null,\n        running = sigma.misc.animation.running;\n\n    for (id in running)\n      if (\n        (!type || running[id].type === type) &&\n        (!target || running[id].target === target)\n      ) {\n        o = sigma.misc.animation.running[id];\n        cancelAnimationFrame(o.frameId);\n        delete sigma.misc.animation.running[id];\n\n        if (o.type === 'camera')\n          o.target.isAnimated = false;\n\n        // Increment counter:\n        count++;\n\n        // Check callbacks:\n        if (typeof (o.options || {}).onComplete === 'function')\n          o.options.onComplete();\n      }\n\n    return count;\n  };\n\n  /**\n   * Returns \"true\" if any animation that is currently still running matches\n   * the filter given to the function.\n   *\n   * @param  {string|object} filter A string to filter the animations to kill\n   *                                on their type (example: \"camera\"), or an\n   *                                object to filter on their target.\n   * @return {boolean}              Returns true if any running animation\n   *                                matches.\n   */\n  sigma.misc.animation.has = function(filter) {\n    var id,\n        type = typeof filter === 'string' ? filter : null,\n        target = typeof filter === 'object' ? filter : null,\n        running = sigma.misc.animation.running;\n\n    for (id in running)\n      if (\n        (!type || running[id].type === type) &&\n        (!target || running[id].target === target)\n      )\n        return true;\n\n    return false;\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 46:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc');\n\n  /**\n   * This helper will bind any DOM renderer (for instance svg)\n   * to its captors, to properly dispatch the good events to the sigma instance\n   * to manage clicking, hovering etc...\n   *\n   * It has to be called in the scope of the related renderer.\n   */\n  sigma.misc.bindDOMEvents = function(container) {\n    var self = this,\n        graph = this.graph;\n\n    // DOMElement abstraction\n    function Element(domElement) {\n\n      // Helpers\n      this.attr = function(attrName) {\n        return domElement.getAttributeNS(null, attrName);\n      };\n\n      // Properties\n      this.tag = domElement.tagName;\n      this.class = this.attr('class');\n      this.id = this.attr('id');\n\n      // Methods\n      this.isNode = function() {\n        return !!~this.class.indexOf(self.settings('classPrefix') + '-node');\n      };\n\n      this.isEdge = function() {\n        return !!~this.class.indexOf(self.settings('classPrefix') + '-edge');\n      };\n\n      this.isHover = function() {\n        return !!~this.class.indexOf(self.settings('classPrefix') + '-hover');\n      };\n    }\n\n    // Click\n    function click(e) {\n      if (!self.settings('eventsEnabled'))\n        return;\n\n      // Generic event\n      self.dispatchEvent('click', e);\n\n      // Are we on a node?\n      var element = new Element(e.target);\n\n      if (element.isNode())\n        self.dispatchEvent('clickNode', {\n          node: graph.nodes(element.attr('data-node-id'))\n        });\n      else\n        self.dispatchEvent('clickStage');\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    // Double click\n    function doubleClick(e) {\n      if (!self.settings('eventsEnabled'))\n        return;\n\n      // Generic event\n      self.dispatchEvent('doubleClick', e);\n\n      // Are we on a node?\n      var element = new Element(e.target);\n\n      if (element.isNode())\n        self.dispatchEvent('doubleClickNode', {\n          node: graph.nodes(element.attr('data-node-id'))\n        });\n      else\n        self.dispatchEvent('doubleClickStage');\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    // On over\n    function onOver(e) {\n      var target = e.toElement || e.target;\n\n      if (!self.settings('eventsEnabled') || !target)\n        return;\n\n      var el = new Element(target);\n\n      if (el.isNode()) {\n        self.dispatchEvent('overNode', {\n          node: graph.nodes(el.attr('data-node-id'))\n        });\n      }\n      else if (el.isEdge()) {\n        var edge = graph.edges(el.attr('data-edge-id'));\n        self.dispatchEvent('overEdge', {\n          edge: edge,\n          source: graph.nodes(edge.source),\n          target: graph.nodes(edge.target)\n        });\n      }\n    }\n\n    // On out\n    function onOut(e) {\n      var target = e.fromElement || e.originalTarget;\n\n      if (!self.settings('eventsEnabled'))\n        return;\n\n      var el = new Element(target);\n\n      if (el.isNode()) {\n        self.dispatchEvent('outNode', {\n          node: graph.nodes(el.attr('data-node-id'))\n        });\n      }\n      else if (el.isEdge()) {\n        var edge = graph.edges(el.attr('data-edge-id'));\n        self.dispatchEvent('outEdge', {\n          edge: edge,\n          source: graph.nodes(edge.source),\n          target: graph.nodes(edge.target)\n        });\n      }\n    }\n\n    // Registering Events:\n\n    // Click\n    container.addEventListener('click', click, false);\n    sigma.utils.doubleClick(container, 'click', doubleClick);\n\n    // Touch counterparts\n    container.addEventListener('touchstart', click, false);\n    sigma.utils.doubleClick(container, 'touchstart', doubleClick);\n\n    // Mouseover\n    container.addEventListener('mouseover', onOver, true);\n\n    // Mouseout\n    container.addEventListener('mouseout', onOut, true);\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 47:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc');\n\n  /**\n   * This helper will bind any no-DOM renderer (for instance canvas or WebGL)\n   * to its captors, to properly dispatch the good events to the sigma instance\n   * to manage clicking, hovering etc...\n   *\n   * It has to be called in the scope of the related renderer.\n   */\n  sigma.misc.bindEvents = function(prefix) {\n    var i,\n        l,\n        mX,\n        mY,\n        captor,\n        self = this;\n\n    function getNodes(e) {\n      if (e) {\n        mX = 'x' in e.data ? e.data.x : mX;\n        mY = 'y' in e.data ? e.data.y : mY;\n      }\n\n      var i,\n          j,\n          l,\n          n,\n          x,\n          y,\n          s,\n          inserted,\n          selected = [],\n          modifiedX = mX + self.width / 2,\n          modifiedY = mY + self.height / 2,\n          point = self.camera.cameraPosition(\n            mX,\n            mY\n          ),\n          nodes = self.camera.quadtree.point(\n            point.x,\n            point.y\n          );\n\n      if (nodes.length)\n        for (i = 0, l = nodes.length; i < l; i++) {\n          n = nodes[i];\n          x = n[prefix + 'x'];\n          y = n[prefix + 'y'];\n          s = n[prefix + 'size'];\n\n          if (\n            !n.hidden &&\n            modifiedX > x - s &&\n            modifiedX < x + s &&\n            modifiedY > y - s &&\n            modifiedY < y + s &&\n            Math.sqrt(\n              Math.pow(modifiedX - x, 2) +\n              Math.pow(modifiedY - y, 2)\n            ) < s\n          ) {\n            // Insert the node:\n            inserted = false;\n\n            for (j = 0; j < selected.length; j++)\n              if (n.size > selected[j].size) {\n                selected.splice(j, 0, n);\n                inserted = true;\n                break;\n              }\n\n            if (!inserted)\n              selected.push(n);\n          }\n        }\n\n      return selected;\n    }\n\n\n    function getEdges(e) {\n      if (!self.settings('enableEdgeHovering')) {\n        // No event if the setting is off:\n        return [];\n      }\n\n      var isCanvas = (\n        sigma.renderers.canvas && self instanceof sigma.renderers.canvas);\n\n      if (!isCanvas) {\n        // A quick hardcoded rule to prevent people from using this feature\n        // with the WebGL renderer (which is not good enough at the moment):\n        throw new Error(\n          'The edge events feature is not compatible with the WebGL renderer'\n        );\n      }\n\n      if (e) {\n        mX = 'x' in e.data ? e.data.x : mX;\n        mY = 'y' in e.data ? e.data.y : mY;\n      }\n\n      var i,\n          j,\n          l,\n          a,\n          edge,\n          s,\n          maxEpsilon = self.settings('edgeHoverPrecision'),\n          source,\n          target,\n          cp,\n          nodeIndex = {},\n          inserted,\n          selected = [],\n          modifiedX = mX + self.width / 2,\n          modifiedY = mY + self.height / 2,\n          point = self.camera.cameraPosition(\n            mX,\n            mY\n          ),\n          edges = [];\n\n      if (isCanvas) {\n        var nodesOnScreen = self.camera.quadtree.area(\n          self.camera.getRectangle(self.width, self.height)\n        );\n        for (a = nodesOnScreen, i = 0, l = a.length; i < l; i++)\n          nodeIndex[a[i].id] = a[i];\n      }\n\n      if (self.camera.edgequadtree !== undefined) {\n        edges = self.camera.edgequadtree.point(\n          point.x,\n          point.y\n        );\n      }\n\n      function insertEdge(selected, edge) {\n        inserted = false;\n\n        for (j = 0; j < selected.length; j++)\n          if (edge.size > selected[j].size) {\n            selected.splice(j, 0, edge);\n            inserted = true;\n            break;\n          }\n\n        if (!inserted)\n          selected.push(edge);\n      }\n\n      if (edges.length)\n        for (i = 0, l = edges.length; i < l; i++) {\n          edge = edges[i];\n          source = self.graph.nodes(edge.source);\n          target = self.graph.nodes(edge.target);\n          // (HACK) we can't get edge[prefix + 'size'] on WebGL renderer:\n          s = edge[prefix + 'size'] ||\n              edge['read_' + prefix + 'size'];\n\n          // First, let's identify which edges are drawn. To do this, we keep\n          // every edges that have at least one extremity displayed according to\n          // the quadtree and the \"hidden\" attribute. We also do not keep hidden\n          // edges.\n          // Then, let's check if the mouse is on the edge (we suppose that it\n          // is a line segment).\n\n          if (\n            !edge.hidden &&\n            !source.hidden && !target.hidden &&\n            (!isCanvas ||\n              (nodeIndex[edge.source] || nodeIndex[edge.target])) &&\n            sigma.utils.getDistance(\n              source[prefix + 'x'],\n              source[prefix + 'y'],\n              modifiedX,\n              modifiedY) > source[prefix + 'size'] &&\n            sigma.utils.getDistance(\n              target[prefix + 'x'],\n              target[prefix + 'y'],\n              modifiedX,\n              modifiedY) > target[prefix + 'size']\n          ) {\n            if (edge.type == 'curve' || edge.type == 'curvedArrow') {\n              if (source.id === target.id) {\n                cp = sigma.utils.getSelfLoopControlPoints(\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  source[prefix + 'size']\n                );\n                if (\n                  sigma.utils.isPointOnBezierCurve(\n                  modifiedX,\n                  modifiedY,\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  target[prefix + 'x'],\n                  target[prefix + 'y'],\n                  cp.x1,\n                  cp.y1,\n                  cp.x2,\n                  cp.y2,\n                  Math.max(s, maxEpsilon)\n                )) {\n                  insertEdge(selected, edge);\n                }\n              }\n              else {\n                cp = sigma.utils.getQuadraticControlPoint(\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  target[prefix + 'x'],\n                  target[prefix + 'y']);\n                if (\n                  sigma.utils.isPointOnQuadraticCurve(\n                  modifiedX,\n                  modifiedY,\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  target[prefix + 'x'],\n                  target[prefix + 'y'],\n                  cp.x,\n                  cp.y,\n                  Math.max(s, maxEpsilon)\n                )) {\n                  insertEdge(selected, edge);\n                }\n              }\n            } else if (\n                sigma.utils.isPointOnSegment(\n                modifiedX,\n                modifiedY,\n                source[prefix + 'x'],\n                source[prefix + 'y'],\n                target[prefix + 'x'],\n                target[prefix + 'y'],\n                Math.max(s, maxEpsilon)\n              )) {\n              insertEdge(selected, edge);\n            }\n          }\n        }\n\n      return selected;\n    }\n\n\n    function bindCaptor(captor) {\n      var nodes,\n          edges,\n          overNodes = {},\n          overEdges = {};\n\n      function onClick(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        self.dispatchEvent('click', e.data);\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        if (nodes.length) {\n          self.dispatchEvent('clickNode', {\n            node: nodes[0],\n            captor: e.data\n          });\n          self.dispatchEvent('clickNodes', {\n            node: nodes,\n            captor: e.data\n          });\n        } else if (edges.length) {\n          self.dispatchEvent('clickEdge', {\n            edge: edges[0],\n            captor: e.data\n          });\n          self.dispatchEvent('clickEdges', {\n            edge: edges,\n            captor: e.data\n          });\n        } else\n          self.dispatchEvent('clickStage', {captor: e.data});\n      }\n\n      function onDoubleClick(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        self.dispatchEvent('doubleClick', e.data);\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        if (nodes.length) {\n          self.dispatchEvent('doubleClickNode', {\n            node: nodes[0],\n            captor: e.data\n          });\n          self.dispatchEvent('doubleClickNodes', {\n            node: nodes,\n            captor: e.data\n          });\n        } else if (edges.length) {\n          self.dispatchEvent('doubleClickEdge', {\n            edge: edges[0],\n            captor: e.data\n          });\n          self.dispatchEvent('doubleClickEdges', {\n            edge: edges,\n            captor: e.data\n          });\n        } else\n          self.dispatchEvent('doubleClickStage', {captor: e.data});\n      }\n\n      function onRightClick(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        self.dispatchEvent('rightClick', e.data);\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        if (nodes.length) {\n          self.dispatchEvent('rightClickNode', {\n            node: nodes[0],\n            captor: e.data\n          });\n          self.dispatchEvent('rightClickNodes', {\n            node: nodes,\n            captor: e.data\n          });\n        } else if (edges.length) {\n          self.dispatchEvent('rightClickEdge', {\n            edge: edges[0],\n            captor: e.data\n          });\n          self.dispatchEvent('rightClickEdges', {\n            edge: edges,\n            captor: e.data\n          });\n        } else\n          self.dispatchEvent('rightClickStage', {captor: e.data});\n      }\n\n      function onOut(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        var k,\n            i,\n            l,\n            le,\n            outNodes = [],\n            outEdges = [];\n\n        for (k in overNodes)\n          outNodes.push(overNodes[k]);\n\n        overNodes = {};\n        // Dispatch both single and multi events:\n        for (i = 0, l = outNodes.length; i < l; i++)\n          self.dispatchEvent('outNode', {\n            node: outNodes[i],\n            captor: e.data\n          });\n        if (outNodes.length)\n          self.dispatchEvent('outNodes', {\n            nodes: outNodes,\n            captor: e.data\n          });\n\n        overEdges = {};\n        // Dispatch both single and multi events:\n        for (i = 0, le = outEdges.length; i < le; i++)\n          self.dispatchEvent('outEdge', {\n            edge: outEdges[i],\n            captor: e.data\n          });\n        if (outEdges.length)\n          self.dispatchEvent('outEdges', {\n            edges: outEdges,\n            captor: e.data\n          });\n      }\n\n      function onMove(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        var i,\n            k,\n            node,\n            edge,\n            newOutNodes = [],\n            newOverNodes = [],\n            currentOverNodes = {},\n            l = nodes.length,\n            newOutEdges = [],\n            newOverEdges = [],\n            currentOverEdges = {},\n            le = edges.length;\n\n        // Check newly overred nodes:\n        for (i = 0; i < l; i++) {\n          node = nodes[i];\n          currentOverNodes[node.id] = node;\n          if (!overNodes[node.id]) {\n            newOverNodes.push(node);\n            overNodes[node.id] = node;\n          }\n        }\n\n        // Check no more overred nodes:\n        for (k in overNodes)\n          if (!currentOverNodes[k]) {\n            newOutNodes.push(overNodes[k]);\n            delete overNodes[k];\n          }\n\n        // Dispatch both single and multi events:\n        for (i = 0, l = newOverNodes.length; i < l; i++)\n          self.dispatchEvent('overNode', {\n            node: newOverNodes[i],\n            captor: e.data\n          });\n        for (i = 0, l = newOutNodes.length; i < l; i++)\n          self.dispatchEvent('outNode', {\n            node: newOutNodes[i],\n            captor: e.data\n          });\n        if (newOverNodes.length)\n          self.dispatchEvent('overNodes', {\n            nodes: newOverNodes,\n            captor: e.data\n          });\n        if (newOutNodes.length)\n          self.dispatchEvent('outNodes', {\n            nodes: newOutNodes,\n            captor: e.data\n          });\n\n        // Check newly overred edges:\n        for (i = 0; i < le; i++) {\n          edge = edges[i];\n          currentOverEdges[edge.id] = edge;\n          if (!overEdges[edge.id]) {\n            newOverEdges.push(edge);\n            overEdges[edge.id] = edge;\n          }\n        }\n\n        // Check no more overred edges:\n        for (k in overEdges)\n          if (!currentOverEdges[k]) {\n            newOutEdges.push(overEdges[k]);\n            delete overEdges[k];\n          }\n\n        // Dispatch both single and multi events:\n        for (i = 0, le = newOverEdges.length; i < le; i++)\n          self.dispatchEvent('overEdge', {\n            edge: newOverEdges[i],\n            captor: e.data\n          });\n        for (i = 0, le = newOutEdges.length; i < le; i++)\n          self.dispatchEvent('outEdge', {\n            edge: newOutEdges[i],\n            captor: e.data\n          });\n        if (newOverEdges.length)\n          self.dispatchEvent('overEdges', {\n            edges: newOverEdges,\n            captor: e.data\n          });\n        if (newOutEdges.length)\n          self.dispatchEvent('outEdges', {\n            edges: newOutEdges,\n            captor: e.data\n          });\n      }\n\n      // Bind events:\n      captor.bind('click', onClick);\n      captor.bind('mousedown', onMove);\n      captor.bind('mouseup', onMove);\n      captor.bind('mousemove', onMove);\n      captor.bind('mouseout', onOut);\n      captor.bind('doubleclick', onDoubleClick);\n      captor.bind('rightclick', onRightClick);\n      self.bind('render', onMove);\n    }\n\n    for (i = 0, l = this.captors.length; i < l; i++)\n      bindCaptor(this.captors[i]);\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 48:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc');\n\n  /**\n   * This method listens to \"overNode\", \"outNode\", \"overEdge\" and \"outEdge\"\n   * events from a renderer and renders the nodes differently on the top layer.\n   * The goal is to make any node label readable with the mouse, and to\n   * highlight hovered nodes and edges.\n   *\n   * It has to be called in the scope of the related renderer.\n   */\n  sigma.misc.drawHovers = function(prefix) {\n    var self = this,\n        hoveredNodes = {},\n        hoveredEdges = {};\n\n    this.bind('overNode', function(event) {\n      var node = event.data.node;\n      if (!node.hidden) {\n        hoveredNodes[node.id] = node;\n        draw();\n      }\n    });\n\n    this.bind('outNode', function(event) {\n      delete hoveredNodes[event.data.node.id];\n      draw();\n    });\n\n    this.bind('overEdge', function(event) {\n      var edge = event.data.edge;\n      if (!edge.hidden) {\n        hoveredEdges[edge.id] = edge;\n        draw();\n      }\n    });\n\n    this.bind('outEdge', function(event) {\n      delete hoveredEdges[event.data.edge.id];\n      draw();\n    });\n\n    this.bind('render', function(event) {\n      draw();\n    });\n\n    function draw() {\n\n      var k,\n          source,\n          target,\n          hoveredNode,\n          hoveredEdge,\n          c = self.contexts.hover.canvas,\n          defaultNodeType = self.settings('defaultNodeType'),\n          defaultEdgeType = self.settings('defaultEdgeType'),\n          nodeRenderers = sigma.canvas.hovers,\n          edgeRenderers = sigma.canvas.edgehovers,\n          extremitiesRenderers = sigma.canvas.extremities,\n          embedSettings = self.settings.embedObjects({\n            prefix: prefix\n          });\n\n      // Clear self.contexts.hover:\n      self.contexts.hover.clearRect(0, 0, c.width, c.height);\n\n      // Node render: single hover\n      if (\n        embedSettings('enableHovering') &&\n        embedSettings('singleHover') &&\n        Object.keys(hoveredNodes).length\n      ) {\n        hoveredNode = hoveredNodes[Object.keys(hoveredNodes)[0]];\n        (\n          nodeRenderers[hoveredNode.type] ||\n          nodeRenderers[defaultNodeType] ||\n          nodeRenderers.def\n        )(\n          hoveredNode,\n          self.contexts.hover,\n          embedSettings\n        );\n      }\n\n      // Node render: multiple hover\n      if (\n        embedSettings('enableHovering') &&\n        !embedSettings('singleHover')\n      )\n        for (k in hoveredNodes)\n          (\n            nodeRenderers[hoveredNodes[k].type] ||\n            nodeRenderers[defaultNodeType] ||\n            nodeRenderers.def\n          )(\n            hoveredNodes[k],\n            self.contexts.hover,\n            embedSettings\n          );\n\n      // Edge render: single hover\n      if (\n        embedSettings('enableEdgeHovering') &&\n        embedSettings('singleHover') &&\n        Object.keys(hoveredEdges).length\n      ) {\n        hoveredEdge = hoveredEdges[Object.keys(hoveredEdges)[0]];\n        source = self.graph.nodes(hoveredEdge.source);\n        target = self.graph.nodes(hoveredEdge.target);\n\n        if (! hoveredEdge.hidden) {\n          (\n            edgeRenderers[hoveredEdge.type] ||\n            edgeRenderers[defaultEdgeType] ||\n            edgeRenderers.def\n          ) (\n            hoveredEdge,\n            source,\n            target,\n            self.contexts.hover,\n            embedSettings\n          );\n\n          if (embedSettings('edgeHoverExtremities')) {\n            (\n              extremitiesRenderers[hoveredEdge.type] ||\n              extremitiesRenderers.def\n            )(\n              hoveredEdge,\n              source,\n              target,\n              self.contexts.hover,\n              embedSettings\n            );\n\n          } else {\n            // Avoid edges rendered over nodes:\n            (\n              sigma.canvas.nodes[source.type] ||\n              sigma.canvas.nodes.def\n            ) (\n              source,\n              self.contexts.hover,\n              embedSettings\n            );\n            (\n              sigma.canvas.nodes[target.type] ||\n              sigma.canvas.nodes.def\n            ) (\n              target,\n              self.contexts.hover,\n              embedSettings\n            );\n          }\n        }\n      }\n\n      // Edge render: multiple hover\n      if (\n        embedSettings('enableEdgeHovering') &&\n        !embedSettings('singleHover')\n      ) {\n        for (k in hoveredEdges) {\n          hoveredEdge = hoveredEdges[k];\n          source = self.graph.nodes(hoveredEdge.source);\n          target = self.graph.nodes(hoveredEdge.target);\n\n          if (!hoveredEdge.hidden) {\n            (\n              edgeRenderers[hoveredEdge.type] ||\n              edgeRenderers[defaultEdgeType] ||\n              edgeRenderers.def\n            ) (\n              hoveredEdge,\n              source,\n              target,\n              self.contexts.hover,\n              embedSettings\n            );\n\n            if (embedSettings('edgeHoverExtremities')) {\n              (\n                extremitiesRenderers[hoveredEdge.type] ||\n                extremitiesRenderers.def\n              )(\n                hoveredEdge,\n                source,\n                target,\n                self.contexts.hover,\n                embedSettings\n              );\n            } else {\n              // Avoid edges rendered over nodes:\n              (\n                sigma.canvas.nodes[source.type] ||\n                sigma.canvas.nodes.def\n              ) (\n                source,\n                self.contexts.hover,\n                embedSettings\n              );\n              (\n                sigma.canvas.nodes[target.type] ||\n                sigma.canvas.nodes.def\n              ) (\n                target,\n                self.contexts.hover,\n                embedSettings\n              );\n            }\n          }\n        }\n      }\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 52:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.def =\n    function(edge, source, target, context, settings) {\n      var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 56:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * The default edge renderer. It renders the edge as a simple line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.def = function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 57:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.extremities');\n\n  /**\n   * The default renderer for hovered edge extremities. It renders the edge\n   * extremities as hovered.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.extremities.def =\n    function(edge, source, target, context, settings) {\n    // Source Node:\n    (\n      sigma.canvas.hovers[source.type] ||\n      sigma.canvas.hovers.def\n    ) (\n      source, context, settings\n    );\n\n    // Target Node:\n    (\n      sigma.canvas.hovers[target.type] ||\n      sigma.canvas.hovers.def\n    ) (\n      target, context, settings\n    );\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 58:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.hovers');\n\n  /**\n   * This hover renderer will basically display the label with a background.\n   *\n   * @param  {object}                   node     The node object.\n   * @param  {CanvasRenderingContext2D} context  The canvas context.\n   * @param  {configurable}             settings The settings function.\n   */\n  sigma.canvas.hovers.def = function(node, context, settings) {\n    var x,\n        y,\n        w,\n        h,\n        e,\n        fontStyle = settings('hoverFontStyle') || settings('fontStyle'),\n        prefix = settings('prefix') || '',\n        size = node[prefix + 'size'],\n        fontSize = (settings('labelSize') === 'fixed') ?\n          settings('defaultLabelSize') :\n          settings('labelSizeRatio') * size;\n\n    // Label background:\n    context.font = (fontStyle ? fontStyle + ' ' : '') +\n      fontSize + 'px ' + (settings('hoverFont') || settings('font'));\n\n    context.beginPath();\n    context.fillStyle = settings('labelHoverBGColor') === 'node' ?\n      (node.color || settings('defaultNodeColor')) :\n      settings('defaultHoverLabelBGColor');\n\n    if (node.label && settings('labelHoverShadow')) {\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.shadowBlur = 8;\n      context.shadowColor = settings('labelHoverShadowColor');\n    }\n\n    if (node.label && typeof node.label === 'string') {\n      x = Math.round(node[prefix + 'x'] - fontSize / 2 - 2);\n      y = Math.round(node[prefix + 'y'] - fontSize / 2 - 2);\n      w = Math.round(\n        context.measureText(node.label).width + fontSize / 2 + size + 7\n      );\n      h = Math.round(fontSize + 4);\n      e = Math.round(fontSize / 2 + 2);\n\n      context.moveTo(x, y + e);\n      context.arcTo(x, y, x + e, y, e);\n      context.lineTo(x + w, y);\n      context.lineTo(x + w, y + h);\n      context.lineTo(x + e, y + h);\n      context.arcTo(x, y + h, x, y + h - e, e);\n      context.lineTo(x, y + e);\n\n      context.closePath();\n      context.fill();\n\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.shadowBlur = 0;\n    }\n\n    // Node border:\n    if (settings('borderSize') > 0) {\n      context.beginPath();\n      context.fillStyle = settings('nodeBorderColor') === 'node' ?\n        (node.color || settings('defaultNodeColor')) :\n        settings('defaultNodeBorderColor');\n      context.arc(\n        node[prefix + 'x'],\n        node[prefix + 'y'],\n        size + settings('borderSize'),\n        0,\n        Math.PI * 2,\n        true\n      );\n      context.closePath();\n      context.fill();\n    }\n\n    // Node:\n    var nodeRenderer = sigma.canvas.nodes[node.type] || sigma.canvas.nodes.def;\n    nodeRenderer(node, context, settings);\n\n    // Display the label:\n    if (node.label && typeof node.label === 'string') {\n      context.fillStyle = (settings('labelHoverColor') === 'node') ?\n        (node.color || settings('defaultNodeColor')) :\n        settings('defaultLabelHoverColor');\n\n      context.fillText(\n        node.label,\n        Math.round(node[prefix + 'x'] + size + 3),\n        Math.round(node[prefix + 'y'] + fontSize / 3)\n      );\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 59:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.labels');\n\n  /**\n   * This label renderer will just display the label on the right of the node.\n   *\n   * @param  {object}                   node     The node object.\n   * @param  {CanvasRenderingContext2D} context  The canvas context.\n   * @param  {configurable}             settings The settings function.\n   */\n  sigma.canvas.labels.def = function(node, context, settings) {\n    var fontSize,\n        prefix = settings('prefix') || '',\n        size = node[prefix + 'size'];\n\n    if (size < settings('labelThreshold'))\n      return;\n\n    if (!node.label || typeof node.label !== 'string')\n      return;\n\n    fontSize = (settings('labelSize') === 'fixed') ?\n      settings('defaultLabelSize') :\n      settings('labelSizeRatio') * size;\n\n    context.font = (settings('fontStyle') ? settings('fontStyle') + ' ' : '') +\n      fontSize + 'px ' + settings('font');\n    context.fillStyle = (settings('labelColor') === 'node') ?\n      (node.color || settings('defaultNodeColor')) :\n      settings('defaultLabelColor');\n\n    context.fillText(\n      node.label,\n      Math.round(node[prefix + 'x'] + size + 3),\n      Math.round(node[prefix + 'y'] + fontSize / 3)\n    );\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 60:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.nodes');\n\n  /**\n   * The default node renderer. It renders the node as a simple disc.\n   *\n   * @param  {object}                   node     The node object.\n   * @param  {CanvasRenderingContext2D} context  The canvas context.\n   * @param  {configurable}             settings The settings function.\n   */\n  sigma.canvas.nodes.def = function(node, context, settings) {\n    var prefix = settings('prefix') || '';\n\n    context.fillStyle = node.color || settings('defaultNodeColor');\n    context.beginPath();\n    context.arc(\n      node[prefix + 'x'],\n      node[prefix + 'y'],\n      node[prefix + 'size'],\n      0,\n      Math.PI * 2,\n      true\n    );\n\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 61:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  if (typeof conrad === 'undefined')\n    throw 'conrad is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.renderers');\n\n  /**\n   * This function is the constructor of the canvas sigma's renderer.\n   *\n   * @param  {sigma.classes.graph}            graph    The graph to render.\n   * @param  {sigma.classes.camera}           camera   The camera.\n   * @param  {configurable}           settings The sigma instance settings\n   *                                           function.\n   * @param  {object}                 object   The options object.\n   * @return {sigma.renderers.canvas}          The renderer instance.\n   */\n  sigma.renderers.canvas = function(graph, camera, settings, options) {\n    if (typeof options !== 'object')\n      throw 'sigma.renderers.canvas: Wrong arguments.';\n\n    if (!(options.container instanceof HTMLElement))\n      throw 'Container not found.';\n\n    var k,\n        i,\n        l,\n        a,\n        fn,\n        self = this;\n\n    sigma.classes.dispatcher.extend(this);\n\n    // Initialize main attributes:\n    Object.defineProperty(this, 'conradId', {\n      value: sigma.utils.id()\n    });\n    this.graph = graph;\n    this.camera = camera;\n    this.contexts = {};\n    this.domElements = {};\n    this.options = options;\n    this.container = this.options.container;\n    this.settings = (\n        typeof options.settings === 'object' &&\n        options.settings\n      ) ?\n        settings.embedObjects(options.settings) :\n        settings;\n\n    // Node indexes:\n    this.nodesOnScreen = [];\n    this.edgesOnScreen = [];\n\n    // Conrad related attributes:\n    this.jobs = {};\n\n    // Find the prefix:\n    this.options.prefix = 'renderer' + this.conradId + ':';\n\n    // Initialize the DOM elements:\n    if (\n      !this.settings('batchEdgesDrawing')\n    ) {\n      this.initDOM('canvas', 'scene');\n      this.contexts.edges = this.contexts.scene;\n      this.contexts.nodes = this.contexts.scene;\n      this.contexts.labels = this.contexts.scene;\n    } else {\n      this.initDOM('canvas', 'edges');\n      this.initDOM('canvas', 'scene');\n      this.contexts.nodes = this.contexts.scene;\n      this.contexts.labels = this.contexts.scene;\n    }\n\n    this.initDOM('canvas', 'mouse');\n    this.contexts.hover = this.contexts.mouse;\n\n    // Initialize captors:\n    this.captors = [];\n    a = this.options.captors || [sigma.captors.mouse, sigma.captors.touch];\n    for (i = 0, l = a.length; i < l; i++) {\n      fn = typeof a[i] === 'function' ? a[i] : sigma.captors[a[i]];\n      this.captors.push(\n        new fn(\n          this.domElements.mouse,\n          this.camera,\n          this.settings\n        )\n      );\n    }\n\n    // Deal with sigma events:\n    sigma.misc.bindEvents.call(this, this.options.prefix);\n    sigma.misc.drawHovers.call(this, this.options.prefix);\n\n    this.resize(false);\n  };\n\n\n\n\n  /**\n   * This method renders the graph on the canvases.\n   *\n   * @param  {?object}                options Eventually an object of options.\n   * @return {sigma.renderers.canvas}         Returns the instance itself.\n   */\n  sigma.renderers.canvas.prototype.render = function(options) {\n    options = options || {};\n\n    var a,\n        i,\n        k,\n        l,\n        o,\n        id,\n        end,\n        job,\n        start,\n        edges,\n        renderers,\n        rendererType,\n        batchSize,\n        tempGCO,\n        index = {},\n        graph = this.graph,\n        nodes = this.graph.nodes,\n        prefix = this.options.prefix || '',\n        drawEdges = this.settings(options, 'drawEdges'),\n        drawNodes = this.settings(options, 'drawNodes'),\n        drawLabels = this.settings(options, 'drawLabels'),\n        drawEdgeLabels = this.settings(options, 'drawEdgeLabels'),\n        embedSettings = this.settings.embedObjects(options, {\n          prefix: this.options.prefix\n        });\n\n    // Call the resize function:\n    this.resize(false);\n\n    // Check the 'hideEdgesOnMove' setting:\n    if (this.settings(options, 'hideEdgesOnMove'))\n      if (this.camera.isAnimated || this.camera.isMoving)\n        drawEdges = false;\n\n    // Apply the camera's view:\n    this.camera.applyView(\n      undefined,\n      this.options.prefix,\n      {\n        width: this.width,\n        height: this.height\n      }\n    );\n\n    // Clear canvases:\n    this.clear();\n\n    // Kill running jobs:\n    for (k in this.jobs)\n      if (conrad.hasJob(k))\n        conrad.killJob(k);\n\n    // Find which nodes are on screen:\n    this.edgesOnScreen = [];\n    this.nodesOnScreen = this.camera.quadtree.area(\n      this.camera.getRectangle(this.width, this.height)\n    );\n\n    for (a = this.nodesOnScreen, i = 0, l = a.length; i < l; i++)\n      index[a[i].id] = a[i];\n\n    // Draw edges:\n    // - If settings('batchEdgesDrawing') is true, the edges are displayed per\n    //   batches. If not, they are drawn in one frame.\n    if (drawEdges) {\n      // First, let's identify which edges to draw. To do this, we just keep\n      // every edges that have at least one extremity displayed according to\n      // the quadtree and the \"hidden\" attribute. We also do not keep hidden\n      // edges.\n      for (a = graph.edges(), i = 0, l = a.length; i < l; i++) {\n        o = a[i];\n        if (\n          (index[o.source] || index[o.target]) &&\n          (!o.hidden && !nodes(o.source).hidden && !nodes(o.target).hidden)\n        )\n          this.edgesOnScreen.push(o);\n      }\n\n      // If the \"batchEdgesDrawing\" settings is true, edges are batched:\n      if (this.settings(options, 'batchEdgesDrawing')) {\n        id = 'edges_' + this.conradId;\n        batchSize = embedSettings('canvasEdgesBatchSize');\n\n        edges = this.edgesOnScreen;\n        l = edges.length;\n\n        start = 0;\n        end = Math.min(edges.length, start + batchSize);\n\n        job = function() {\n          tempGCO = this.contexts.edges.globalCompositeOperation;\n          this.contexts.edges.globalCompositeOperation = 'destination-over';\n\n          renderers = sigma.canvas.edges;\n          for (i = start; i < end; i++) {\n            o = edges[i];\n            (renderers[\n              o.type || this.settings(options, 'defaultEdgeType')\n            ] || renderers.def)(\n              o,\n              graph.nodes(o.source),\n              graph.nodes(o.target),\n              this.contexts.edges,\n              embedSettings\n            );\n          }\n\n          // Draw edge labels:\n          if (drawEdgeLabels) {\n            renderers = sigma.canvas.edges.labels;\n            for (i = start; i < end; i++) {\n              o = edges[i];\n              if (!o.hidden)\n                (renderers[\n                  o.type || this.settings(options, 'defaultEdgeType')\n                ] || renderers.def)(\n                  o,\n                  graph.nodes(o.source),\n                  graph.nodes(o.target),\n                  this.contexts.labels,\n                  embedSettings\n                );\n            }\n          }\n\n          // Restore original globalCompositeOperation:\n          this.contexts.edges.globalCompositeOperation = tempGCO;\n\n          // Catch job's end:\n          if (end === edges.length) {\n            delete this.jobs[id];\n            return false;\n          }\n\n          start = end + 1;\n          end = Math.min(edges.length, start + batchSize);\n          return true;\n        };\n\n        this.jobs[id] = job;\n        conrad.addJob(id, job.bind(this));\n\n      // If not, they are drawn in one frame:\n      } else {\n        renderers = sigma.canvas.edges;\n        for (a = this.edgesOnScreen, i = 0, l = a.length; i < l; i++) {\n          o = a[i];\n          (renderers[\n            o.type || this.settings(options, 'defaultEdgeType')\n          ] || renderers.def)(\n            o,\n            graph.nodes(o.source),\n            graph.nodes(o.target),\n            this.contexts.edges,\n            embedSettings\n          );\n        }\n\n        // Draw edge labels:\n        // - No batching\n        if (drawEdgeLabels) {\n          renderers = sigma.canvas.edges.labels;\n          for (a = this.edgesOnScreen, i = 0, l = a.length; i < l; i++)\n            if (!a[i].hidden)\n              (renderers[\n                a[i].type || this.settings(options, 'defaultEdgeType')\n              ] || renderers.def)(\n                a[i],\n                graph.nodes(a[i].source),\n                graph.nodes(a[i].target),\n                this.contexts.labels,\n                embedSettings\n              );\n        }\n      }\n    }\n\n    // Draw nodes:\n    // - No batching\n    if (drawNodes) {\n      renderers = sigma.canvas.nodes;\n      for (a = this.nodesOnScreen, i = 0, l = a.length; i < l; i++)\n        if (!a[i].hidden)\n          (renderers[\n            a[i].type || this.settings(options, 'defaultNodeType')\n          ] || renderers.def)(\n            a[i],\n            this.contexts.nodes,\n            embedSettings\n          );\n    }\n\n    // Draw labels:\n    // - No batching\n    if (drawLabels) {\n      renderers = sigma.canvas.labels;\n      for (a = this.nodesOnScreen, i = 0, l = a.length; i < l; i++)\n        if (!a[i].hidden)\n          (renderers[\n            a[i].type || this.settings(options, 'defaultNodeType')\n          ] || renderers.def)(\n            a[i],\n            this.contexts.labels,\n            embedSettings\n          );\n    }\n\n    this.dispatchEvent('render');\n\n    return this;\n  };\n\n  /**\n   * This method creates a DOM element of the specified type, switches its\n   * position to \"absolute\", references it to the domElements attribute, and\n   * finally appends it to the container.\n   *\n   * @param  {string} tag The label tag.\n   * @param  {string} id  The id of the element (to store it in \"domElements\").\n   */\n  sigma.renderers.canvas.prototype.initDOM = function(tag, id) {\n    var dom = document.createElement(tag);\n\n    dom.style.position = 'absolute';\n    dom.setAttribute('class', 'sigma-' + id);\n\n    this.domElements[id] = dom;\n    this.container.appendChild(dom);\n\n    if (tag.toLowerCase() === 'canvas')\n      this.contexts[id] = dom.getContext('2d');\n  };\n\n  /**\n   * This method resizes each DOM elements in the container and stores the new\n   * dimensions. Then, it renders the graph.\n   *\n   * @param  {?number}                width  The new width of the container.\n   * @param  {?number}                height The new height of the container.\n   * @return {sigma.renderers.canvas}        Returns the instance itself.\n   */\n  sigma.renderers.canvas.prototype.resize = function(w, h) {\n    var k,\n        oldWidth = this.width,\n        oldHeight = this.height,\n        pixelRatio = sigma.utils.getPixelRatio();\n\n    if (w !== undefined && h !== undefined) {\n      this.width = w;\n      this.height = h;\n    } else {\n      this.width = this.container.offsetWidth;\n      this.height = this.container.offsetHeight;\n\n      w = this.width;\n      h = this.height;\n    }\n\n    if (oldWidth !== this.width || oldHeight !== this.height) {\n      for (k in this.domElements) {\n        this.domElements[k].style.width = w + 'px';\n        this.domElements[k].style.height = h + 'px';\n\n        if (this.domElements[k].tagName.toLowerCase() === 'canvas') {\n          this.domElements[k].setAttribute('width', (w * pixelRatio) + 'px');\n          this.domElements[k].setAttribute('height', (h * pixelRatio) + 'px');\n\n          if (pixelRatio !== 1)\n            this.contexts[k].scale(pixelRatio, pixelRatio);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * This method clears each canvas.\n   *\n   * @return {sigma.renderers.canvas} Returns the instance itself.\n   */\n  sigma.renderers.canvas.prototype.clear = function() {\n    for (var k in this.contexts) {\n      this.contexts[k].clearRect(0, 0, this.width, this.height);\n    }\n\n    return this;\n  };\n\n  /**\n   * This method kills contexts and other attributes.\n   */\n  sigma.renderers.canvas.prototype.kill = function() {\n    var k,\n        captor;\n\n    // Kill captors:\n    while ((captor = this.captors.pop()))\n      captor.kill();\n    delete this.captors;\n\n    // Kill contexts:\n    for (k in this.domElements) {\n      this.domElements[k].parentNode.removeChild(this.domElements[k]);\n      delete this.domElements[k];\n      delete this.contexts[k];\n    }\n    delete this.domElements;\n    delete this.contexts;\n  };\n\n\n\n\n  /**\n   * The labels, nodes and edges renderers are stored in the three following\n   * objects. When an element is drawn, its type will be checked and if a\n   * renderer with the same name exists, it will be used. If not found, the\n   * default renderer will be used instead.\n   *\n   * They are stored in different files, in the \"./canvas\" folder.\n   */\n  sigma.utils.pkg('sigma.canvas.nodes');\n  sigma.utils.pkg('sigma.canvas.edges');\n  sigma.utils.pkg('sigma.canvas.labels');\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 69:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  var __instances = {};\n\n  /**\n   * This is the sigma instances constructor. One instance of sigma represent\n   * one graph. It is possible to represent this grapĥ with several renderers\n   * at the same time. By default, the default renderer (WebGL + Canvas\n   * polyfill) will be used as the only renderer, with the container specified\n   * in the configuration.\n   *\n   * @param  {?*}    conf The configuration of the instance. There are a lot of\n   *                      different recognized forms to instantiate sigma, check\n   *                      example files, documentation in this file and unit\n   *                      tests to know more.\n   * @return {sigma}      The fresh new sigma instance.\n   *\n   * Instanciating sigma:\n   * ********************\n   * If no parameter is given to the constructor, the instance will be created\n   * without any renderer or camera. It will just instantiate the graph, and\n   * other modules will have to be instantiated through the public methods,\n   * like \"addRenderer\" etc:\n   *\n   *  > s0 = new sigma();\n   *  > s0.addRenderer({\n   *  >   type: 'canvas',\n   *  >   container: 'my-container-id'\n   *  > });\n   *\n   * In most of the cases, sigma will simply be used with the default renderer.\n   * Then, since the only required parameter is the DOM container, there are\n   * some simpler way to call the constructor. The four following calls do the\n   * exact same things:\n   *\n   *  > s1 = new sigma('my-container-id');\n   *  > s2 = new sigma(document.getElementById('my-container-id'));\n   *  > s3 = new sigma({\n   *  >   container: document.getElementById('my-container-id')\n   *  > });\n   *  > s4 = new sigma({\n   *  >   renderers: [{\n   *  >     container: document.getElementById('my-container-id')\n   *  >   }]\n   *  > });\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters, when calling the\n   * constructor with to top level configuration object (fourth case in the\n   * previous examples):\n   *\n   *   {?string} id        The id of the instance. It will be generated\n   *                       automatically if not specified.\n   *   {?array}  renderers An array containing objects describing renderers.\n   *   {?object} graph     An object containing an array of nodes and an array\n   *                       of edges, to avoid having to add them by hand later.\n   *   {?object} settings  An object containing instance specific settings that\n   *                       will override the default ones defined in the object\n   *                       sigma.settings.\n   */\n  var sigma = function(conf) {\n    // Local variables:\n    // ****************\n    var i,\n        l,\n        a,\n        c,\n        o,\n        id;\n\n    sigma.classes.dispatcher.extend(this);\n\n    // Private attributes:\n    // *******************\n    var _self = this,\n        _conf = conf || {};\n\n    // Little shortcut:\n    // ****************\n    // The configuration is supposed to have a list of the configuration\n    // objects for each renderer.\n    //  - If there are no configuration at all, then nothing is done.\n    //  - If there are no renderer list, the given configuration object will be\n    //    considered as describing the first and only renderer.\n    //  - If there are no renderer list nor \"container\" object, it will be\n    //    considered as the container itself (a DOM element).\n    //  - If the argument passed to sigma() is a string, it will be considered\n    //    as the ID of the DOM container.\n    if (\n      typeof _conf === 'string' ||\n      _conf instanceof HTMLElement\n    )\n      _conf = {\n        renderers: [_conf]\n      };\n    else if (Object.prototype.toString.call(_conf) === '[object Array]')\n      _conf = {\n        renderers: _conf\n      };\n\n    // Also check \"renderer\" and \"container\" keys:\n    o = _conf.renderers || _conf.renderer || _conf.container;\n    if (!_conf.renderers || _conf.renderers.length === 0)\n      if (\n        typeof o === 'string' ||\n        o instanceof HTMLElement ||\n        (typeof o === 'object' && 'container' in o)\n      )\n        _conf.renderers = [o];\n\n    // Recense the instance:\n    if (_conf.id) {\n      if (__instances[_conf.id])\n        throw 'sigma: Instance \"' + _conf.id + '\" already exists.';\n      Object.defineProperty(this, 'id', {\n        value: _conf.id\n      });\n    } else {\n      id = 0;\n      while (__instances[id])\n        id++;\n      Object.defineProperty(this, 'id', {\n        value: '' + id\n      });\n    }\n    __instances[this.id] = this;\n\n    // Initialize settings function:\n    this.settings = new sigma.classes.configurable(\n      sigma.settings,\n      _conf.settings || {}\n    );\n\n    // Initialize locked attributes:\n    Object.defineProperty(this, 'graph', {\n      value: new sigma.classes.graph(this.settings),\n      configurable: true\n    });\n    Object.defineProperty(this, 'middlewares', {\n      value: [],\n      configurable: true\n    });\n    Object.defineProperty(this, 'cameras', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'renderers', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'renderersPerCamera', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'cameraFrames', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'camera', {\n      get: function() {\n        return this.cameras[0];\n      }\n    });\n    Object.defineProperty(this, 'events', {\n      value: [\n        'click',\n        'rightClick',\n        'clickStage',\n        'doubleClickStage',\n        'rightClickStage',\n        'clickNode',\n        'clickNodes',\n        'doubleClickNode',\n        'doubleClickNodes',\n        'rightClickNode',\n        'rightClickNodes',\n        'overNode',\n        'overNodes',\n        'outNode',\n        'outNodes',\n        'downNode',\n        'downNodes',\n        'upNode',\n        'upNodes'\n      ],\n      configurable: true\n    });\n\n    // Add a custom handler, to redispatch events from renderers:\n    this._handler = (function(e) {\n      var k,\n          data = {};\n\n      for (k in e.data)\n        data[k] = e.data[k];\n\n      data.renderer = e.target;\n      this.dispatchEvent(e.type, data);\n    }).bind(this);\n\n    // Initialize renderers:\n    a = _conf.renderers || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.addRenderer(a[i]);\n\n    // Initialize middlewares:\n    a = _conf.middlewares || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.middlewares.push(\n        typeof a[i] === 'string' ?\n          sigma.middlewares[a[i]] :\n          a[i]\n      );\n\n    // Check if there is already a graph to fill in:\n    if (typeof _conf.graph === 'object' && _conf.graph) {\n      this.graph.read(_conf.graph);\n\n      // If a graph is given to the to the instance, the \"refresh\" method is\n      // directly called:\n      this.refresh();\n    }\n\n    // Deal with resize:\n    window.addEventListener('resize', function() {\n      if (_self.settings)\n        _self.refresh();\n    });\n  };\n\n\n\n\n  /**\n   * This methods will instantiate and reference a new camera. If no id is\n   * specified, then an automatic id will be generated.\n   *\n   * @param  {?string}              id Eventually the camera id.\n   * @return {sigma.classes.camera}    The fresh new camera instance.\n   */\n  sigma.prototype.addCamera = function(id) {\n    var self = this,\n        camera;\n\n    if (!arguments.length) {\n      id = 0;\n      while (this.cameras['' + id])\n        id++;\n      id = '' + id;\n    }\n\n    if (this.cameras[id])\n      throw 'sigma.addCamera: The camera \"' + id + '\" already exists.';\n\n    camera = new sigma.classes.camera(id, this.graph, this.settings);\n    this.cameras[id] = camera;\n\n    // Add a quadtree to the camera:\n    camera.quadtree = new sigma.classes.quad();\n\n    // Add an edgequadtree to the camera:\n    if (sigma.classes.edgequad !== undefined) {\n      camera.edgequadtree = new sigma.classes.edgequad();\n    }\n\n    camera.bind('coordinatesUpdated', function(e) {\n      self.renderCamera(camera, camera.isAnimated);\n    });\n\n    this.renderersPerCamera[id] = [];\n\n    return camera;\n  };\n\n  /**\n   * This method kills a camera, and every renderer attached to it.\n   *\n   * @param  {string|camera} v The camera to kill or its ID.\n   * @return {sigma}           Returns the instance.\n   */\n  sigma.prototype.killCamera = function(v) {\n    v = typeof v === 'string' ? this.cameras[v] : v;\n\n    if (!v)\n      throw 'sigma.killCamera: The camera is undefined.';\n\n    var i,\n        l,\n        a = this.renderersPerCamera[v.id];\n\n    for (l = a.length, i = l - 1; i >= 0; i--)\n      this.killRenderer(a[i]);\n\n    delete this.renderersPerCamera[v.id];\n    delete this.cameraFrames[v.id];\n    delete this.cameras[v.id];\n\n    if (v.kill)\n      v.kill();\n\n    return this;\n  };\n\n  /**\n   * This methods will instantiate and reference a new renderer. The \"type\"\n   * argument can be the constructor or its name in the \"sigma.renderers\"\n   * package. If no type is specified, then \"sigma.renderers.def\" will be used.\n   * If no id is specified, then an automatic id will be generated.\n   *\n   * @param  {?object}  options Eventually some options to give to the renderer\n   *                            constructor.\n   * @return {renderer}         The fresh new renderer instance.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the \"options\"\n   * object:\n   *\n   *   {?string}            id     Eventually the renderer id.\n   *   {?(function|string)} type   Eventually the renderer constructor or its\n   *                               name in the \"sigma.renderers\" package.\n   *   {?(camera|string)}   camera Eventually the renderer camera or its\n   *                               id.\n   */\n  sigma.prototype.addRenderer = function(options) {\n    var id,\n        fn,\n        camera,\n        renderer,\n        o = options || {};\n\n    // Polymorphism:\n    if (typeof o === 'string')\n      o = {\n        container: document.getElementById(o)\n      };\n    else if (o instanceof HTMLElement)\n      o = {\n        container: o\n      };\n\n    // If the container still is a string, we get it by id\n    if (typeof o.container === 'string')\n      o.container = document.getElementById(o.container);\n\n    // Reference the new renderer:\n    if (!('id' in o)) {\n      id = 0;\n      while (this.renderers['' + id])\n        id++;\n      id = '' + id;\n    } else\n      id = o.id;\n\n    if (this.renderers[id])\n      throw 'sigma.addRenderer: The renderer \"' + id + '\" already exists.';\n\n    // Find the good constructor:\n    fn = typeof o.type === 'function' ? o.type : sigma.renderers[o.type];\n    fn = fn || sigma.renderers.def;\n\n    // Find the good camera:\n    camera = 'camera' in o ?\n      (\n        o.camera instanceof sigma.classes.camera ?\n          o.camera :\n          this.cameras[o.camera] || this.addCamera(o.camera)\n      ) :\n      this.addCamera();\n\n    if (this.cameras[camera.id] !== camera)\n      throw 'sigma.addRenderer: The camera is not properly referenced.';\n\n    // Instantiate:\n    renderer = new fn(this.graph, camera, this.settings, o);\n    this.renderers[id] = renderer;\n    Object.defineProperty(renderer, 'id', {\n      value: id\n    });\n\n    // Bind events:\n    if (renderer.bind)\n      renderer.bind(\n        [\n          'click',\n          'rightClick',\n          'clickStage',\n          'doubleClickStage',\n          'rightClickStage',\n          'clickNode',\n          'clickNodes',\n          'clickEdge',\n          'clickEdges',\n          'doubleClickNode',\n          'doubleClickNodes',\n          'doubleClickEdge',\n          'doubleClickEdges',\n          'rightClickNode',\n          'rightClickNodes',\n          'rightClickEdge',\n          'rightClickEdges',\n          'overNode',\n          'overNodes',\n          'overEdge',\n          'overEdges',\n          'outNode',\n          'outNodes',\n          'outEdge',\n          'outEdges',\n          'downNode',\n          'downNodes',\n          'downEdge',\n          'downEdges',\n          'upNode',\n          'upNodes',\n          'upEdge',\n          'upEdges'\n        ],\n        this._handler\n      );\n\n    // Reference the renderer by its camera:\n    this.renderersPerCamera[camera.id].push(renderer);\n\n    return renderer;\n  };\n\n  /**\n   * This method kills a renderer.\n   *\n   * @param  {string|renderer} v The renderer to kill or its ID.\n   * @return {sigma}             Returns the instance.\n   */\n  sigma.prototype.killRenderer = function(v) {\n    v = typeof v === 'string' ? this.renderers[v] : v;\n\n    if (!v)\n      throw 'sigma.killRenderer: The renderer is undefined.';\n\n    var a = this.renderersPerCamera[v.camera.id],\n        i = a.indexOf(v);\n\n    if (i >= 0)\n      a.splice(i, 1);\n\n    if (v.kill)\n      v.kill();\n\n    delete this.renderers[v.id];\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method calls the \"render\" method of each renderer, with the same\n   * arguments than the \"render\" method, but will also check if the renderer\n   * has a \"process\" method, and call it if it exists.\n   *\n   * It is useful for quadtrees or WebGL processing, for instance.\n   *\n   * @param  {?object}  options Eventually some options to give to the refresh\n   *                            method.\n   * @return {sigma}            Returns the instance itself.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the \"options\"\n   * object:\n   *\n   *   {?boolean} skipIndexation A flag specifying wether or not the refresh\n   *                             function should reindex the graph in the\n   *                             quadtrees or not (default: false).\n   */\n  sigma.prototype.refresh = function(options) {\n    var i,\n        l,\n        k,\n        a,\n        c,\n        bounds,\n        prefix = 0;\n\n    options = options || {};\n\n    // Call each middleware:\n    a = this.middlewares || [];\n    for (i = 0, l = a.length; i < l; i++)\n      a[i].call(\n        this,\n        (i === 0) ? '' : 'tmp' + prefix + ':',\n        (i === l - 1) ? 'ready:' : ('tmp' + (++prefix) + ':')\n      );\n\n    // Then, for each camera, call the \"rescale\" middleware, unless the\n    // settings specify not to:\n    for (k in this.cameras) {\n      c = this.cameras[k];\n      if (\n        c.settings('autoRescale') &&\n        this.renderersPerCamera[c.id] &&\n        this.renderersPerCamera[c.id].length\n      )\n        sigma.middlewares.rescale.call(\n          this,\n          a.length ? 'ready:' : '',\n          c.readPrefix,\n          {\n            width: this.renderersPerCamera[c.id][0].width,\n            height: this.renderersPerCamera[c.id][0].height\n          }\n        );\n      else\n        sigma.middlewares.copy.call(\n          this,\n          a.length ? 'ready:' : '',\n          c.readPrefix\n        );\n\n      if (!options.skipIndexation) {\n        // Find graph boundaries:\n        bounds = sigma.utils.getBoundaries(\n          this.graph,\n          c.readPrefix\n        );\n\n        // Refresh quadtree:\n        c.quadtree.index(this.graph.nodes(), {\n          prefix: c.readPrefix,\n          bounds: {\n            x: bounds.minX,\n            y: bounds.minY,\n            width: bounds.maxX - bounds.minX,\n            height: bounds.maxY - bounds.minY\n          }\n        });\n\n        // Refresh edgequadtree:\n        if (\n          c.edgequadtree !== undefined &&\n          c.settings('drawEdges') &&\n          c.settings('enableEdgeHovering')\n        ) {\n          c.edgequadtree.index(this.graph, {\n            prefix: c.readPrefix,\n            bounds: {\n              x: bounds.minX,\n              y: bounds.minY,\n              width: bounds.maxX - bounds.minX,\n              height: bounds.maxY - bounds.minY\n            }\n          });\n        }\n      }\n    }\n\n    // Call each renderer:\n    a = Object.keys(this.renderers);\n    for (i = 0, l = a.length; i < l; i++)\n      if (this.renderers[a[i]].process) {\n        if (this.settings('skipErrors'))\n          try {\n            this.renderers[a[i]].process();\n          } catch (e) {\n            console.log(\n              'Warning: The renderer \"' + a[i] + '\" crashed on \".process()\"'\n            );\n          }\n        else\n          this.renderers[a[i]].process();\n      }\n\n    this.render();\n\n    return this;\n  };\n\n  /**\n   * This method calls the \"render\" method of each renderer.\n   *\n   * @return {sigma} Returns the instance itself.\n   */\n  sigma.prototype.render = function() {\n    var i,\n        l,\n        a,\n        prefix = 0;\n\n    // Call each renderer:\n    a = Object.keys(this.renderers);\n    for (i = 0, l = a.length; i < l; i++)\n      if (this.settings('skipErrors'))\n        try {\n          this.renderers[a[i]].render();\n        } catch (e) {\n          if (this.settings('verbose'))\n            console.log(\n              'Warning: The renderer \"' + a[i] + '\" crashed on \".render()\"'\n            );\n        }\n      else\n        this.renderers[a[i]].render();\n\n    return this;\n  };\n\n  /**\n   * This method calls the \"render\" method of each renderer that is bound to\n   * the specified camera. To improve the performances, if this method is\n   * called too often, the number of effective renderings is limitated to one\n   * per frame, unless you are using the \"force\" flag.\n   *\n   * @param  {sigma.classes.camera} camera The camera to render.\n   * @param  {?boolean}             force  If true, will render the camera\n   *                                       directly.\n   * @return {sigma}                       Returns the instance itself.\n   */\n  sigma.prototype.renderCamera = function(camera, force) {\n    var i,\n        l,\n        a,\n        self = this;\n\n    if (force) {\n      a = this.renderersPerCamera[camera.id];\n      for (i = 0, l = a.length; i < l; i++)\n        if (this.settings('skipErrors'))\n          try {\n            a[i].render();\n          } catch (e) {\n            if (this.settings('verbose'))\n              console.log(\n                'Warning: The renderer \"' + a[i].id + '\" crashed on \".render()\"'\n              );\n          }\n        else\n          a[i].render();\n    } else {\n      if (!this.cameraFrames[camera.id]) {\n        a = this.renderersPerCamera[camera.id];\n        for (i = 0, l = a.length; i < l; i++)\n          if (this.settings('skipErrors'))\n            try {\n              a[i].render();\n            } catch (e) {\n              if (this.settings('verbose'))\n                console.log(\n                  'Warning: The renderer \"' +\n                    a[i].id +\n                    '\" crashed on \".render()\"'\n                );\n            }\n          else\n            a[i].render();\n\n        this.cameraFrames[camera.id] = requestAnimationFrame(function() {\n          delete self.cameraFrames[camera.id];\n        });\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * This method calls the \"kill\" method of each module and destroys any\n   * reference from the instance.\n   */\n  sigma.prototype.kill = function() {\n    var k;\n\n    // Dispatching event\n    this.dispatchEvent('kill');\n\n    // Kill graph:\n    this.graph.kill();\n\n    // Kill middlewares:\n    delete this.middlewares;\n\n    // Kill each renderer:\n    for (k in this.renderers)\n      this.killRenderer(this.renderers[k]);\n\n    // Kill each camera:\n    for (k in this.cameras)\n      this.killCamera(this.cameras[k]);\n\n    delete this.renderers;\n    delete this.cameras;\n\n    // Kill everything else:\n    for (k in this)\n      if (this.hasOwnProperty(k))\n        delete this[k];\n\n    delete __instances[this.id];\n  };\n\n\n\n\n  /**\n   * Returns a clone of the instances object or a specific running instance.\n   *\n   * @param  {?string} id Eventually an instance ID.\n   * @return {object}     The related instance or a clone of the instances\n   *                      object.\n   */\n  sigma.instances = function(id) {\n    return arguments.length ?\n      __instances[id] :\n      sigma.utils.extend({}, __instances);\n  };\n\n\n\n  /**\n   * The current version of sigma:\n   */\n  sigma.version = '1.2.0';\n\n\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined')\n    throw 'An object called sigma is already in the global scope.';\n\n  this.sigma = sigma;\n\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 70:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Packages initialization:\n  sigma.utils.pkg('sigma.settings');\n\n  var settings = {\n    /**\n     * GRAPH SETTINGS:\n     * ***************\n     */\n    // {boolean} Indicates if the data have to be cloned in methods to add\n    //           nodes or edges.\n    clone: true,\n    // {boolean} Indicates if nodes \"id\" values and edges \"id\", \"source\" and\n    //           \"target\" values must be set as immutable.\n    immutable: true,\n    // {boolean} Indicates if sigma can log its errors and warnings.\n    verbose: false,\n\n\n    /**\n     * RENDERERS SETTINGS:\n     * *******************\n     */\n    // {string}\n    classPrefix: 'sigma',\n    // {string}\n    defaultNodeType: 'def',\n    // {string}\n    defaultEdgeType: 'def',\n    // {string}\n    defaultLabelColor: '#000',\n    // {string}\n    defaultEdgeColor: '#000',\n    // {string}\n    defaultNodeColor: '#000',\n    // {string}\n    defaultLabelSize: 14,\n    // {string} Indicates how to choose the edges color. Available values:\n    //          \"source\", \"target\", \"default\"\n    edgeColor: 'source',\n    // {number} Defines the minimal edge's arrow display size.\n    minArrowSize: 0,\n    // {string}\n    font: 'arial',\n    // {string} Example: 'bold'\n    fontStyle: '',\n    // {string} Indicates how to choose the labels color. Available values:\n    //          \"node\", \"default\"\n    labelColor: 'default',\n    // {string} Indicates how to choose the labels size. Available values:\n    //          \"fixed\", \"proportional\"\n    labelSize: 'fixed',\n    // {string} The ratio between the font size of the label and the node size.\n    labelSizeRatio: 1,\n    // {number} The minimum size a node must have to see its label displayed.\n    labelThreshold: 8,\n    // {number} The oversampling factor used in WebGL renderer.\n    webglOversamplingRatio: 2,\n    // {number} The size of the border of hovered nodes.\n    borderSize: 0,\n    // {number} The default hovered node border's color.\n    defaultNodeBorderColor: '#000',\n    // {number} The hovered node's label font. If not specified, will heritate\n    //          the \"font\" value.\n    hoverFont: '',\n    // {boolean} If true, then only one node can be hovered at a time.\n    singleHover: true,\n    // {string} Example: 'bold'\n    hoverFontStyle: '',\n    // {string} Indicates how to choose the hovered nodes shadow color.\n    //          Available values: \"node\", \"default\"\n    labelHoverShadow: 'default',\n    // {string}\n    labelHoverShadowColor: '#000',\n    // {string} Indicates how to choose the hovered nodes color.\n    //          Available values: \"node\", \"default\"\n    nodeHoverColor: 'node',\n    // {string}\n    defaultNodeHoverColor: '#000',\n    // {string} Indicates how to choose the hovered nodes background color.\n    //          Available values: \"node\", \"default\"\n    labelHoverBGColor: 'default',\n    // {string}\n    defaultHoverLabelBGColor: '#fff',\n    // {string} Indicates how to choose the hovered labels color.\n    //          Available values: \"node\", \"default\"\n    labelHoverColor: 'default',\n    // {string}\n    defaultLabelHoverColor: '#000',\n    // {string} Indicates how to choose the edges hover color. Available values:\n    //          \"edge\", \"default\"\n    edgeHoverColor: 'edge',\n    // {number} The size multiplicator of hovered edges.\n    edgeHoverSizeRatio: 1,\n    // {string}\n    defaultEdgeHoverColor: '#000',\n    // {boolean} Indicates if the edge extremities must be hovered when the\n    //           edge is hovered.\n    edgeHoverExtremities: false,\n    // {booleans} The different drawing modes:\n    //           false: Layered not displayed.\n    //           true: Layered displayed.\n    drawEdges: true,\n    drawNodes: true,\n    drawLabels: true,\n    drawEdgeLabels: false,\n    // {boolean} Indicates if the edges must be drawn in several frames or in\n    //           one frame, as the nodes and labels are drawn.\n    batchEdgesDrawing: false,\n    // {boolean} Indicates if the edges must be hidden during dragging and\n    //           animations.\n    hideEdgesOnMove: false,\n    // {numbers} The different batch sizes, when elements are displayed in\n    //           several frames.\n    canvasEdgesBatchSize: 500,\n    webglEdgesBatchSize: 1000,\n\n\n\n\n    /**\n     * RESCALE SETTINGS:\n     * *****************\n     */\n    // {string} Indicates of to scale the graph relatively to its container.\n    //          Available values: \"inside\", \"outside\"\n    scalingMode: 'inside',\n    // {number} The margin to keep around the graph.\n    sideMargin: 0,\n    // {number} Determine the size of the smallest and the biggest node / edges\n    //          on the screen. This mapping makes easier to display the graph,\n    //          avoiding too big nodes that take half of the screen, or too\n    //          small ones that are not readable. If the two parameters are\n    //          equals, then the minimal display size will be 0. And if they\n    //          are both equal to 0, then there is no mapping, and the radius\n    //          of the nodes will be their size.\n    minEdgeSize: 0.5,\n    maxEdgeSize: 1,\n    minNodeSize: 1,\n    maxNodeSize: 8,\n\n\n\n\n    /**\n     * CAPTORS SETTINGS:\n     * *****************\n     */\n    // {boolean}\n    touchEnabled: true,\n    // {boolean}\n    mouseEnabled: true,\n    // {boolean}\n    mouseWheelEnabled: true,\n    // {boolean}\n    doubleClickEnabled: true,\n    // {boolean} Defines whether the custom events such as \"clickNode\" can be\n    //           used.\n    eventsEnabled: true,\n    // {number} Defines by how much multiplicating the zooming level when the\n    //          user zooms with the mouse-wheel.\n    zoomingRatio: 1.7,\n    // {number} Defines by how much multiplicating the zooming level when the\n    //          user zooms by double clicking.\n    doubleClickZoomingRatio: 2.2,\n    // {number} The minimum zooming level.\n    zoomMin: 0.0625,\n    // {number} The maximum zooming level.\n    zoomMax: 2,\n    // {number} The duration of animations following a mouse scrolling.\n    mouseZoomDuration: 200,\n    // {number} The duration of animations following a mouse double click.\n    doubleClickZoomDuration: 200,\n    // {number} The duration of animations following a mouse dropping.\n    mouseInertiaDuration: 200,\n    // {number} The inertia power (mouse captor).\n    mouseInertiaRatio: 3,\n    // {number} The duration of animations following a touch dropping.\n    touchInertiaDuration: 200,\n    // {number} The inertia power (touch captor).\n    touchInertiaRatio: 3,\n    // {number} The maximum time between two clicks to make it a double click.\n    doubleClickTimeout: 300,\n    // {number} The maximum time between two taps to make it a double tap.\n    doubleTapTimeout: 300,\n    // {number} The maximum time of dragging to trigger intertia.\n    dragTimeout: 200,\n\n\n\n\n    /**\n     * GLOBAL SETTINGS:\n     * ****************\n     */\n    // {boolean} Determines whether the instance has to refresh itself\n    //           automatically when a \"resize\" event is dispatched from the\n    //           window object.\n    autoResize: true,\n    // {boolean} Determines whether the \"rescale\" middleware has to be called\n    //           automatically for each camera on refresh.\n    autoRescale: true,\n    // {boolean} If set to false, the camera method \"goTo\" will basically do\n    //           nothing.\n    enableCamera: true,\n    // {boolean} If set to false, the nodes cannot be hovered.\n    enableHovering: true,\n    // {boolean} If set to true, the edges can be hovered.\n    enableEdgeHovering: false,\n    // {number} The size of the area around the edges to activate hovering.\n    edgeHoverPrecision: 5,\n    // {boolean} If set to true, the rescale middleware will ignore node sizes\n    //           to determine the graphs boundings.\n    rescaleIgnoreSize: false,\n    // {boolean} Determines if the core has to try to catch errors on\n    //           rendering.\n    skipErrors: false,\n\n\n\n\n    /**\n     * CAMERA SETTINGS:\n     * ****************\n     */\n    // {number} The power degrees applied to the nodes/edges size relatively to\n    //          the zooming level. Basically:\n    //           > onScreenR = Math.pow(zoom, nodesPowRatio) * R\n    //           > onScreenT = Math.pow(zoom, edgesPowRatio) * T\n    nodesPowRatio: 0.5,\n    edgesPowRatio: 0.5,\n\n\n\n\n    /**\n     * ANIMATIONS SETTINGS:\n     * ********************\n     */\n    // {number} The default animation time.\n    animationsTime: 200\n  };\n\n  // Export the previously designed settings:\n  sigma.settings = sigma.utils.extend(sigma.settings || {}, settings);\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 71:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(global) {\n  'use strict';\n\n  /**\n   * http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n   * requestAnimationFrame polyfill by Erik Möller.\n   * fixes from Paul Irish and Tino Zijdel\n   * MIT license\n   */\n  var x,\n      lastTime = 0,\n      vendors = ['ms', 'moz', 'webkit', 'o'];\n\n  for (x = 0; x < vendors.length && !global.requestAnimationFrame; x++) {\n    global.requestAnimationFrame =\n      global[vendors[x] + 'RequestAnimationFrame'];\n    global.cancelAnimationFrame =\n      global[vendors[x] + 'CancelAnimationFrame'] ||\n      global[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!global.requestAnimationFrame)\n    global.requestAnimationFrame = function(callback, element) {\n      var currTime = new Date().getTime(),\n          timeToCall = Math.max(0, 16 - (currTime - lastTime)),\n          id = global.setTimeout(\n            function() {\n              callback(currTime + timeToCall);\n            },\n            timeToCall\n          );\n\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n  if (!global.cancelAnimationFrame)\n    global.cancelAnimationFrame = function(id) {\n      clearTimeout(id);\n    };\n\n  /**\n   * Function.prototype.bind polyfill found on MDN.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\n   * Public domain\n   */\n  if (!Function.prototype.bind)\n    Function.prototype.bind = function(oThis) {\n      if (typeof this !== 'function')\n        // Closest thing possible to the ECMAScript 5 internal IsCallable\n        // function:\n        throw new TypeError(\n          'Function.prototype.bind - what is trying to be bound is not callable'\n        );\n\n      var aArgs = Array.prototype.slice.call(arguments, 1),\n          fToBind = this,\n          fNOP,\n          fBound;\n\n      fNOP = function() {};\n      fBound = function() {\n        return fToBind.apply(\n          this instanceof fNOP && oThis ?\n            this :\n            oThis,\n          aArgs.concat(Array.prototype.slice.call(arguments))\n        );\n      };\n\n      fNOP.prototype = this.prototype;\n      fBound.prototype = new fNOP();\n\n      return fBound;\n    };\n})(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 72:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  var _root = this;\n\n  // Initialize packages:\n  sigma.utils = sigma.utils || {};\n\n  /**\n   * MISC UTILS:\n   */\n  /**\n   * This function takes any number of objects as arguments, copies from each\n   * of these objects each pair key/value into a new object, and finally\n   * returns this object.\n   *\n   * The arguments are parsed from the last one to the first one, such that\n   * when several objects have keys in common, the \"earliest\" object wins.\n   *\n   * Example:\n   * ********\n   *  > var o1 = {\n   *  >       a: 1,\n   *  >       b: 2,\n   *  >       c: '3'\n   *  >     },\n   *  >     o2 = {\n   *  >       c: '4',\n   *  >       d: [ 5 ]\n   *  >     };\n   *  > sigma.utils.extend(o1, o2);\n   *  > // Returns: {\n   *  > //   a: 1,\n   *  > //   b: 2,\n   *  > //   c: '3',\n   *  > //   d: [ 5 ]\n   *  > // };\n   *\n   * @param  {object+} Any number of objects.\n   * @return {object}  The merged object.\n   */\n  sigma.utils.extend = function() {\n    var i,\n        k,\n        res = {},\n        l = arguments.length;\n\n    for (i = l - 1; i >= 0; i--)\n      for (k in arguments[i])\n        res[k] = arguments[i][k];\n\n    return res;\n  };\n\n  /**\n   * A short \"Date.now()\" polyfill.\n   *\n   * @return {Number} The current time (in ms).\n   */\n  sigma.utils.dateNow = function() {\n    return Date.now ? Date.now() : new Date().getTime();\n  };\n\n  /**\n   * Takes a package name as parameter and checks at each lebel if it exists,\n   * and if it does not, creates it.\n   *\n   * Example:\n   * ********\n   *  > sigma.utils.pkg('a.b.c');\n   *  > a.b.c;\n   *  > // Object {};\n   *  >\n   *  > sigma.utils.pkg('a.b.d');\n   *  > a.b;\n   *  > // Object { c: {}, d: {} };\n   *\n   * @param  {string} pkgName The name of the package to create/find.\n   * @return {object}         The related package.\n   */\n  sigma.utils.pkg = function(pkgName) {\n    return (pkgName || '').split('.').reduce(function(context, objName) {\n      return (objName in context) ?\n        context[objName] :\n        (context[objName] = {});\n    }, _root);\n  };\n\n  /**\n   * Returns a unique incremental number ID.\n   *\n   * Example:\n   * ********\n   *  > sigma.utils.id();\n   *  > // 1;\n   *  >\n   *  > sigma.utils.id();\n   *  > // 2;\n   *  >\n   *  > sigma.utils.id();\n   *  > // 3;\n   *\n   * @param  {string} pkgName The name of the package to create/find.\n   * @return {object}         The related package.\n   */\n  sigma.utils.id = (function() {\n    var i = 0;\n    return function() {\n      return ++i;\n    };\n  })();\n\n  /**\n   * This function takes an hexa color (for instance \"#ffcc00\" or \"#fc0\") or a\n   * rgb / rgba color (like \"rgb(255,255,12)\" or \"rgba(255,255,12,1)\") and\n   * returns an integer equal to \"r * 255 * 255 + g * 255 + b\", to gain some\n   * memory in the data given to WebGL shaders.\n   *\n   * Note that the function actually caches its results for better performance.\n   *\n   * @param  {string} val The hexa or rgba color.\n   * @return {number}     The number value.\n   */\n  var floatColorCache = {};\n\n  sigma.utils.floatColor = function(val) {\n\n    // Is the color already computed?\n    if (floatColorCache[val])\n      return floatColorCache[val];\n\n    var original = val,\n        r = 0,\n        g = 0,\n        b = 0;\n\n    if (val[0] === '#') {\n      val = val.slice(1);\n\n      if (val.length === 3) {\n        r = parseInt(val.charAt(0) + val.charAt(0), 16);\n        g = parseInt(val.charAt(1) + val.charAt(1), 16);\n        b = parseInt(val.charAt(2) + val.charAt(2), 16);\n      }\n      else {\n        r = parseInt(val.charAt(0) + val.charAt(1), 16);\n        g = parseInt(val.charAt(2) + val.charAt(3), 16);\n        b = parseInt(val.charAt(4) + val.charAt(5), 16);\n      }\n    } else if (val.match(/^ *rgba? *\\(/)) {\n      val = val.match(\n        /^ *rgba? *\\( *([0-9]*) *, *([0-9]*) *, *([0-9]*) *(,.*)?\\) *$/\n      );\n      r = +val[1];\n      g = +val[2];\n      b = +val[3];\n    }\n\n    var color = (\n      r * 256 * 256 +\n      g * 256 +\n      b\n    );\n\n    // Caching the color\n    floatColorCache[original] = color;\n\n    return color;\n  };\n\n    /**\n   * Perform a zoom into a camera, with or without animation, to the\n   * coordinates indicated using a specified ratio.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the animation\n   * object:\n   *\n   *   {?number} duration     An amount of time that means the duration of the\n   *                          animation. If this parameter doesn't exist the\n   *                          zoom will be performed without animation.\n   *   {?function} onComplete A function to perform it after the animation. It\n   *                          will be performed even if there is no duration.\n   *\n   * @param {camera}     The camera where perform the zoom.\n   * @param {x}          The X coordiantion where the zoom goes.\n   * @param {y}          The Y coordiantion where the zoom goes.\n   * @param {ratio}      The ratio to apply it to the current camera ratio.\n   * @param {?animation} A dictionary with options for a possible animation.\n   */\n  sigma.utils.zoomTo = function(camera, x, y, ratio, animation) {\n    var settings = camera.settings,\n        count,\n        newRatio,\n        animationSettings,\n        coordinates;\n\n    // Create the newRatio dealing with min / max:\n    newRatio = Math.max(\n      settings('zoomMin'),\n      Math.min(\n        settings('zoomMax'),\n        camera.ratio * ratio\n      )\n    );\n\n    // Check that the new ratio is different from the initial one:\n    if (newRatio !== camera.ratio) {\n      // Create the coordinates variable:\n      ratio = newRatio / camera.ratio;\n      coordinates = {\n        x: x * (1 - ratio) + camera.x,\n        y: y * (1 - ratio) + camera.y,\n        ratio: newRatio\n      };\n\n      if (animation && animation.duration) {\n        // Complete the animation setings:\n        count = sigma.misc.animation.killAll(camera);\n        animation = sigma.utils.extend(\n          animation,\n          {\n            easing: count ? 'quadraticOut' : 'quadraticInOut'\n          }\n        );\n\n        sigma.misc.animation.camera(camera, coordinates, animation);\n      } else {\n        camera.goTo(coordinates);\n        if (animation && animation.onComplete)\n          animation.onComplete();\n      }\n    }\n  };\n\n  /**\n   * Return the control point coordinates for a quadratic bezier curve.\n   *\n   * @param  {number} x1  The X coordinate of the start point.\n   * @param  {number} y1  The Y coordinate of the start point.\n   * @param  {number} x2  The X coordinate of the end point.\n   * @param  {number} y2  The Y coordinate of the end point.\n   * @return {x,y}        The control point coordinates.\n   */\n  sigma.utils.getQuadraticControlPoint = function(x1, y1, x2, y2) {\n    return {\n      x: (x1 + x2) / 2 + (y2 - y1) / 4,\n      y: (y1 + y2) / 2 + (x1 - x2) / 4\n    };\n  };\n\n  /**\n    * Compute the coordinates of the point positioned\n    * at length t in the quadratic bezier curve.\n    *\n    * @param  {number} t  In [0,1] the step percentage to reach\n    *                     the point in the curve from the context point.\n    * @param  {number} x1 The X coordinate of the context point.\n    * @param  {number} y1 The Y coordinate of the context point.\n    * @param  {number} x2 The X coordinate of the ending point.\n    * @param  {number} y2 The Y coordinate of the ending point.\n    * @param  {number} xi The X coordinate of the control point.\n    * @param  {number} yi The Y coordinate of the control point.\n    * @return {object}    {x,y}.\n  */\n  sigma.utils.getPointOnQuadraticCurve = function(t, x1, y1, x2, y2, xi, yi) {\n    // http://stackoverflow.com/a/5634528\n    return {\n      x: Math.pow(1 - t, 2) * x1 + 2 * (1 - t) * t * xi + Math.pow(t, 2) * x2,\n      y: Math.pow(1 - t, 2) * y1 + 2 * (1 - t) * t * yi + Math.pow(t, 2) * y2\n    };\n  };\n\n  /**\n    * Compute the coordinates of the point positioned\n    * at length t in the cubic bezier curve.\n    *\n    * @param  {number} t  In [0,1] the step percentage to reach\n    *                     the point in the curve from the context point.\n    * @param  {number} x1 The X coordinate of the context point.\n    * @param  {number} y1 The Y coordinate of the context point.\n    * @param  {number} x2 The X coordinate of the end point.\n    * @param  {number} y2 The Y coordinate of the end point.\n    * @param  {number} cx The X coordinate of the first control point.\n    * @param  {number} cy The Y coordinate of the first control point.\n    * @param  {number} dx The X coordinate of the second control point.\n    * @param  {number} dy The Y coordinate of the second control point.\n    * @return {object}    {x,y} The point at t.\n  */\n  sigma.utils.getPointOnBezierCurve =\n    function(t, x1, y1, x2, y2, cx, cy, dx, dy) {\n    // http://stackoverflow.com/a/15397596\n    // Blending functions:\n    var B0_t = Math.pow(1 - t, 3),\n        B1_t = 3 * t * Math.pow(1 - t, 2),\n        B2_t = 3 * Math.pow(t, 2) * (1 - t),\n        B3_t = Math.pow(t, 3);\n\n    return {\n      x: (B0_t * x1) + (B1_t * cx) + (B2_t * dx) + (B3_t * x2),\n      y: (B0_t * y1) + (B1_t * cy) + (B2_t * dy) + (B3_t * y2)\n    };\n  };\n\n  /**\n   * Return the coordinates of the two control points for a self loop (i.e.\n   * where the start point is also the end point) computed as a cubic bezier\n   * curve.\n   *\n   * @param  {number} x    The X coordinate of the node.\n   * @param  {number} y    The Y coordinate of the node.\n   * @param  {number} size The node size.\n   * @return {x1,y1,x2,y2} The coordinates of the two control points.\n   */\n  sigma.utils.getSelfLoopControlPoints = function(x , y, size) {\n    return {\n      x1: x - size * 7,\n      y1: y,\n      x2: x,\n      y2: y + size * 7\n    };\n  };\n\n  /**\n   * Return the euclidian distance between two points of a plane\n   * with an orthonormal basis.\n   *\n   * @param  {number} x1  The X coordinate of the first point.\n   * @param  {number} y1  The Y coordinate of the first point.\n   * @param  {number} x2  The X coordinate of the second point.\n   * @param  {number} y2  The Y coordinate of the second point.\n   * @return {number}     The euclidian distance.\n   */\n  sigma.utils.getDistance = function(x0, y0, x1, y1) {\n    return Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n  };\n\n  /**\n   * Return the coordinates of the intersection points of two circles.\n   *\n   * @param  {number} x0  The X coordinate of center location of the first\n   *                      circle.\n   * @param  {number} y0  The Y coordinate of center location of the first\n   *                      circle.\n   * @param  {number} r0  The radius of the first circle.\n   * @param  {number} x1  The X coordinate of center location of the second\n   *                      circle.\n   * @param  {number} y1  The Y coordinate of center location of the second\n   *                      circle.\n   * @param  {number} r1  The radius of the second circle.\n   * @return {xi,yi}      The coordinates of the intersection points.\n   */\n  sigma.utils.getCircleIntersection = function(x0, y0, r0, x1, y1, r1) {\n    // http://stackoverflow.com/a/12219802\n    var a, dx, dy, d, h, rx, ry, x2, y2;\n\n    // dx and dy are the vertical and horizontal distances between the circle\n    // centers:\n    dx = x1 - x0;\n    dy = y1 - y0;\n\n    // Determine the straight-line distance between the centers:\n    d = Math.sqrt((dy * dy) + (dx * dx));\n\n    // Check for solvability:\n    if (d > (r0 + r1)) {\n        // No solution. circles do not intersect.\n        return false;\n    }\n    if (d < Math.abs(r0 - r1)) {\n        // No solution. one circle is contained in the other.\n        return false;\n    }\n\n    //'point 2' is the point where the line through the circle intersection\n    // points crosses the line between the circle centers.\n\n    // Determine the distance from point 0 to point 2:\n    a = ((r0 * r0) - (r1 * r1) + (d * d)) / (2.0 * d);\n\n    // Determine the coordinates of point 2:\n    x2 = x0 + (dx * a / d);\n    y2 = y0 + (dy * a / d);\n\n    // Determine the distance from point 2 to either of the intersection\n    // points:\n    h = Math.sqrt((r0 * r0) - (a * a));\n\n    // Determine the offsets of the intersection points from point 2:\n    rx = -dy * (h / d);\n    ry = dx * (h / d);\n\n    // Determine the absolute intersection points:\n    var xi = x2 + rx;\n    var xi_prime = x2 - rx;\n    var yi = y2 + ry;\n    var yi_prime = y2 - ry;\n\n    return {xi: xi, xi_prime: xi_prime, yi: yi, yi_prime: yi_prime};\n  };\n\n  /**\n    * Check if a point is on a line segment.\n    *\n    * @param  {number} x       The X coordinate of the point to check.\n    * @param  {number} y       The Y coordinate of the point to check.\n    * @param  {number} x1      The X coordinate of the line start point.\n    * @param  {number} y1      The Y coordinate of the line start point.\n    * @param  {number} x2      The X coordinate of the line end point.\n    * @param  {number} y2      The Y coordinate of the line end point.\n    * @param  {number} epsilon The precision (consider the line thickness).\n    * @return {boolean}        True if point is \"close to\" the line\n    *                          segment, false otherwise.\n  */\n  sigma.utils.isPointOnSegment = function(x, y, x1, y1, x2, y2, epsilon) {\n    // http://stackoverflow.com/a/328122\n    var crossProduct = Math.abs((y - y1) * (x2 - x1) - (x - x1) * (y2 - y1)),\n        d = sigma.utils.getDistance(x1, y1, x2, y2),\n        nCrossProduct = crossProduct / d; // normalized cross product\n\n    return (nCrossProduct < epsilon &&\n     Math.min(x1, x2) <= x && x <= Math.max(x1, x2) &&\n     Math.min(y1, y2) <= y && y <= Math.max(y1, y2));\n  };\n\n  /**\n    * Check if a point is on a quadratic bezier curve segment with a thickness.\n    *\n    * @param  {number} x       The X coordinate of the point to check.\n    * @param  {number} y       The Y coordinate of the point to check.\n    * @param  {number} x1      The X coordinate of the curve start point.\n    * @param  {number} y1      The Y coordinate of the curve start point.\n    * @param  {number} x2      The X coordinate of the curve end point.\n    * @param  {number} y2      The Y coordinate of the curve end point.\n    * @param  {number} cpx     The X coordinate of the curve control point.\n    * @param  {number} cpy     The Y coordinate of the curve control point.\n    * @param  {number} epsilon The precision (consider the line thickness).\n    * @return {boolean}        True if (x,y) is on the curve segment,\n    *                          false otherwise.\n  */\n  sigma.utils.isPointOnQuadraticCurve =\n    function(x, y, x1, y1, x2, y2, cpx, cpy, epsilon) {\n    // Fails if the point is too far from the extremities of the segment,\n    // preventing for more costly computation:\n    var dP1P2 = sigma.utils.getDistance(x1, y1, x2, y2);\n    if (Math.abs(x - x1) > dP1P2 || Math.abs(y - y1) > dP1P2) {\n      return false;\n    }\n\n    var dP1 = sigma.utils.getDistance(x, y, x1, y1),\n        dP2 = sigma.utils.getDistance(x, y, x2, y2),\n        t = 0.5,\n        r = (dP1 < dP2) ? -0.01 : 0.01,\n        rThreshold = 0.001,\n        i = 100,\n        pt = sigma.utils.getPointOnQuadraticCurve(t, x1, y1, x2, y2, cpx, cpy),\n        dt = sigma.utils.getDistance(x, y, pt.x, pt.y),\n        old_dt;\n\n    // This algorithm minimizes the distance from the point to the curve. It\n    // find the optimal t value where t=0 is the start point and t=1 is the end\n    // point of the curve, starting from t=0.5.\n    // It terminates because it runs a maximum of i interations.\n    while (i-- > 0 &&\n      t >= 0 && t <= 1 &&\n      (dt > epsilon) &&\n      (r > rThreshold || r < -rThreshold)) {\n      old_dt = dt;\n      pt = sigma.utils.getPointOnQuadraticCurve(t, x1, y1, x2, y2, cpx, cpy);\n      dt = sigma.utils.getDistance(x, y, pt.x, pt.y);\n\n      if (dt > old_dt) {\n        // not the right direction:\n        // halfstep in the opposite direction\n        r = -r / 2;\n        t += r;\n      }\n      else if (t + r < 0 || t + r > 1) {\n        // oops, we've gone too far:\n        // revert with a halfstep\n        r = r / 2;\n        dt = old_dt;\n      }\n      else {\n        // progress:\n        t += r;\n      }\n    }\n\n    return dt < epsilon;\n  };\n\n\n  /**\n    * Check if a point is on a cubic bezier curve segment with a thickness.\n    *\n    * @param  {number} x       The X coordinate of the point to check.\n    * @param  {number} y       The Y coordinate of the point to check.\n    * @param  {number} x1      The X coordinate of the curve start point.\n    * @param  {number} y1      The Y coordinate of the curve start point.\n    * @param  {number} x2      The X coordinate of the curve end point.\n    * @param  {number} y2      The Y coordinate of the curve end point.\n    * @param  {number} cpx1    The X coordinate of the 1st curve control point.\n    * @param  {number} cpy1    The Y coordinate of the 1st curve control point.\n    * @param  {number} cpx2    The X coordinate of the 2nd curve control point.\n    * @param  {number} cpy2    The Y coordinate of the 2nd curve control point.\n    * @param  {number} epsilon The precision (consider the line thickness).\n    * @return {boolean}        True if (x,y) is on the curve segment,\n    *                          false otherwise.\n  */\n  sigma.utils.isPointOnBezierCurve =\n    function(x, y, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2, epsilon) {\n    // Fails if the point is too far from the extremities of the segment,\n    // preventing for more costly computation:\n    var dP1CP1 = sigma.utils.getDistance(x1, y1, cpx1, cpy1);\n    if (Math.abs(x - x1) > dP1CP1 || Math.abs(y - y1) > dP1CP1) {\n      return false;\n    }\n\n    var dP1 = sigma.utils.getDistance(x, y, x1, y1),\n        dP2 = sigma.utils.getDistance(x, y, x2, y2),\n        t = 0.5,\n        r = (dP1 < dP2) ? -0.01 : 0.01,\n        rThreshold = 0.001,\n        i = 100,\n        pt = sigma.utils.getPointOnBezierCurve(\n          t, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2),\n        dt = sigma.utils.getDistance(x, y, pt.x, pt.y),\n        old_dt;\n\n    // This algorithm minimizes the distance from the point to the curve. It\n    // find the optimal t value where t=0 is the start point and t=1 is the end\n    // point of the curve, starting from t=0.5.\n    // It terminates because it runs a maximum of i interations.\n    while (i-- > 0 &&\n      t >= 0 && t <= 1 &&\n      (dt > epsilon) &&\n      (r > rThreshold || r < -rThreshold)) {\n      old_dt = dt;\n      pt = sigma.utils.getPointOnBezierCurve(\n        t, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2);\n      dt = sigma.utils.getDistance(x, y, pt.x, pt.y);\n\n      if (dt > old_dt) {\n        // not the right direction:\n        // halfstep in the opposite direction\n        r = -r / 2;\n        t += r;\n      }\n      else if (t + r < 0 || t + r > 1) {\n        // oops, we've gone too far:\n        // revert with a halfstep\n        r = r / 2;\n        dt = old_dt;\n      }\n      else {\n        // progress:\n        t += r;\n      }\n    }\n\n    return dt < epsilon;\n  };\n\n\n  /**\n   * ************\n   * EVENTS UTILS:\n   * ************\n   */\n  /**\n   * Here are some useful functions to unify extraction of the information we\n   * need with mouse events and touch events, from different browsers:\n   */\n\n  /**\n   * Extract the local X position from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The local X value of the mouse.\n   */\n  sigma.utils.getX = function(e) {\n    return (\n      (e.offsetX !== undefined && e.offsetX) ||\n      (e.layerX !== undefined && e.layerX) ||\n      (e.clientX !== undefined && e.clientX)\n    );\n  };\n\n  /**\n   * Extract the local Y position from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The local Y value of the mouse.\n   */\n  sigma.utils.getY = function(e) {\n    return (\n      (e.offsetY !== undefined && e.offsetY) ||\n      (e.layerY !== undefined && e.layerY) ||\n      (e.clientY !== undefined && e.clientY)\n    );\n  };\n\n  /**\n   * The pixel ratio of the screen. Taking zoom into account\n   *\n   * @return {number}        Pixel ratio of the screen\n   */\n  sigma.utils.getPixelRatio = function() {\n    var ratio = 1;\n    if (window.screen.deviceXDPI !== undefined &&\n         window.screen.logicalXDPI !== undefined &&\n         window.screen.deviceXDPI > window.screen.logicalXDPI) {\n        ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    }\n    else if (window.devicePixelRatio !== undefined) {\n        ratio = window.devicePixelRatio;\n    }\n    return ratio;\n  };\n\n  /**\n   * Extract the width from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The width of the event's target.\n   */\n  sigma.utils.getWidth = function(e) {\n    var w = (!e.target.ownerSVGElement) ?\n              e.target.width :\n              e.target.ownerSVGElement.width;\n\n    return (\n      (typeof w === 'number' && w) ||\n      (w !== undefined && w.baseVal !== undefined && w.baseVal.value)\n    );\n  };\n\n  /**\n   * Extract the center from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {object}   The center of the event's target.\n   */\n  sigma.utils.getCenter = function(e) {\n    var ratio = e.target.namespaceURI.indexOf('svg') !== -1 ? 1 :\n        sigma.utils.getPixelRatio();\n    return {\n      x: sigma.utils.getWidth(e) / (2 * ratio),\n      y: sigma.utils.getHeight(e) / (2 * ratio)\n    };\n  };\n\n  /**\n   * Convert mouse coords to sigma coords\n   *\n   * @param  {event}   e A mouse or touch event.\n   * @param  {number?} x The x coord to convert\n   * @param  {number?} x The y coord to convert\n   *\n   * @return {object}    The standardized event\n   */\n  sigma.utils.mouseCoords = function(e, x, y) {\n    x = x || sigma.utils.getX(e);\n    y = y || sigma.utils.getY(e);\n    return {\n        x: x - sigma.utils.getCenter(e).x,\n        y: y - sigma.utils.getCenter(e).y,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey,\n        shiftKey: e.shiftKey\n    };\n  };\n\n  /**\n   * Extract the height from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The height of the event's target.\n   */\n  sigma.utils.getHeight = function(e) {\n    var h = (!e.target.ownerSVGElement) ?\n              e.target.height :\n              e.target.ownerSVGElement.height;\n\n    return (\n      (typeof h === 'number' && h) ||\n      (h !== undefined && h.baseVal !== undefined && h.baseVal.value)\n    );\n  };\n\n  /**\n   * Extract the wheel delta from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The wheel delta of the mouse.\n   */\n  sigma.utils.getDelta = function(e) {\n    return (\n      (e.wheelDelta !== undefined && e.wheelDelta) ||\n      (e.detail !== undefined && -e.detail)\n    );\n  };\n\n  /**\n   * Returns the offset of a DOM element.\n   *\n   * @param  {DOMElement} dom The element to retrieve the position.\n   * @return {object}         The offset of the DOM element (top, left).\n   */\n  sigma.utils.getOffset = function(dom) {\n    var left = 0,\n        top = 0;\n\n    while (dom) {\n      top = top + parseInt(dom.offsetTop);\n      left = left + parseInt(dom.offsetLeft);\n      dom = dom.offsetParent;\n    }\n\n    return {\n      top: top,\n      left: left\n    };\n  };\n\n  /**\n   * Simulates a \"double click\" event.\n   *\n   * @param  {HTMLElement} target   The event target.\n   * @param  {string}      type     The event type.\n   * @param  {function}    callback The callback to execute.\n   */\n  sigma.utils.doubleClick = function(target, type, callback) {\n    var clicks = 0,\n        self = this,\n        handlers;\n\n    target._doubleClickHandler = target._doubleClickHandler || {};\n    target._doubleClickHandler[type] = target._doubleClickHandler[type] || [];\n    handlers = target._doubleClickHandler[type];\n\n    handlers.push(function(e) {\n      clicks++;\n\n      if (clicks === 2) {\n        clicks = 0;\n        return callback(e);\n      } else if (clicks === 1) {\n        setTimeout(function() {\n          clicks = 0;\n        }, sigma.settings.doubleClickTimeout);\n      }\n    });\n\n    target.addEventListener(type, handlers[handlers.length - 1], false);\n  };\n\n  /**\n   * Unbind simulated \"double click\" events.\n   *\n   * @param  {HTMLElement} target   The event target.\n   * @param  {string}      type     The event type.\n   */\n  sigma.utils.unbindDoubleClick = function(target, type) {\n    var handler,\n        handlers = (target._doubleClickHandler || {})[type] || [];\n\n    while ((handler = handlers.pop())) {\n      target.removeEventListener(type, handler);\n    }\n\n    delete (target._doubleClickHandler || {})[type];\n  };\n\n\n\n\n  /**\n   * Here are just some of the most basic easing functions, used for the\n   * animated camera \"goTo\" calls.\n   *\n   * If you need some more easings functions, don't hesitate to add them to\n   * sigma.utils.easings. But I will not add some more here or merge PRs\n   * containing, because I do not want sigma sources full of overkill and never\n   * used stuff...\n   */\n  sigma.utils.easings = sigma.utils.easings || {};\n  sigma.utils.easings.linearNone = function(k) {\n    return k;\n  };\n  sigma.utils.easings.quadraticIn = function(k) {\n    return k * k;\n  };\n  sigma.utils.easings.quadraticOut = function(k) {\n    return k * (2 - k);\n  };\n  sigma.utils.easings.quadraticInOut = function(k) {\n    if ((k *= 2) < 1)\n      return 0.5 * k * k;\n    return - 0.5 * (--k * (k - 2) - 1);\n  };\n  sigma.utils.easings.cubicIn = function(k) {\n    return k * k * k;\n  };\n  sigma.utils.easings.cubicOut = function(k) {\n    return --k * k * k + 1;\n  };\n  sigma.utils.easings.cubicInOut = function(k) {\n    if ((k *= 2) < 1)\n      return 0.5 * k * k * k;\n    return 0.5 * ((k -= 2) * k * k + 2);\n  };\n\n\n\n\n  /**\n   * ************\n   * WEBGL UTILS:\n   * ************\n   */\n  /**\n   * Loads a WebGL shader and returns it.\n   *\n   * @param  {WebGLContext}           gl           The WebGLContext to use.\n   * @param  {string}                 shaderSource The shader source.\n   * @param  {number}                 shaderType   The type of shader.\n   * @param  {function(string): void} error        Callback for errors.\n   * @return {WebGLShader}                         The created shader.\n   */\n  sigma.utils.loadShader = function(gl, shaderSource, shaderType, error) {\n    var compiled,\n        shader = gl.createShader(shaderType);\n\n    // Load the shader source\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check the compile status\n    compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    // If something went wrong:\n    if (!compiled) {\n      if (error) {\n        error(\n          'Error compiling shader \"' + shader + '\":' +\n          gl.getShaderInfoLog(shader)\n        );\n      }\n\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  };\n\n  /**\n   * Creates a program, attaches shaders, binds attrib locations, links the\n   * program and calls useProgram.\n   *\n   * @param  {Array.<WebGLShader>}    shaders   The shaders to attach.\n   * @param  {Array.<string>}         attribs   The attribs names.\n   * @param  {Array.<number>}         locations The locations for the attribs.\n   * @param  {function(string): void} error     Callback for errors.\n   * @return {WebGLProgram}                     The created program.\n   */\n  sigma.utils.loadProgram = function(gl, shaders, attribs, loc, error) {\n    var i,\n        linked,\n        program = gl.createProgram();\n\n    for (i = 0; i < shaders.length; ++i)\n      gl.attachShader(program, shaders[i]);\n\n    if (attribs)\n      for (i = 0; i < attribs.length; ++i)\n        gl.bindAttribLocation(\n          program,\n          locations ? locations[i] : i,\n          opt_attribs[i]\n        );\n\n    gl.linkProgram(program);\n\n    // Check the link status\n    linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n      if (error)\n        error('Error in program linking: ' + gl.getProgramInfoLog(program));\n\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    return program;\n  };\n\n\n\n\n  /**\n   * *********\n   * MATRICES:\n   * *********\n   * The following utils are just here to help generating the transformation\n   * matrices for the WebGL renderers.\n   */\n  sigma.utils.pkg('sigma.utils.matrices');\n\n  /**\n   * The returns a 3x3 translation matrix.\n   *\n   * @param  {number} dx The X translation.\n   * @param  {number} dy The Y translation.\n   * @return {array}     Returns the matrix.\n   */\n  sigma.utils.matrices.translation = function(dx, dy) {\n    return [\n      1, 0, 0,\n      0, 1, 0,\n      dx, dy, 1\n    ];\n  };\n\n  /**\n   * The returns a 3x3 or 2x2 rotation matrix.\n   *\n   * @param  {number}  angle The rotation angle.\n   * @param  {boolean} m2    If true, the function will return a 2x2 matrix.\n   * @return {array}         Returns the matrix.\n   */\n  sigma.utils.matrices.rotation = function(angle, m2) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n\n    return m2 ? [\n      cos, -sin,\n      sin, cos\n    ] : [\n      cos, -sin, 0,\n      sin, cos, 0,\n      0, 0, 1\n    ];\n  };\n\n  /**\n   * The returns a 3x3 or 2x2 homothetic transformation matrix.\n   *\n   * @param  {number}  ratio The scaling ratio.\n   * @param  {boolean} m2    If true, the function will return a 2x2 matrix.\n   * @return {array}         Returns the matrix.\n   */\n  sigma.utils.matrices.scale = function(ratio, m2) {\n    return m2 ? [\n      ratio, 0,\n      0, ratio\n    ] : [\n      ratio, 0, 0,\n      0, ratio, 0,\n      0, 0, 1\n    ];\n  };\n\n  /**\n   * The returns a 3x3 or 2x2 homothetic transformation matrix.\n   *\n   * @param  {array}   a  The first matrix.\n   * @param  {array}   b  The second matrix.\n   * @param  {boolean} m2 If true, the function will assume both matrices are\n   *                      2x2.\n   * @return {array}      Returns the matrix.\n   */\n  sigma.utils.matrices.multiply = function(a, b, m2) {\n    var l = m2 ? 2 : 3,\n        a00 = a[0 * l + 0],\n        a01 = a[0 * l + 1],\n        a02 = a[0 * l + 2],\n        a10 = a[1 * l + 0],\n        a11 = a[1 * l + 1],\n        a12 = a[1 * l + 2],\n        a20 = a[2 * l + 0],\n        a21 = a[2 * l + 1],\n        a22 = a[2 * l + 2],\n        b00 = b[0 * l + 0],\n        b01 = b[0 * l + 1],\n        b02 = b[0 * l + 2],\n        b10 = b[1 * l + 0],\n        b11 = b[1 * l + 1],\n        b12 = b[1 * l + 2],\n        b20 = b[2 * l + 0],\n        b21 = b[2 * l + 1],\n        b22 = b[2 * l + 2];\n\n    return m2 ? [\n      a00 * b00 + a01 * b10,\n      a00 * b01 + a01 * b11,\n      a10 * b00 + a11 * b10,\n      a10 * b01 + a11 * b11\n    ] : [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar palette = [\"#5DA5DA\", \"#60BD68\", \"#B2912F\", \"#F15854\", \"#DECF3F\", \"#FAA43A\", \"#B276B2\", \"#F17CB0\", \"#4D4D4D\"];\n\n/*\n\tDefault node and edge transformation for NeoCypher,\n\tclass has 2 functions: node() and edge() which transform data from Neo4j format into Sigma.\n\n\tAlso it iterates colors assignments from palette based on node.label and edge.type.\n*/\n\nvar NeoGraphItemsProducers = function () {\n\tfunction NeoGraphItemsProducers() {\n\t\t_classCallCheck(this, NeoGraphItemsProducers);\n\n\t\tthis._currentColor = 0;\n\t\tthis._colorsMap = {};\n\t}\n\n\t_createClass(NeoGraphItemsProducers, [{\n\t\tkey: \"node\",\n\t\tvalue: function node(_node) {\n\t\t\treturn {\n\t\t\t\tid: _node.id,\n\t\t\t\tlabel: _node.properties.name,\n\t\t\t\tx: Math.random(),\n\t\t\t\ty: Math.random(),\n\t\t\t\tsize: 1,\n\t\t\t\tcolor: this.colorsMap(_node.labels[0]),\n\t\t\t\tneo4j_labels: _node.labels,\n\t\t\t\tneo4j_data: _node.properties\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: \"edge\",\n\t\tvalue: function edge(_edge) {\n\t\t\treturn {\n\t\t\t\tid: _edge.id,\n\t\t\t\tlabel: _edge.type,\n\t\t\t\tsource: _edge.startNode,\n\t\t\t\ttarget: _edge.endNode,\n\t\t\t\tcolor: this.colorsMap(_edge.type),\n\t\t\t\tneo4j_type: _edge.type,\n\t\t\t\tneo4j_data: _edge.properties\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: \"colorsMap\",\n\t\tvalue: function colorsMap(label) {\n\t\t\tvar color = this._colorsMap[label];\n\t\t\tif (!color) {\n\t\t\t\tcolor = palette[this._currentColor++ % palette.length];\n\t\t\t\tthis._colorsMap[label] = color;\n\t\t\t}\n\t\t\treturn color;\n\t\t}\n\t}]);\n\n\treturn NeoGraphItemsProducers;\n}();\n\n/* harmony default export */ exports[\"a\"] = NeoGraphItemsProducers;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 120);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 120:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.parsers');\n  sigma.utils.pkg('sigma.utils');\n\n  /**\n   * Just an XmlHttpRequest polyfill for different IE versions.\n   *\n   * @return {*} The XHR like object.\n   */\n  sigma.utils.xhr = function() {\n    if (window.XMLHttpRequest)\n      return new XMLHttpRequest();\n\n    var names,\n        i;\n\n    if (window.ActiveXObject) {\n      names = [\n        'Msxml2.XMLHTTP.6.0',\n        'Msxml2.XMLHTTP.3.0',\n        'Msxml2.XMLHTTP',\n        'Microsoft.XMLHTTP'\n      ];\n\n      for (i in names)\n        try {\n          return new ActiveXObject(names[i]);\n        } catch (e) {}\n    }\n\n    return null;\n  };\n\n  /**\n   * This function loads a JSON file and creates a new sigma instance or\n   * updates the graph of a given instance. It is possible to give a callback\n   * that will be executed at the end of the process.\n   *\n   * @param  {string}       url      The URL of the JSON file.\n   * @param  {object|sigma} sig      A sigma configuration object or a sigma\n   *                                 instance.\n   * @param  {?function}    callback Eventually a callback to execute after\n   *                                 having parsed the file. It will be called\n   *                                 with the related sigma instance as\n   *                                 parameter.\n   */\n  sigma.parsers.json = function(url, sig, callback) {\n    var graph,\n        xhr = sigma.utils.xhr();\n\n    if (!xhr)\n      throw 'XMLHttpRequest not supported, cannot load the file.';\n\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        graph = JSON.parse(xhr.responseText);\n\n        // Update the instance's graph:\n        if (sig instanceof sigma) {\n          sig.graph.clear();\n          sig.graph.read(graph);\n\n        // ...or instantiate sigma if needed:\n        } else if (typeof sig === 'object') {\n          sig.graph = graph;\n          sig = new sigma(sig);\n\n        // ...or it's finally the callback:\n        } else if (typeof sig === 'function') {\n          callback = sig;\n          sig = null;\n        }\n\n        // Call the callback if specified:\n        if (callback)\n          callback(sig || graph);\n      }\n    };\n    xhr.send();\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_edges__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_edges___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_edges__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nEdgeShapes component, interface for customEdgeShapes sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\nNote! this Component requires \"canvas\" renderer to work.\n\nTo assign a shape renderer to an edge, simply set edge.type='shape-name' e.g. edge.type='dotted'.\n```\n<Sigma renderer=\"canvas\" graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n\t<EdgeShapes default=\"dotted\"/>\n</Sigma>\n```\n\nSupported shapes\n```\ntype Sigma$Edge$Shapes = \"line\" | \"arrow\" | \"curve\" | \"curvedArrow\" | \"dashed\" | \"dotted\" | \"parallel\" | \"tapered\";\n```\n\nSee [plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customEdgeShapes)\nfor more datails on implementation.\n\n@param {string} default  set default sigma edge to be applied to edges where type is not set\n\n**/\n\nvar EdgeShapes = function (_React$Component) {\n\t_inherits(EdgeShapes, _React$Component);\n\n\tfunction EdgeShapes(props) {\n\t\t_classCallCheck(this, EdgeShapes);\n\n\t\tvar _this = _possibleConstructorReturn(this, (EdgeShapes.__proto__ || Object.getPrototypeOf(EdgeShapes)).call(this, props));\n\n\t\t_this.render = function () {\n\t\t\treturn null;\n\t\t};\n\n\t\tif (_this.props.sigma && _this.props.default) _this.props.sigma.settings({ defaultEdgeType: _this.props.default });\n\t\treturn _this;\n\t}\n\n\treturn EdgeShapes;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\n/* harmony default export */ exports[\"a\"] = EdgeShapes;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_plugins_filter__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_plugins_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_plugins_filter__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nFilter component, interface for filter sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nFilter is hiding all nodes which do not apply to the provided nodesBy criteria.\n\n@param {Nodes$Filter} nodesBy   will hide nodes where filter returns false\n\ntype Nodes$Filter = (node: Sigma$Node) => boolean;\n\n\n**/\n\nvar Filter = function (_React$Component) {\n\t_inherits(Filter, _React$Component);\n\n\tfunction Filter() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, Filter);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Filter.__proto__ || Object.getPrototypeOf(Filter)).call.apply(_ref, [this].concat(args))), _this), _this.render = function () {\n\t\t\treturn null;\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(Filter, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tthis.filter = new sigma.plugins.filter(this.props.sigma);\n\t\t\tthis._apply(this.props);\n\t\t}\n\n\t\t// TODO: will it work in composition with ForceAtlas for instance?\n\t\t//It should hide nodes before rendering of subplugins, therefore used in componentWillUpdate.. is it right?\n\n\t}, {\n\t\tkey: 'componentWillUpdate',\n\t\tvalue: function componentWillUpdate(props) {\n\t\t\tif (props.nodesBy !== this.props.nodesBy || props.neighborsOf !== this.props.neighborsOf) this._apply(props);\n\t\t}\n\n\t\t// TODO: Composition is not working yet!!\n\n\t}, {\n\t\tkey: '_apply',\n\t\tvalue: function _apply(props) {\n\t\t\tthis.filter.undo([\"neighborsOf\", \"nodesBy\"]);\n\t\t\tif (props.neighborsOf) {\n\t\t\t\tthis.filter.neighborsOf(props.neighborsOf, \"neighborsOf\");\n\t\t\t}\n\t\t\tif (props.nodesBy) this.filter.nodesBy(props.nodesBy, \"nodesBy\");\n\t\t\tthis.filter.apply();\n\t\t\tif (this.props.sigma) this.props.sigma.refresh();\n\t\t}\n\t}]);\n\n\treturn Filter;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\n/* harmony default export */ exports[\"a\"] = Filter;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_layout_forceAtlas2__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_layout_forceAtlas2___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_layout_forceAtlas2__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nForceAtlas2 component, starts ForceAtlas2 sigma plugin once component is mounted.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted while graph is unavailable. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nIt accepts all the parameters of ForceAtlas2 described on its github page:\n@param {boolean} [worker=true]           Use a web worker to run calculations in separate thread\n@param {boolean} barnesHutOptimize  Use the algorithm's Barnes-Hut to improve repulsion's scalability\n\t\t\t\t\t\t\t\t\tThis is useful for large graph but harmful to small ones.\n@param {number} barnesHutTheta\n@param {boolean} adjustSizes\n@param {number} iterationsPerRender\n@param {boolean} [linLogMode=true]\n@param {boolean} outboundAttractionDistribution\n@param {number} edgeWeightInfluence\n@param {number} scalingRatio\n@param {boolean} strongGravityMode\n@param {number} gravity\n@param {number} slowDown\n@param {number} timeout   how long algorythm should run. default=graph.nodes().length * 10\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.layout.forceAtlas2)\n\n**/\n\nvar ForceAtlas2 = function (_React$Component) {\n\t_inherits(ForceAtlas2, _React$Component);\n\n\tfunction ForceAtlas2(props) {\n\t\t_classCallCheck(this, ForceAtlas2);\n\n\t\tvar _this = _possibleConstructorReturn(this, (ForceAtlas2.__proto__ || Object.getPrototypeOf(ForceAtlas2)).call(this, props));\n\n\t\t_this.render = function () {\n\t\t\treturn null;\n\t\t};\n\n\t\t_this.state = { running: false };\n\t\treturn _this;\n\t}\n\n\t_createClass(ForceAtlas2, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tthis._refreshGraph();\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate(prevProps, prevState) {\n\t\t\tvar s = this.props.sigma;\n\t\t\tif (prevState.running && !this.state.running && s) {\n\t\t\t\ts.stopForceAtlas2();\n\t\t\t\ts.settings({ drawEdges: prevState.drawEdges === false ? false : true });\n\t\t\t\ts.refresh();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tif (this.props.sigma) this.props.sigma.killForceAtlas2();\n\t\t\tif (this.state.timer) clearTimeout(this.state.timer);\n\t\t}\n\n\t\t//TODO: Add composition of child components after timeout\n\n\t}, {\n\t\tkey: '_refreshGraph',\n\t\tvalue: function _refreshGraph() {\n\t\t\tvar _this2 = this;\n\n\t\t\tvar s = this.props.sigma;\n\t\t\tif (!sigma || !s) return;\n\n\t\t\tvar drawEdges = s.settings(\"drawEdges\");\n\t\t\tif (s.graph.edges().length > 1000) s.settings({ drawEdges: false });\n\n\t\t\ts.startForceAtlas2(this._stripOptions(this.props));\n\t\t\t// TODO: convert running status to state\n\t\t\tvar timer = setTimeout(function () {\n\t\t\t\t_this2.setState({ running: false, timer: undefined });\n\t\t\t}, this.props.timeout || s.graph.nodes().length * 8);\n\t\t\tthis.setState({ running: true, timer: timer, drawEdges: drawEdges });\n\t\t}\n\n\t\t//strip force atlas options from component props\n\n\t}, {\n\t\tkey: '_stripOptions',\n\t\tvalue: function _stripOptions(props) {\n\t\t\treturn Object.assign({}, props, { sigma: undefined });\n\t\t}\n\t}]);\n\n\treturn ForceAtlas2;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\nForceAtlas2.defaultProps = {\n\tworker: true,\n\tlinLogMode: true\n};\n\n\n/* harmony default export */ exports[\"a\"] = ForceAtlas2;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_parsers_gexf__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_parsers_gexf___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_parsers_gexf__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tools__ = __webpack_require__(1);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n/**\n\nLoadGEXF component, interface for parsers.json sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} path   path to the GEXF file\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\nvar LoadGEXF = function (_React$PureComponent) {\n    _inherits(LoadGEXF, _React$PureComponent);\n\n    function LoadGEXF(props) {\n        _classCallCheck(this, LoadGEXF);\n\n        var _this = _possibleConstructorReturn(this, (LoadGEXF.__proto__ || Object.getPrototypeOf(LoadGEXF)).call(this, props));\n\n        _this.state = { loaded: false };\n        _this.onLoad = _this._onLoad.bind(_this);\n        return _this;\n    }\n\n    _createClass(LoadGEXF, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            this._load(this.props.path);\n        }\n    }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(props) {\n            // reload only if path changes\n            if (this.props.path !== props.path) {\n                this.setState({ loaded: false });\n                this._load(props.path);\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            if (!this.state.loaded) return null;\n            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'div',\n                null,\n                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__tools__[\"a\" /* embedProps */])(this.props.children, { sigma: this.props.sigma })\n            );\n        }\n    }, {\n        key: '_load',\n        value: function _load(url) {\n            sigma.parsers.gexf(this.props.path, this.props.sigma, this.onLoad);\n        }\n    }, {\n        key: '_onLoad',\n        value: function _onLoad() {\n            if (this.props.sigma) this.props.sigma.refresh();\n            this.setState({ loaded: true });\n            if (this.props.onGraphLoaded) return this.props.onGraphLoaded();\n        }\n    }]);\n\n    return LoadGEXF;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);\n\n/* harmony default export */ exports[\"a\"] = LoadGEXF;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_main_js__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_main_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_main_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_parsers_json_js__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_parsers_json_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__sigma_parsers_json_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tools__ = __webpack_require__(1);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n// TODO: make a superclass for loaders??\n\n/**\n\nLoadJSON component, interface for parsers.json sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} path   path to the JSON file\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\nvar LoadJSON = function (_React$PureComponent) {\n  _inherits(LoadJSON, _React$PureComponent);\n\n  function LoadJSON(props) {\n    _classCallCheck(this, LoadJSON);\n\n    var _this = _possibleConstructorReturn(this, (LoadJSON.__proto__ || Object.getPrototypeOf(LoadJSON)).call(this, props));\n\n    _this.state = { loaded: false };\n    _this.onLoad = _this._onLoad.bind(_this);\n    return _this;\n  }\n\n  _createClass(LoadJSON, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._load(this.props.path);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(props) {\n      // reload only if path changes\n      if (this.props.path !== props.path) {\n        this.setState({ loaded: false });\n        this._load(props.path);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (!this.state.loaded) return null;\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        null,\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__tools__[\"a\" /* embedProps */])(this.props.children, { sigma: this.props.sigma })\n      );\n    }\n  }, {\n    key: '_load',\n    value: function _load(url) {\n      sigma.parsers.json(this.props.path, this.props.sigma, this.onLoad);\n    }\n  }, {\n    key: '_onLoad',\n    value: function _onLoad() {\n      if (this.props.sigma) this.props.sigma.refresh();\n      this.setState({ loaded: true });\n      if (this.props.onGraphLoaded) return this.props.onGraphLoaded();\n    }\n  }]);\n\n  return LoadJSON;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);\n\n/* harmony default export */ exports[\"a\"] = LoadJSON;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_plugins_animate__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_plugins_animate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_plugins_animate__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_layout_noverlap__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_layout_noverlap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__sigma_layout_noverlap__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ReactSigmaLayoutPlugin__ = __webpack_require__(17);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n/**\n\nNOverlap component, starts noverlap sigma plugin once component is mounted.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted while graph is unavailable. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\n@param {number} [nodeMargin=5]    additional minimum space to apply around each and every node\n@param {number} [scaleNodes=1.2]  multiplier,  larger nodes will have more space around\n@param {number} [gridSize=20]   number of rows and columns to use when dividing the nodes up into cell\n@param {number} [permittedExpansion=1.1]  maximum ratio to apply to the bounding box\n@param {number} speed     larger value increases the speed at the cost of precision\n@param {number} maxIterations  iterations to run the algorithm for before stopping it\n@param {number} easing     camera easing type for camera transition\n@param {number} duration     duration of the transition for the easing method\n\nIt accepts all the parameters of sigma.layout.noverlap plugin described on its github page:\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.layout.noverlap)\n\n@example\n<Sigma graph={data}>\n <NOverlap gridSize={10} maxIterations={100}/>\n</Sigma>\n\n**/\n\nvar NOverlap = function NOverlap(props) {\n\tvar s = props.sigma;\n\tif (s) return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__ReactSigmaLayoutPlugin__[\"a\" /* default */], _extends({\n\t\tstart: function start() {\n\t\t\treturn s.startNoverlap();\n\t\t},\n\t\tconfig: function config(options) {\n\t\t\treturn s.configNoverlap(options);\n\t\t},\n\t\tstop: function stop() {\n\t\t\treturn s.stopNoverlap();\n\t\t} }, props));\n\treturn null;\n};\n\n/* harmony default export */ exports[\"a\"] = NOverlap;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_parsers_json_js__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_parsers_json_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_parsers_json_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_neo4j_cypher__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sigma_neo4j_cypher___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__sigma_neo4j_cypher__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__NeoGraphItemsProducers__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__tools__ = __webpack_require__(1);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n/**\n\nNeoCypher component, interface for neo4j.cypher sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} url    Neo4j instance REST API URL\n @param {string} user    Neo4j instance REST API user\n @param {string} password    Neo4j instance REST API password\n @param {string} query    Neo4j cypher query\n @param {NeoGraphItemsProducers} producers   Optional transformer for creating Sigma nodes and edges,\n                                    instance compatible with NeoGraphItemsProducers\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\nvar NeoCypher = function (_React$PureComponent) {\n    _inherits(NeoCypher, _React$PureComponent);\n\n    function NeoCypher(props) {\n        _classCallCheck(this, NeoCypher);\n\n        var _this = _possibleConstructorReturn(this, (NeoCypher.__proto__ || Object.getPrototypeOf(NeoCypher)).call(this, props));\n\n        _this.state = { loaded: false };\n        _this.onLoad = _this._onLoad.bind(_this);\n        return _this;\n    }\n\n    _createClass(NeoCypher, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            this._runQuery(this.props.query);\n        }\n    }, {\n        key: 'componentWillUpdate',\n        value: function componentWillUpdate(props) {\n            // suppose url, user or password won't change for sigma instance, as well as sigma instance itself\n            if (this.props.query !== props.query) {\n                this.setState({ loaded: false });\n                this._runQuery(props.query);\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            if (!this.state.loaded) return null;\n            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'div',\n                null,\n                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__tools__[\"a\" /* embedProps */])(this.props.children, { sigma: this.props.sigma })\n            );\n        }\n    }, {\n        key: '_runQuery',\n        value: function _runQuery(query) {\n            // TODO: add exception handling capability to Sigma Neo4j plugin\n            sigma.neo4j.cypher({ url: this.props.url, user: this.props.user, password: this.props.password }, query, this.props.sigma, this.onLoad, this.props.producers);\n        }\n    }, {\n        key: '_onLoad',\n        value: function _onLoad() {\n            this.setState({ loaded: true });\n            if (this.props.sigma) this.props.sigma.refresh();\n            if (this.props.onGraphLoaded) return this.props.onGraphLoaded();\n        }\n    }]);\n\n    return NeoCypher;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);\n\nNeoCypher.defaultProps = {\n    producers: new __WEBPACK_IMPORTED_MODULE_3__NeoGraphItemsProducers__[\"a\" /* default */]()\n};\n\n\n/* harmony default export */ exports[\"a\"] = NeoCypher;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_nodes__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_nodes___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_nodes__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nNodeShapes component, interface for customShapes sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\nNote! this Component requires \"canvas\" renderer to work.\n\nExtra node properties:\n - node.type='shape-name' - node shape renderer e.g. node.type='cross'.\n - node.borderColor - e.g. node.borderColor='#FF3333'\nDetails on shapes configuration and possibility to apply images to nodes, please refer to\n[plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customShapes#images).\n\nSee [plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customEdgeShapes)\nfor more datails on implementation.\n\n@param {string} default  set default sigma node renderer to be applied to nodes where type is not set\n\n\n@example\n```\n<Sigma renderer=\"canvas\" graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n\t<NodeShapes default=\"star\"/>\n</Sigma>\n```\n\n@example\nSupported shapes\n```\ntype Sigma$Node$Shapes = \"def\" | \"pacman\" | \"star\" | \"equilateral\" | \"cross\" | \"diamond\" | \"circle\" | \"square\";\n```\n\n**/\n\nvar NodeShapes = function (_React$Component) {\n\t_inherits(NodeShapes, _React$Component);\n\n\tfunction NodeShapes(props) {\n\t\t_classCallCheck(this, NodeShapes);\n\n\t\tvar _this = _possibleConstructorReturn(this, (NodeShapes.__proto__ || Object.getPrototypeOf(NodeShapes)).call(this, props));\n\n\t\t_this.render = function () {\n\t\t\treturn null;\n\t\t};\n\n\t\tif (_this.props.sigma && _this.props.default) _this.props.sigma.settings({ defaultNodeType: _this.props.default });\n\t\treturn _this;\n\t}\n\n\treturn NodeShapes;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\n/* harmony default export */ exports[\"a\"] = NodeShapes;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__tools__ = __webpack_require__(1);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nRandomizeNodePositions component, sets random positions to all nodes.\nCan be used within Sigma component with predefined graph or within graph loader component.\n\n**/\n\nvar RandomizeNodePositions = function (_React$PureComponent) {\n  _inherits(RandomizeNodePositions, _React$PureComponent);\n\n  function RandomizeNodePositions(props) {\n    _classCallCheck(this, RandomizeNodePositions);\n\n    var _this = _possibleConstructorReturn(this, (RandomizeNodePositions.__proto__ || Object.getPrototypeOf(RandomizeNodePositions)).call(this, props));\n\n    if (_this.props.sigma) {\n      _this.props.sigma.graph.nodes().forEach(function (n) {\n        n.x = Math.random();\n        n.y = Math.random();\n      });\n    }\n    if (_this.props.sigma) _this.props.sigma.refresh();\n    return _this;\n  }\n\n  _createClass(RandomizeNodePositions, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.sigma) this.props.sigma.refresh();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        null,\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__tools__[\"a\" /* embedProps */])(this.props.children, { sigma: this.props.sigma })\n      );\n    }\n  }]);\n\n  return RandomizeNodePositions;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);\n\n/* harmony default export */ exports[\"a\"] = RandomizeNodePositions;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_plugins_relativeSize__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_plugins_relativeSize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_plugins_relativeSize__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nRelativeSize component, interface for RelativeSize sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nSets nodes sizes corresponding its degree.\n\n @param {number} initialSize  start size for every node, will be multiplied by Math.sqrt(node.degree)\n\n**/\n\nvar RelativeSize = function (_React$Component) {\n\t_inherits(RelativeSize, _React$Component);\n\n\tfunction RelativeSize(props) {\n\t\t_classCallCheck(this, RelativeSize);\n\n\t\tvar _this = _possibleConstructorReturn(this, (RelativeSize.__proto__ || Object.getPrototypeOf(RelativeSize)).call(this, props));\n\n\t\t_this.render = function () {\n\t\t\treturn null;\n\t\t};\n\n\t\tsigma.plugins.relativeSize(_this.props.sigma, _this.props.initialSize);\n\t\treturn _this;\n\t}\n\n\treturn RelativeSize;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\n/* harmony default export */ exports[\"a\"] = RelativeSize;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sigma_main__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sigma_main___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__sigma_main__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_webgl__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sigma_webgl___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__sigma_webgl__);\n\n\n\n/**\n  Component enables WebGL renderer, setting it as default renderer if WebGL is supported by browser.\n**/\nfunction SigmaEnableWebGL() {\n  return null;\n}\n\n/* harmony default export */ exports[\"a\"] = SigmaEnableWebGL;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils__ = __webpack_require__(18);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n/**\n\nReactSigmaLayoutPlugin is a base class for sigma plugins.\n\nUsage\n```\nconst NOverlap = (props: Props) => {\n\t\t\t\tconst s = props.sigma\n\t\t\t\tif(s)\n          return <ReactSigmaLayoutPlugin\n              start={()=>s.startNoverlap()}\n              config={options=>s.configNoverlap(options)}\n              stop={s.stopNoverlap()} {...props} />\n\t\t\t\treturn null\n\t\t\t}\n...\n<NOverlap easing=\"cubicInOut\"/>\n```\n**/\n\nvar ReactSigmaLayoutPlugin = function (_React$Component) {\n\t_inherits(ReactSigmaLayoutPlugin, _React$Component);\n\n\tfunction ReactSigmaLayoutPlugin(props) {\n\t\t_classCallCheck(this, ReactSigmaLayoutPlugin);\n\n\t\tvar _this = _possibleConstructorReturn(this, (ReactSigmaLayoutPlugin.__proto__ || Object.getPrototypeOf(ReactSigmaLayoutPlugin)).call(this, props));\n\n\t\t_this._mounted = false;\n\n\t\t_this.render = function () {\n\t\t\treturn null;\n\t\t};\n\n\t\t_this.state = { running: false };\n\t\treturn _this;\n\t}\n\n\t_createClass(ReactSigmaLayoutPlugin, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tthis._start();\n\t\t\tthis._mounted = true;\n\t\t}\n\n\t\t// Change sigma status only after react rendering complete\n\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate(prevProps, prevState) {\n\t\t\tif (prevState.running && !this.state.running && this._mounted) {\n\t\t\t\tif (this.props.sigma) this.props.sigma.refresh();\n\t\t\t} else if (__WEBPACK_IMPORTED_MODULE_1__Utils__[\"a\" /* propsChanged */](prevProps, this.props)) {\n\t\t\t\tthis.props.stop();\n\t\t\t\tthis._start();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tthis._mounted = false;\n\t\t\tthis.props.stop();\n\t\t}\n\n\t\t//TODO: Render composition of child components after animation\n\n\t}, {\n\t\tkey: '_start',\n\t\tvalue: function _start() {\n\t\t\tvar _this2 = this;\n\n\t\t\tthis.props.config(ReactSigmaLayoutPlugin._stripOptions(this.props));\n\t\t\tvar listener = this.props.start();\n\n\t\t\tlistener.bind('stop', function () {\n\t\t\t\t_this2._mounted && _this2.setState({ running: false });\n\t\t\t});\n\n\t\t\tthis.setState({ running: true });\n\t\t}\n\t}], [{\n\t\tkey: '_stripOptions',\n\t\tvalue: function _stripOptions(props) {\n\t\t\tvar config = {};\n\t\t\tfor (var key in props) {\n\t\t\t\tif (key !== \"start\" && key !== \"stop\" && key !== \"config\" && key !== \"sigma\" && key !== \"children\") config[key] = props[key];\n\t\t\t}return config;\n\t\t}\n\t}]);\n\n\treturn ReactSigmaLayoutPlugin;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n\n/* harmony default export */ exports[\"a\"] = ReactSigmaLayoutPlugin;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ exports[\"a\"] = propsChanged;\nfunction propsChanged(prev, next) {\n\tfor (var key in prev) {\n\t\tif (prev[key] !== next[key]) return true;\n\t}return false;\n}\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 114);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 114:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js__ = __webpack_require__(54);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js__ = __webpack_require__(51);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js__);\n//base library\n\n\n\n\n\n\n//plugins\n\n\n\n\n\n\n\n\n\n\n\n\n\n/***/ },\n\n/***/ 21:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.dashed =\n    function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    context.save();\n\n    context.setLineDash([8,3]);\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 22:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.dotted =\n    function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    context.save();\n\n    context.setLineDash([2]);\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 23:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.parallel =\n    function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        c,\n        d,\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    // Intersection points of the source node circle:\n    c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    // Intersection points of the target node circle:\n    d = sigma.utils.getCircleIntersection(tX, tY, size, sX, sY, dist);\n\n    context.save();\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(c.xi, c.yi);\n    context.lineTo(d.xi_prime, d.yi_prime);\n    context.closePath();\n    context.stroke();\n\n    context.beginPath();\n    context.moveTo(c.xi_prime, c.yi_prime);\n    context.lineTo(d.xi, d.yi);\n    context.closePath();\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.tapered =\n    function(edge, source, target, context, settings) {\n    // The goal is to draw a triangle where the target node is a point of\n    // the triangle, and the two other points are the intersection of the\n    // source circle and the circle (target, distance(source, target)).\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        prefix = settings('prefix') || '',\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    // Intersection points:\n    var c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    context.save();\n\n    // Turn transparency on:\n    context.globalAlpha = 0.65;\n\n    // Draw the triangle:\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(tX, tY);\n    context.lineTo(c.xi, c.yi);\n    context.lineTo(c.xi_prime, c.yi_prime);\n    context.closePath();\n    context.fill();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as a dashed line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.dashed = function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.strokeStyle = color;\n    }\n\n    context.setLineDash([8,3]);\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as a dotted line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.dotted = function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.strokeStyle = color;\n    }\n\n    context.setLineDash([2]);\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as two parallel lines.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.parallel = function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        c,\n        d,\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    // Intersection points of the source node circle:\n    c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    // Intersection points of the target node circle:\n    d = sigma.utils.getCircleIntersection(tX, tY, size, sX, sY, dist);\n\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.strokeStyle = color;\n    }\n\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(c.xi, c.yi);\n    context.lineTo(d.xi_prime, d.yi_prime);\n    context.closePath();\n    context.stroke();\n\n    context.beginPath();\n    context.moveTo(c.xi_prime, c.yi_prime);\n    context.lineTo(d.xi, d.yi);\n    context.closePath();\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 28:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as a tapered line.\n   * Danny Holten, Petra Isenberg, Jean-Daniel Fekete, and J. Van Wijk (2010)\n   * Performance Evaluation of Tapered, Curved, and Animated Directed-Edge\n   * Representations in Node-Link Graphs. Research Report, Sep 2010.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.tapered = function(edge, source, target, context, settings) {\n    // The goal is to draw a triangle where the target node is a point of\n    // the triangle, and the two other points are the intersection of the\n    // source circle and the circle (target, distance(source, target)).\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        prefix = settings('prefix') || '',\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    // Intersection points:\n    var c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    context.save();\n\n    if (edge.active) {\n      context.fillStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.fillStyle = color;\n    }\n\n    // Turn transparency on:\n    context.globalAlpha = 0.65;\n\n    // Draw the triangle:\n    context.beginPath();\n    context.moveTo(tX, tY);\n    context.lineTo(c.xi, c.yi);\n    context.lineTo(c.xi_prime, c.yi_prime);\n    context.closePath();\n    context.fill();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 31:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n\n  /**\n   * This label renderer will just display the label on the curve of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the curve.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.labels.curve =\n    function(edge, source, target, context, settings) {\n    if (typeof edge.label !== 'string')\n      return;\n\n    var prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1;\n\n    if (size < settings('edgeLabelThreshold'))\n      return;\n\n    var fontSize,\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dX = tX - sX,\n        dY = tY - sY,\n        sign = (sX < tX) ? 1 : -1,\n        cp = {},\n        c,\n        angle,\n        t = 0.5;  //length of the curve\n\n    if (source.id === target.id) {\n      cp = sigma.utils.getSelfLoopControlPoints(sX, sY, sSize);\n      c = sigma.utils.getPointOnBezierCurve(\n        t, sX, sY, tX, tY, cp.x1, cp.y1, cp.x2, cp.y2\n      );\n      angle = Math.atan2(1, 1); // 45°\n    } else {\n      cp = sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n      c = sigma.utils.getPointOnQuadraticCurve(t, sX, sY, tX, tY, cp.x, cp.y);\n      angle = Math.atan2(dY * sign, dX * sign);\n    }\n\n    // The font size is sublineraly proportional to the edge size, in order to\n    // avoid very large labels on screen.\n    // This is achieved by f(x) = x * x^(-1/ a), where 'x' is the size and 'a'\n    // is the edgeLabelSizePowRatio. Notice that f(1) = 1.\n    // The final form is:\n    // f'(x) = b * x * x^(-1 / a), thus f'(1) = b. Application:\n    // fontSize = defaultEdgeLabelSize if edgeLabelSizePowRatio = 1\n    fontSize = (settings('edgeLabelSize') === 'fixed') ?\n      settings('defaultEdgeLabelSize') :\n      settings('defaultEdgeLabelSize') *\n      size *\n      Math.pow(size, -1 / settings('edgeLabelSizePowRatio'));\n\n    context.save();\n\n    \n    if (edge.active) {\n      context.font = [\n        settings('activeFontStyle'),\n        fontSize + 'px',\n        settings('activeFont') || settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        settings('edgeActiveColor') === 'edge' ?\n        (edge.active_color || settings('defaultEdgeActiveColor')) :\n        settings('defaultEdgeLabelActiveColor');\n    }\n    else {\n      context.font = [\n        settings('fontStyle'),\n        fontSize + 'px',\n        settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        (settings('edgeLabelColor') === 'edge') ?\n        (edge.color || settings('defaultEdgeColor')) :\n        settings('defaultEdgeLabelColor');\n    }\n\n    context.textAlign = 'center';\n    context.textBaseline = 'alphabetic';\n\n    context.translate(c.x, c.y);\n    context.rotate(angle);\n    context.fillText(\n      edge.label,\n      0,\n      (-size / 2) - 3\n    );\n\n    context.restore();\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 32:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n\n  /**\n   * This label renderer will just display the label on the curve of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the curve.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.labels.curvedArrow =\n    function(edge, source, target, context, settings) {\n    sigma.canvas.edges.labels.curve(edge, source, target, context, settings);\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n\n  /**\n   * This label renderer will just display the label on the line of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.labels.def =\n    function(edge, source, target, context, settings) {\n    if (typeof edge.label !== 'string' || source == target)\n      return;\n\n    var prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1;\n\n    if (size < settings('edgeLabelThreshold'))\n      return;\n\n    if (0 === settings('edgeLabelSizePowRatio'))\n      throw '\"edgeLabelSizePowRatio\" must not be 0.';\n\n    var fontSize,\n        x = (source[prefix + 'x'] + target[prefix + 'x']) / 2,\n        y = (source[prefix + 'y'] + target[prefix + 'y']) / 2,\n        dX = target[prefix + 'x'] - source[prefix + 'x'],\n        dY = target[prefix + 'y'] - source[prefix + 'y'],\n        sign = (source[prefix + 'x'] < target[prefix + 'x']) ? 1 : -1,\n        angle = Math.atan2(dY * sign, dX * sign);\n\n    // The font size is sublineraly proportional to the edge size, in order to\n    // avoid very large labels on screen.\n    // This is achieved by f(x) = x * x^(-1/ a), where 'x' is the size and 'a'\n    // is the edgeLabelSizePowRatio. Notice that f(1) = 1.\n    // The final form is:\n    // f'(x) = b * x * x^(-1 / a), thus f'(1) = b. Application:\n    // fontSize = defaultEdgeLabelSize if edgeLabelSizePowRatio = 1\n    fontSize = (settings('edgeLabelSize') === 'fixed') ?\n      settings('defaultEdgeLabelSize') :\n      settings('defaultEdgeLabelSize') *\n      size *\n      Math.pow(size, -1 / settings('edgeLabelSizePowRatio'));\n\n    context.save();\n\n    if (edge.active) {\n      context.font = [\n        settings('activeFontStyle'),\n        fontSize + 'px',\n        settings('activeFont') || settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        settings('edgeActiveColor') === 'edge' ?\n        (edge.active_color || settings('defaultEdgeActiveColor')) :\n        settings('defaultEdgeLabelActiveColor');\n    }\n    else {\n      context.font = [\n        settings('fontStyle'),\n        fontSize + 'px',\n        settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        (settings('edgeLabelColor') === 'edge') ?\n        (edge.color || settings('defaultEdgeColor')) :\n        settings('defaultEdgeLabelColor');\n    }\n\n    context.textAlign = 'center';\n    context.textBaseline = 'alphabetic';\n\n    context.translate(x, y);\n    context.rotate(angle);\n    context.fillText(\n      edge.label,\n      0,\n      (-size / 2) - 3\n    );\n\n    context.restore();\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 49:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.arrow =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        size = edge[prefix + 'size'] || 1,\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n\n    size = (edge.hover) ?\n      settings('edgeHoverSizeRatio') * size : size;\n    var aSize = size * 2.5,\n        d = Math.sqrt(Math.pow(tX - sX, 2) + Math.pow(tY - sY, 2)),\n        aX = sX + (tX - sX) * (d - aSize - tSize) / d,\n        aY = sY + (tY - sY) * (d - aSize - tSize) / d,\n        vX = (tX - sX) * aSize / d,\n        vY = (tY - sY) * aSize / d;\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(\n      aX,\n      aY\n    );\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 50:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.curve =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = settings('edgeHoverSizeRatio') * (edge[prefix + 'size'] || 1),\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, sSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x1, cp.y1, cp.x2, cp.y2, tX, tY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, tX, tY);\n    }\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 51:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.curvedArrow =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        size = settings('edgeHoverSizeRatio') * (edge[prefix + 'size'] || 1),\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        d,\n        aSize,\n        aX,\n        aY,\n        vX,\n        vY;\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, tSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (source.id === target.id) {\n      d = Math.sqrt(Math.pow(tX - cp.x1, 2) + Math.pow(tY - cp.y1, 2));\n      aSize = size * 2.5;\n      aX = cp.x1 + (tX - cp.x1) * (d - aSize - tSize) / d;\n      aY = cp.y1 + (tY - cp.y1) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x1) * aSize / d;\n      vY = (tY - cp.y1) * aSize / d;\n    }\n    else {\n      d = Math.sqrt(Math.pow(tX - cp.x, 2) + Math.pow(tY - cp.y, 2));\n      aSize = size * 2.5;\n      aX = cp.x + (tX - cp.x) * (d - aSize - tSize) / d;\n      aY = cp.y + (tY - cp.y) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x) * aSize / d;\n      vY = (tY - cp.y) * aSize / d;\n    }\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x2, cp.y2, cp.x1, cp.y1, aX, aY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, aX, aY);\n    }\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 53:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This edge renderer will display edges as arrows going from the source node\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.arrow = function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        size = edge[prefix + 'size'] || 1,\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        aSize = Math.max(size * 2.5, settings('minArrowSize')),\n        d = Math.sqrt(Math.pow(tX - sX, 2) + Math.pow(tY - sY, 2)),\n        aX = sX + (tX - sX) * (d - aSize - tSize) / d,\n        aY = sY + (tY - sY) * (d - aSize - tSize) / d,\n        vX = (tX - sX) * aSize / d,\n        vY = (tY - sY) * aSize / d;\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(\n      aX,\n      aY\n    );\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 54:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This edge renderer will display edges as curves.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.curve = function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, sSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x1, cp.y1, cp.x2, cp.y2, tX, tY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, tX, tY);\n    }\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 55:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This edge renderer will display edges as curves with arrow heading.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.curvedArrow =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        size = edge[prefix + 'size'] || 1,\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        aSize = Math.max(size * 2.5, settings('minArrowSize')),\n        d,\n        aX,\n        aY,\n        vX,\n        vY;\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, tSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (source.id === target.id) {\n      d = Math.sqrt(Math.pow(tX - cp.x1, 2) + Math.pow(tY - cp.y1, 2));\n      aX = cp.x1 + (tX - cp.x1) * (d - aSize - tSize) / d;\n      aY = cp.y1 + (tY - cp.y1) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x1) * aSize / d;\n      vY = (tY - cp.y1) * aSize / d;\n    }\n    else {\n      d = Math.sqrt(Math.pow(tX - cp.x, 2) + Math.pow(tY - cp.y, 2));\n      aX = cp.x + (tX - cp.x) * (d - aSize - tSize) / d;\n      aY = cp.y + (tY - cp.y) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x) * aSize / d;\n      vY = (tY - cp.y) * aSize / d;\n    }\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x2, cp.y2, cp.x1, cp.y1, aX, aY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, aX, aY);\n    }\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 126);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 126:\n/***/ function(module, exports, __webpack_require__) {\n\n__webpack_require__(15);\nmodule.exports = __webpack_require__(16);\n\n\n/***/ },\n\n/***/ 15:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  /**\n   * Sigma ForceAtlas2.5 Supervisor\n   * ===============================\n   *\n   * Author: Guillaume Plique (Yomguithereal)\n   * Version: 0.1\n   */\n  var _root = this;\n\n  /**\n   * Feature detection\n   * ------------------\n   */\n  var webWorkers = 'Worker' in _root;\n\n  /**\n   * Supervisor Object\n   * ------------------\n   */\n  function Supervisor(sigInst, options) {\n    var _this = this,\n        workerFn = sigInst.getForceAtlas2Worker &&\n          sigInst.getForceAtlas2Worker();\n\n    options = options || {};\n\n    // _root URL Polyfill\n    _root.URL = _root.URL || _root.webkitURL;\n\n    // Properties\n    this.sigInst = sigInst;\n    this.graph = this.sigInst.graph;\n    this.ppn = 10;\n    this.ppe = 3;\n    this.config = {};\n    this.shouldUseWorker =\n      options.worker === false ? false : true && webWorkers;\n    this.workerUrl = options.workerUrl;\n\n    // State\n    this.started = false;\n    this.running = false;\n\n    // Web worker or classic DOM events?\n    if (this.shouldUseWorker) {\n      if (!this.workerUrl) {\n        var blob = this.makeBlob(workerFn);\n        this.worker = new Worker(URL.createObjectURL(blob));\n      }\n      else {\n        this.worker = new Worker(this.workerUrl);\n      }\n\n      // Post Message Polyfill\n      this.worker.postMessage =\n        this.worker.webkitPostMessage || this.worker.postMessage;\n    }\n    else {\n\n      eval(workerFn);\n    }\n\n    // Worker message receiver\n    this.msgName = (this.worker) ? 'message' : 'newCoords';\n    this.listener = function(e) {\n\n      // Retrieving data\n      _this.nodesByteArray = new Float32Array(e.data.nodes);\n\n      // If ForceAtlas2 is running, we act accordingly\n      if (_this.running) {\n\n        // Applying layout\n        _this.applyLayoutChanges();\n\n        // Send data back to worker and loop\n        _this.sendByteArrayToWorker();\n\n        // Rendering graph\n        _this.sigInst.refresh();\n      }\n    };\n\n    (this.worker || document).addEventListener(this.msgName, this.listener);\n\n    // Filling byteArrays\n    this.graphToByteArrays();\n\n    // Binding on kill to properly terminate layout when parent is killed\n    sigInst.bind('kill', function() {\n      sigInst.killForceAtlas2();\n    });\n  }\n\n  Supervisor.prototype.makeBlob = function(workerFn) {\n    var blob;\n\n    try {\n      blob = new Blob([workerFn], {type: 'application/javascript'});\n    }\n    catch (e) {\n      _root.BlobBuilder = _root.BlobBuilder ||\n                          _root.WebKitBlobBuilder ||\n                          _root.MozBlobBuilder;\n\n      blob = new BlobBuilder();\n      blob.append(workerFn);\n      blob = blob.getBlob();\n    }\n\n    return blob;\n  };\n\n  Supervisor.prototype.graphToByteArrays = function() {\n    var nodes = this.graph.nodes(),\n        edges = this.graph.edges(),\n        nbytes = nodes.length * this.ppn,\n        ebytes = edges.length * this.ppe,\n        nIndex = {},\n        i,\n        j,\n        l;\n\n    // Allocating Byte arrays with correct nb of bytes\n    this.nodesByteArray = new Float32Array(nbytes);\n    this.edgesByteArray = new Float32Array(ebytes);\n\n    // Iterate through nodes\n    for (i = j = 0, l = nodes.length; i < l; i++) {\n\n      // Populating index\n      nIndex[nodes[i].id] = j;\n\n      // Populating byte array\n      this.nodesByteArray[j] = nodes[i].x;\n      this.nodesByteArray[j + 1] = nodes[i].y;\n      this.nodesByteArray[j + 2] = 0;\n      this.nodesByteArray[j + 3] = 0;\n      this.nodesByteArray[j + 4] = 0;\n      this.nodesByteArray[j + 5] = 0;\n      this.nodesByteArray[j + 6] = 1 + this.graph.degree(nodes[i].id);\n      this.nodesByteArray[j + 7] = 1;\n      this.nodesByteArray[j + 8] = nodes[i].size;\n      this.nodesByteArray[j + 9] = 0;\n      j += this.ppn;\n    }\n\n    // Iterate through edges\n    for (i = j = 0, l = edges.length; i < l; i++) {\n      this.edgesByteArray[j] = nIndex[edges[i].source];\n      this.edgesByteArray[j + 1] = nIndex[edges[i].target];\n      this.edgesByteArray[j + 2] = edges[i].weight || 0;\n      j += this.ppe;\n    }\n  };\n\n  // TODO: make a better send function\n  Supervisor.prototype.applyLayoutChanges = function() {\n    var nodes = this.graph.nodes(),\n        j = 0,\n        realIndex;\n\n    // Moving nodes\n    for (var i = 0, l = this.nodesByteArray.length; i < l; i += this.ppn) {\n      nodes[j].x = this.nodesByteArray[i];\n      nodes[j].y = this.nodesByteArray[i + 1];\n      j++;\n    }\n  };\n\n  Supervisor.prototype.sendByteArrayToWorker = function(action) {\n    var content = {\n      action: action || 'loop',\n      nodes: this.nodesByteArray.buffer\n    };\n\n    var buffers = [this.nodesByteArray.buffer];\n\n    if (action === 'start') {\n      content.config = this.config || {};\n      content.edges = this.edgesByteArray.buffer;\n      buffers.push(this.edgesByteArray.buffer);\n    }\n\n    if (this.shouldUseWorker)\n      this.worker.postMessage(content, buffers);\n    else\n      _root.postMessage(content, '*');\n  };\n\n  Supervisor.prototype.start = function() {\n    if (this.running)\n      return;\n\n    this.running = true;\n\n    // Do not refresh edgequadtree during layout:\n    var k,\n        c;\n    for (k in this.sigInst.cameras) {\n      c = this.sigInst.cameras[k];\n      c.edgequadtree._enabled = false;\n    }\n\n    if (!this.started) {\n\n      // Sending init message to worker\n      this.sendByteArrayToWorker('start');\n      this.started = true;\n    }\n    else {\n      this.sendByteArrayToWorker();\n    }\n  };\n\n  Supervisor.prototype.stop = function() {\n    if (!this.running)\n      return;\n\n    // Allow to refresh edgequadtree:\n    var k,\n        c,\n        bounds;\n    for (k in this.sigInst.cameras) {\n      c = this.sigInst.cameras[k];\n      c.edgequadtree._enabled = true;\n\n      // Find graph boundaries:\n      bounds = sigma.utils.getBoundaries(\n        this.graph,\n        c.readPrefix\n      );\n\n      // Refresh edgequadtree:\n      if (c.settings('drawEdges') && c.settings('enableEdgeHovering'))\n        c.edgequadtree.index(this.sigInst.graph, {\n          prefix: c.readPrefix,\n          bounds: {\n            x: bounds.minX,\n            y: bounds.minY,\n            width: bounds.maxX - bounds.minX,\n            height: bounds.maxY - bounds.minY\n          }\n        });\n    }\n\n    this.running = false;\n  };\n\n  Supervisor.prototype.killWorker = function() {\n    if (this.worker) {\n      this.worker.terminate();\n    }\n    else {\n      _root.postMessage({action: 'kill'}, '*');\n      document.removeEventListener(this.msgName, this.listener);\n    }\n  };\n\n  Supervisor.prototype.configure = function(config) {\n\n    // Setting configuration\n    this.config = config;\n\n    if (!this.started)\n      return;\n\n    var data = {action: 'config', config: this.config};\n\n    if (this.shouldUseWorker)\n      this.worker.postMessage(data);\n    else\n      _root.postMessage(data, '*');\n  };\n\n  /**\n   * Interface\n   * ----------\n   */\n  sigma.prototype.startForceAtlas2 = function(config) {\n\n    // Create supervisor if undefined\n    if (!this.supervisor)\n      this.supervisor = new Supervisor(this, config);\n\n    // Configuration provided?\n    if (config)\n      this.supervisor.configure(config);\n\n    // Start algorithm\n    this.supervisor.start();\n\n    return this;\n  };\n\n  sigma.prototype.stopForceAtlas2 = function() {\n    if (!this.supervisor)\n      return this;\n\n    // Pause algorithm\n    this.supervisor.stop();\n\n    return this;\n  };\n\n  sigma.prototype.killForceAtlas2 = function() {\n    if (!this.supervisor)\n      return this;\n\n    // Stop Algorithm\n    this.supervisor.stop();\n\n    // Kill Worker\n    this.supervisor.killWorker();\n\n    // Kill supervisor\n    this.supervisor = null;\n\n    return this;\n  };\n\n  sigma.prototype.configForceAtlas2 = function(config) {\n    if (!this.supervisor)\n      this.supervisor = new Supervisor(this, config);\n\n    this.supervisor.configure(config);\n\n    return this;\n  };\n\n  sigma.prototype.isForceAtlas2Running = function(config) {\n    return !!this.supervisor && this.supervisor.running;\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * Sigma ForceAtlas2.5 Webworker\n   * ==============================\n   *\n   * Author: Guillaume Plique (Yomguithereal)\n   * Algorithm author: Mathieu Jacomy @ Sciences Po Medialab & WebAtlas\n   * Version: 1.0.3\n   */\n\n  var _root = this,\n      inWebWorker = !('document' in _root);\n\n  /**\n   * Worker Function Wrapper\n   * ------------------------\n   *\n   * The worker has to be wrapped into a single stringified function\n   * to be passed afterwards as a BLOB object to the supervisor.\n   */\n  var Worker = function(undefined) {\n    'use strict';\n\n    /**\n     * Worker settings and properties\n     */\n    var W = {\n\n      // Properties\n      ppn: 10,\n      ppe: 3,\n      ppr: 9,\n      maxForce: 10,\n      iterations: 0,\n      converged: false,\n\n      // Possible to change through config\n      settings: {\n        linLogMode: false,\n        outboundAttractionDistribution: false,\n        adjustSizes: false,\n        edgeWeightInfluence: 0,\n        scalingRatio: 1,\n        strongGravityMode: false,\n        gravity: 1,\n        slowDown: 1,\n        barnesHutOptimize: false,\n        barnesHutTheta: 0.5,\n        startingIterations: 1,\n        iterationsPerRender: 1\n      }\n    };\n\n    var NodeMatrix,\n        EdgeMatrix,\n        RegionMatrix;\n\n    /**\n     * Helpers\n     */\n    function extend() {\n      var i,\n          k,\n          res = {},\n          l = arguments.length;\n\n      for (i = l - 1; i >= 0; i--)\n        for (k in arguments[i])\n          res[k] = arguments[i][k];\n      return res;\n    }\n\n    function __emptyObject(obj) {\n      var k;\n\n      for (k in obj)\n        if (!('hasOwnProperty' in obj) || obj.hasOwnProperty(k))\n          delete obj[k];\n\n      return obj;\n    }\n\n    /**\n     * Matrices properties accessors\n     */\n    var nodeProperties = {\n      x: 0,\n      y: 1,\n      dx: 2,\n      dy: 3,\n      old_dx: 4,\n      old_dy: 5,\n      mass: 6,\n      convergence: 7,\n      size: 8,\n      fixed: 9\n    };\n\n    var edgeProperties = {\n      source: 0,\n      target: 1,\n      weight: 2\n    };\n\n    var regionProperties = {\n      node: 0,\n      centerX: 1,\n      centerY: 2,\n      size: 3,\n      nextSibling: 4,\n      firstChild: 5,\n      mass: 6,\n      massCenterX: 7,\n      massCenterY: 8\n    };\n\n    function np(i, p) {\n\n      // DEBUG: safeguards\n      if ((i % W.ppn) !== 0)\n        throw 'np: non correct (' + i + ').';\n      if (i !== parseInt(i))\n        throw 'np: non int.';\n\n      if (p in nodeProperties)\n        return i + nodeProperties[p];\n      else\n        throw 'ForceAtlas2.Worker - ' +\n              'Inexistant node property given (' + p + ').';\n    }\n\n    function ep(i, p) {\n\n      // DEBUG: safeguards\n      if ((i % W.ppe) !== 0)\n        throw 'ep: non correct (' + i + ').';\n      if (i !== parseInt(i))\n        throw 'ep: non int.';\n\n      if (p in edgeProperties)\n        return i + edgeProperties[p];\n      else\n        throw 'ForceAtlas2.Worker - ' +\n              'Inexistant edge property given (' + p + ').';\n    }\n\n    function rp(i, p) {\n\n      // DEBUG: safeguards\n      if ((i % W.ppr) !== 0)\n        throw 'rp: non correct (' + i + ').';\n      if (i !== parseInt(i))\n        throw 'rp: non int.';\n\n      if (p in regionProperties)\n        return i + regionProperties[p];\n      else\n        throw 'ForceAtlas2.Worker - ' +\n              'Inexistant region property given (' + p + ').';\n    }\n\n    // DEBUG\n    function nan(v) {\n      if (isNaN(v))\n        throw 'NaN alert!';\n    }\n\n\n    /**\n     * Algorithm initialization\n     */\n\n    function init(nodes, edges, config) {\n      config = config || {};\n      var i, l;\n\n      // Matrices\n      NodeMatrix = nodes;\n      EdgeMatrix = edges;\n\n      // Length\n      W.nodesLength = NodeMatrix.length;\n      W.edgesLength = EdgeMatrix.length;\n\n      // Merging configuration\n      configure(config);\n    }\n\n    function configure(o) {\n      W.settings = extend(o, W.settings);\n    }\n\n    /**\n     * Algorithm pass\n     */\n\n    // MATH: get distances stuff and power 2 issues\n    function pass() {\n      var a, i, j, l, r, n, n1, n2, e, w, g, k, m;\n\n      var outboundAttCompensation,\n          coefficient,\n          xDist,\n          yDist,\n          ewc,\n          mass,\n          distance,\n          size,\n          factor;\n\n      // 1) Initializing layout data\n      //-----------------------------\n\n      // Resetting positions & computing max values\n      for (n = 0; n < W.nodesLength; n += W.ppn) {\n        NodeMatrix[np(n, 'old_dx')] = NodeMatrix[np(n, 'dx')];\n        NodeMatrix[np(n, 'old_dy')] = NodeMatrix[np(n, 'dy')];\n        NodeMatrix[np(n, 'dx')] = 0;\n        NodeMatrix[np(n, 'dy')] = 0;\n      }\n\n      // If outbound attraction distribution, compensate\n      if (W.settings.outboundAttractionDistribution) {\n        outboundAttCompensation = 0;\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          outboundAttCompensation += NodeMatrix[np(n, 'mass')];\n        }\n\n        outboundAttCompensation /= W.nodesLength;\n      }\n\n\n      // 1.bis) Barnes-Hut computation\n      //------------------------------\n\n      if (W.settings.barnesHutOptimize) {\n\n        var minX = Infinity,\n            maxX = -Infinity,\n            minY = Infinity,\n            maxY = -Infinity,\n            q, q0, q1, q2, q3;\n\n        // Setting up\n        // RegionMatrix = new Float32Array(W.nodesLength / W.ppn * 4 * W.ppr);\n        RegionMatrix = [];\n\n        // Computing min and max values\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          minX = Math.min(minX, NodeMatrix[np(n, 'x')]);\n          maxX = Math.max(maxX, NodeMatrix[np(n, 'x')]);\n          minY = Math.min(minY, NodeMatrix[np(n, 'y')]);\n          maxY = Math.max(maxY, NodeMatrix[np(n, 'y')]);\n        }\n\n        // Build the Barnes Hut root region\n        RegionMatrix[rp(0, 'node')] = -1;\n        RegionMatrix[rp(0, 'centerX')] = (minX + maxX) / 2;\n        RegionMatrix[rp(0, 'centerY')] = (minY + maxY) / 2;\n        RegionMatrix[rp(0, 'size')] = Math.max(maxX - minX, maxY - minY);\n        RegionMatrix[rp(0, 'nextSibling')] = -1;\n        RegionMatrix[rp(0, 'firstChild')] = -1;\n        RegionMatrix[rp(0, 'mass')] = 0;\n        RegionMatrix[rp(0, 'massCenterX')] = 0;\n        RegionMatrix[rp(0, 'massCenterY')] = 0;\n\n        // Add each node in the tree\n        l = 1;\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n\n          // Current region, starting with root\n          r = 0;\n\n          while (true) {\n            // Are there sub-regions?\n\n            // We look at first child index\n            if (RegionMatrix[rp(r, 'firstChild')] >= 0) {\n\n              // There are sub-regions\n\n              // We just iterate to find a \"leave\" of the tree\n              // that is an empty region or a region with a single node\n              // (see next case)\n\n              // Find the quadrant of n\n              if (NodeMatrix[np(n, 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n\n                if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                  // Top Left quarter\n                  q = RegionMatrix[rp(r, 'firstChild')];\n                }\n                else {\n\n                  // Bottom Left quarter\n                  q = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                }\n              }\n              else {\n                if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                  // Top Right quarter\n                  q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                }\n                else {\n\n                  // Bottom Right quarter\n                  q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                }\n              }\n\n              // Update center of mass and mass (we only do it for non-leave regions)\n              RegionMatrix[rp(r, 'massCenterX')] =\n                (RegionMatrix[rp(r, 'massCenterX')] * RegionMatrix[rp(r, 'mass')] +\n                 NodeMatrix[np(n, 'x')] * NodeMatrix[np(n, 'mass')]) /\n                (RegionMatrix[rp(r, 'mass')] + NodeMatrix[np(n, 'mass')]);\n\n              RegionMatrix[rp(r, 'massCenterY')] =\n                (RegionMatrix[rp(r, 'massCenterY')] * RegionMatrix[rp(r, 'mass')] +\n                 NodeMatrix[np(n, 'y')] * NodeMatrix[np(n, 'mass')]) /\n                (RegionMatrix[rp(r, 'mass')] + NodeMatrix[np(n, 'mass')]);\n\n              RegionMatrix[rp(r, 'mass')] += NodeMatrix[np(n, 'mass')];\n\n              // Iterate on the right quadrant\n              r = q;\n              continue;\n            }\n            else {\n\n              // There are no sub-regions: we are in a \"leave\"\n\n              // Is there a node in this leave?\n              if (RegionMatrix[rp(r, 'node')] < 0) {\n\n                // There is no node in region:\n                // we record node n and go on\n                RegionMatrix[rp(r, 'node')] = n;\n                break;\n              }\n              else {\n\n                // There is a node in this region\n\n                // We will need to create sub-regions, stick the two\n                // nodes (the old one r[0] and the new one n) in two\n                // subregions. If they fall in the same quadrant,\n                // we will iterate.\n\n                // Create sub-regions\n                RegionMatrix[rp(r, 'firstChild')] = l * W.ppr;\n                w = RegionMatrix[rp(r, 'size')] / 2;  // new size (half)\n\n                // NOTE: we use screen coordinates\n                // from Top Left to Bottom Right\n\n                // Top Left sub-region\n                g = RegionMatrix[rp(r, 'firstChild')];\n\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] - w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] - w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                // Bottom Left sub-region\n                g += W.ppr;\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] - w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] + w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                // Top Right sub-region\n                g += W.ppr;\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] + w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] - w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                // Bottom Right sub-region\n                g += W.ppr;\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] + w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] + w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = RegionMatrix[rp(r, 'nextSibling')];\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                l += 4;\n\n                // Now the goal is to find two different sub-regions\n                // for the two nodes: the one previously recorded (r[0])\n                // and the one we want to add (n)\n\n                // Find the quadrant of the old node\n                if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n                  if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Left quarter\n                    q = RegionMatrix[rp(r, 'firstChild')];\n                  }\n                  else {\n\n                    // Bottom Left quarter\n                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                  }\n                }\n                else {\n                  if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Right quarter\n                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                  }\n                  else {\n\n                    // Bottom Right quarter\n                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                  }\n                }\n\n                // We remove r[0] from the region r, add its mass to r and record it in q\n                RegionMatrix[rp(r, 'mass')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')];\n                RegionMatrix[rp(r, 'massCenterX')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')];\n                RegionMatrix[rp(r, 'massCenterY')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')];\n\n                RegionMatrix[rp(q, 'node')] = RegionMatrix[rp(r, 'node')];\n                RegionMatrix[rp(r, 'node')] = -1;\n\n                // Find the quadrant of n\n                if (NodeMatrix[np(n, 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n                  if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Left quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')];\n                  }\n                  else {\n                    // Bottom Left quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                  }\n                }\n                else {\n                  if(NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Right quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                  }\n                  else {\n\n                    // Bottom Right quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                  }\n                }\n\n                if (q === q2) {\n\n                  // If both nodes are in the same quadrant,\n                  // we have to try it again on this quadrant\n                  r = q;\n                  continue;\n                }\n\n                // If both quadrants are different, we record n\n                // in its quadrant\n                RegionMatrix[rp(q2, 'node')] = n;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n\n      // 2) Repulsion\n      //--------------\n      // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n      if (W.settings.barnesHutOptimize) {\n        coefficient = W.settings.scalingRatio;\n\n        // Applying repulsion through regions\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n\n          // Computing leaf quad nodes iteration\n\n          r = 0; // Starting with root region\n          while (true) {\n\n            if (RegionMatrix[rp(r, 'firstChild')] >= 0) {\n\n              // The region has sub-regions\n\n              // We run the Barnes Hut test to see if we are at the right distance\n              distance = Math.sqrt(\n                (Math.pow(NodeMatrix[np(n, 'x')] - RegionMatrix[rp(r, 'massCenterX')], 2)) +\n                (Math.pow(NodeMatrix[np(n, 'y')] - RegionMatrix[rp(r, 'massCenterY')], 2))\n              );\n\n              if (2 * RegionMatrix[rp(r, 'size')] / distance < W.settings.barnesHutTheta) {\n\n                // We treat the region as a single body, and we repulse\n\n                xDist = NodeMatrix[np(n, 'x')] - RegionMatrix[rp(r, 'massCenterX')];\n                yDist = NodeMatrix[np(n, 'y')] - RegionMatrix[rp(r, 'massCenterY')];\n\n                if (W.settings.adjustSizes) {\n\n                  //-- Linear Anti-collision Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      RegionMatrix[rp(r, 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                  else if (distance < 0) {\n                    factor = -coefficient * NodeMatrix[np(n, 'mass')] *\n                      RegionMatrix[rp(r, 'mass')] / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n                else {\n\n                  //-- Linear Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      RegionMatrix[rp(r, 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n\n                // When this is done, we iterate. We have to look at the next sibling.\n                if (RegionMatrix[rp(r, 'nextSibling')] < 0)\n                  break;  // No next sibling: we have finished the tree\n                r = RegionMatrix[rp(r, 'nextSibling')];\n                continue;\n\n              }\n              else {\n\n                // The region is too close and we have to look at sub-regions\n                r = RegionMatrix[rp(r, 'firstChild')];\n                continue;\n              }\n\n            }\n            else {\n\n              // The region has no sub-region\n              // If there is a node r[0] and it is not n, then repulse\n\n              if (RegionMatrix[rp(r, 'node')] >= 0 && RegionMatrix[rp(r, 'node')] !== n) {\n                xDist = NodeMatrix[np(n, 'x')] - NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')];\n                yDist = NodeMatrix[np(n, 'y')] - NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')];\n\n                distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n                if (W.settings.adjustSizes) {\n\n                  //-- Linear Anti-collision Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                  else if (distance < 0) {\n                    factor = -coefficient * NodeMatrix[np(n, 'mass')] *\n                      NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n                else {\n\n                  //-- Linear Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n\n              }\n\n              // When this is done, we iterate. We have to look at the next sibling.\n              if (RegionMatrix[rp(r, 'nextSibling')] < 0)\n                break;  // No next sibling: we have finished the tree\n              r = RegionMatrix[rp(r, 'nextSibling')];\n              continue;\n            }\n          }\n        }\n      }\n      else {\n        coefficient = W.settings.scalingRatio;\n\n        // Square iteration\n        for (n1 = 0; n1 < W.nodesLength; n1 += W.ppn) {\n          for (n2 = 0; n2 < n1; n2 += W.ppn) {\n\n            // Common to both methods\n            xDist = NodeMatrix[np(n1, 'x')] - NodeMatrix[np(n2, 'x')];\n            yDist = NodeMatrix[np(n1, 'y')] - NodeMatrix[np(n2, 'y')];\n\n            if (W.settings.adjustSizes) {\n\n              //-- Anticollision Linear Repulsion\n              distance = Math.sqrt(xDist * xDist + yDist * yDist) -\n                NodeMatrix[np(n1, 'size')] -\n                NodeMatrix[np(n2, 'size')];\n\n              if (distance > 0) {\n                factor = coefficient *\n                  NodeMatrix[np(n1, 'mass')] *\n                  NodeMatrix[np(n2, 'mass')] /\n                  distance / distance;\n\n                // Updating nodes' dx and dy\n                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                NodeMatrix[np(n2, 'dx')] += xDist * factor;\n                NodeMatrix[np(n2, 'dy')] += yDist * factor;\n              }\n              else if (distance < 0) {\n                factor = 100 * coefficient *\n                  NodeMatrix[np(n1, 'mass')] *\n                  NodeMatrix[np(n2, 'mass')];\n\n                // Updating nodes' dx and dy\n                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n              }\n            }\n            else {\n\n              //-- Linear Repulsion\n              distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n              if (distance > 0) {\n                factor = coefficient *\n                  NodeMatrix[np(n1, 'mass')] *\n                  NodeMatrix[np(n2, 'mass')] /\n                  distance / distance;\n\n                // Updating nodes' dx and dy\n                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n              }\n            }\n          }\n        }\n      }\n\n\n      // 3) Gravity\n      //------------\n      g = W.settings.gravity / W.settings.scalingRatio;\n      coefficient = W.settings.scalingRatio;\n      for (n = 0; n < W.nodesLength; n += W.ppn) {\n        factor = 0;\n\n        // Common to both methods\n        xDist = NodeMatrix[np(n, 'x')];\n        yDist = NodeMatrix[np(n, 'y')];\n        distance = Math.sqrt(\n          Math.pow(xDist, 2) + Math.pow(yDist, 2)\n        );\n\n        if (W.settings.strongGravityMode) {\n\n          //-- Strong gravity\n          if (distance > 0)\n            factor = coefficient * NodeMatrix[np(n, 'mass')] * g;\n        }\n        else {\n\n          //-- Linear Anti-collision Repulsion n\n          if (distance > 0)\n            factor = coefficient * NodeMatrix[np(n, 'mass')] * g / distance;\n        }\n\n        // Updating node's dx and dy\n        NodeMatrix[np(n, 'dx')] -= xDist * factor;\n        NodeMatrix[np(n, 'dy')] -= yDist * factor;\n      }\n\n\n\n      // 4) Attraction\n      //---------------\n      coefficient = 1 *\n        (W.settings.outboundAttractionDistribution ?\n          outboundAttCompensation :\n          1);\n\n      // TODO: simplify distance\n      // TODO: coefficient is always used as -c --> optimize?\n      for (e = 0; e < W.edgesLength; e += W.ppe) {\n        n1 = EdgeMatrix[ep(e, 'source')];\n        n2 = EdgeMatrix[ep(e, 'target')];\n        w = EdgeMatrix[ep(e, 'weight')];\n\n        // Edge weight influence\n        ewc = Math.pow(w, W.settings.edgeWeightInfluence);\n\n        // Common measures\n        xDist = NodeMatrix[np(n1, 'x')] - NodeMatrix[np(n2, 'x')];\n        yDist = NodeMatrix[np(n1, 'y')] - NodeMatrix[np(n2, 'y')];\n\n        // Applying attraction to nodes\n        if (W.settings.adjustSizes) {\n\n          distance = Math.sqrt(\n            (Math.pow(xDist, 2) + Math.pow(yDist, 2)) -\n            NodeMatrix[np(n1, 'size')] -\n            NodeMatrix[np(n2, 'size')]\n          );\n\n          if (W.settings.linLogMode) {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- LinLog Degree Distributed Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc * Math.log(1 + distance) /\n                distance /\n                NodeMatrix[np(n1, 'mass')];\n              }\n            }\n            else {\n\n              //-- LinLog Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc * Math.log(1 + distance) / distance;\n              }\n            }\n          }\n          else {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- Linear Degree Distributed Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc / NodeMatrix[np(n1, 'mass')];\n              }\n            }\n            else {\n\n              //-- Linear Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc;\n              }\n            }\n          }\n        }\n        else {\n\n          distance = Math.sqrt(\n            Math.pow(xDist, 2) + Math.pow(yDist, 2)\n          );\n\n          if (W.settings.linLogMode) {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- LinLog Degree Distributed Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc * Math.log(1 + distance) /\n                  distance /\n                  NodeMatrix[np(n1, 'mass')];\n              }\n            }\n            else {\n\n              //-- LinLog Attraction\n              if (distance > 0)\n                factor = -coefficient * ewc * Math.log(1 + distance) / distance;\n            }\n          }\n          else {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- Linear Attraction Mass Distributed\n              // NOTE: Distance is set to 1 to override next condition\n              distance = 1;\n              factor = -coefficient * ewc / NodeMatrix[np(n1, 'mass')];\n            }\n            else {\n\n              //-- Linear Attraction\n              // NOTE: Distance is set to 1 to override next condition\n              distance = 1;\n              factor = -coefficient * ewc;\n            }\n          }\n        }\n\n        // Updating nodes' dx and dy\n        // TODO: if condition or factor = 1?\n        if (distance > 0) {\n\n          // Updating nodes' dx and dy\n          NodeMatrix[np(n1, 'dx')] += xDist * factor;\n          NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n          NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n          NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n        }\n      }\n\n\n      // 5) Apply Forces\n      //-----------------\n      var force,\n          swinging,\n          traction,\n          nodespeed;\n\n      // MATH: sqrt and square distances\n      if (W.settings.adjustSizes) {\n\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          if (!NodeMatrix[np(n, 'fixed')]) {\n            force = Math.sqrt(\n              Math.pow(NodeMatrix[np(n, 'dx')], 2) +\n              Math.pow(NodeMatrix[np(n, 'dy')], 2)\n            );\n\n            if (force > W.maxForce) {\n              NodeMatrix[np(n, 'dx')] =\n                NodeMatrix[np(n, 'dx')] * W.maxForce / force;\n              NodeMatrix[np(n, 'dy')] =\n                NodeMatrix[np(n, 'dy')] * W.maxForce / force;\n            }\n\n            swinging = NodeMatrix[np(n, 'mass')] *\n              Math.sqrt(\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) *\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) +\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')]) *\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')])\n              );\n\n            traction = Math.sqrt(\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) *\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) +\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')]) *\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')])\n            ) / 2;\n\n            nodespeed =\n              0.1 * Math.log(1 + traction) / (1 + Math.sqrt(swinging));\n\n            // Updating node's positon\n            NodeMatrix[np(n, 'x')] =\n              NodeMatrix[np(n, 'x')] + NodeMatrix[np(n, 'dx')] *\n              (nodespeed / W.settings.slowDown);\n            NodeMatrix[np(n, 'y')] =\n              NodeMatrix[np(n, 'y')] + NodeMatrix[np(n, 'dy')] *\n              (nodespeed / W.settings.slowDown);\n          }\n        }\n      }\n      else {\n\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          if (!NodeMatrix[np(n, 'fixed')]) {\n\n            swinging = NodeMatrix[np(n, 'mass')] *\n              Math.sqrt(\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) *\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) +\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')]) *\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')])\n              );\n\n            traction = Math.sqrt(\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) *\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) +\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')]) *\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')])\n            ) / 2;\n\n            nodespeed = NodeMatrix[np(n, 'convergence')] *\n              Math.log(1 + traction) / (1 + Math.sqrt(swinging));\n\n            // Updating node convergence\n            NodeMatrix[np(n, 'convergence')] =\n              Math.min(1, Math.sqrt(\n                nodespeed *\n                (Math.pow(NodeMatrix[np(n, 'dx')], 2) +\n                 Math.pow(NodeMatrix[np(n, 'dy')], 2)) /\n                (1 + Math.sqrt(swinging))\n              ));\n\n            // Updating node's positon\n            NodeMatrix[np(n, 'x')] =\n              NodeMatrix[np(n, 'x')] + NodeMatrix[np(n, 'dx')] *\n              (nodespeed / W.settings.slowDown);\n            NodeMatrix[np(n, 'y')] =\n              NodeMatrix[np(n, 'y')] + NodeMatrix[np(n, 'dy')] *\n              (nodespeed / W.settings.slowDown);\n          }\n        }\n      }\n\n      // Counting one more iteration\n      W.iterations++;\n    }\n\n    /**\n     * Message reception & sending\n     */\n\n    // Sending data back to the supervisor\n    var sendNewCoords;\n\n    if (typeof window !== 'undefined' && window.document) {\n\n      // From same document as sigma\n      sendNewCoords = function() {\n        var e;\n\n        if (document.createEvent) {\n          e = document.createEvent('Event');\n          e.initEvent('newCoords', true, false);\n        }\n        else {\n          e = document.createEventObject();\n          e.eventType = 'newCoords';\n        }\n\n        e.eventName = 'newCoords';\n        e.data = {\n          nodes: NodeMatrix.buffer\n        };\n        requestAnimationFrame(function() {\n          document.dispatchEvent(e);\n        });\n      };\n    }\n    else {\n\n      // From a WebWorker\n      sendNewCoords = function() {\n        self.postMessage(\n          {nodes: NodeMatrix.buffer},\n          [NodeMatrix.buffer]\n        );\n      };\n    }\n\n    // Algorithm run\n    function run(n) {\n      for (var i = 0; i < n; i++)\n        pass();\n      sendNewCoords();\n    }\n\n    // On supervisor message\n    var listener = function(e) {\n      switch (e.data.action) {\n        case 'start':\n          init(\n            new Float32Array(e.data.nodes),\n            new Float32Array(e.data.edges),\n            e.data.config\n          );\n\n          // First iteration(s)\n          run(W.settings.startingIterations);\n          break;\n\n        case 'loop':\n          NodeMatrix = new Float32Array(e.data.nodes);\n          run(W.settings.iterationsPerRender);\n          break;\n\n        case 'config':\n\n          // Merging new settings\n          configure(e.data.config);\n          break;\n\n        case 'kill':\n\n          // Deleting context for garbage collection\n          __emptyObject(W);\n          NodeMatrix = null;\n          EdgeMatrix = null;\n          RegionMatrix = null;\n          self.removeEventListener('message', listener);\n          break;\n\n        default:\n      }\n    };\n\n    // Adding event listener\n    self.addEventListener('message', listener);\n  };\n\n\n  /**\n   * Exporting\n   * ----------\n   *\n   * Crush the worker function and make it accessible by sigma's instances so\n   * the supervisor can call it.\n   */\n  function crush(fnString) {\n    var pattern,\n        i,\n        l;\n\n    var np = [\n      'x',\n      'y',\n      'dx',\n      'dy',\n      'old_dx',\n      'old_dy',\n      'mass',\n      'convergence',\n      'size',\n      'fixed'\n    ];\n\n    var ep = [\n      'source',\n      'target',\n      'weight'\n    ];\n\n    var rp = [\n      'node',\n      'centerX',\n      'centerY',\n      'size',\n      'nextSibling',\n      'firstChild',\n      'mass',\n      'massCenterX',\n      'massCenterY'\n    ];\n\n    // rp\n    // NOTE: Must go first\n    for (i = 0, l = rp.length; i < l; i++) {\n      pattern = new RegExp('rp\\\\(([^,]*), \\'' + rp[i] + '\\'\\\\)', 'g');\n      fnString = fnString.replace(\n        pattern,\n        (i === 0) ? '$1' : '$1 + ' + i\n      );\n    }\n\n    // np\n    for (i = 0, l = np.length; i < l; i++) {\n      pattern = new RegExp('np\\\\(([^,]*), \\'' + np[i] + '\\'\\\\)', 'g');\n      fnString = fnString.replace(\n        pattern,\n        (i === 0) ? '$1' : '$1 + ' + i\n      );\n    }\n\n    // ep\n    for (i = 0, l = ep.length; i < l; i++) {\n      pattern = new RegExp('ep\\\\(([^,]*), \\'' + ep[i] + '\\'\\\\)', 'g');\n      fnString = fnString.replace(\n        pattern,\n        (i === 0) ? '$1' : '$1 + ' + i\n      );\n    }\n\n    return fnString;\n  }\n\n  // Exporting\n  function getWorkerFn() {\n    var fnString = crush ? crush(Worker.toString()) : Worker.toString();\n    return ';(' + fnString + ').call(this);';\n  }\n\n  if (inWebWorker) {\n\n    // We are in a webworker, so we launch the Worker function\n    eval(getWorkerFn());\n  }\n  else {\n\n    // We are requesting the worker from sigma, we retrieve it therefore\n    if (typeof sigma === 'undefined')\n      throw 'sigma is not declared';\n\n    sigma.prototype.getForceAtlas2Worker = getWorkerFn;\n  }\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 118);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 118:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw new Error('sigma is not declared');\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.layout.noverlap');\n\n  /**\n   * Noverlap Layout\n   * ===============================\n   *\n   * Author: @apitts / Andrew Pitts\n   * Algorithm: @jacomyma / Mathieu Jacomy (originally contributed to Gephi and ported to sigma.js under the MIT license by @andpitts with permission)\n   * Acknowledgement: @sheyman / Sébastien Heymann (some inspiration has been taken from other MIT licensed layout algorithms authored by @sheyman)\n   * Version: 0.1\n   */\n\n  var settings = {\n    speed: 3,\n    scaleNodes: 1.2,\n    nodeMargin: 5.0,\n    gridSize: 20,\n    permittedExpansion: 1.1,\n    rendererIndex: 0,\n    maxIterations: 500\n  };\n\n  var _instance = {};\n\n  /**\n   * Event emitter Object\n   * ------------------\n   */\n  var _eventEmitter = {};\n\n   /**\n   * Noverlap Object\n   * ------------------\n   */\n  function Noverlap() {\n    var self = this;\n\n    this.init = function (sigInst, options) {\n      options = options || {};\n\n      // Properties\n      this.sigInst = sigInst;\n      this.config = sigma.utils.extend(options, settings);\n      this.easing = options.easing;\n      this.duration = options.duration;\n\n      if (options.nodes) {\n        this.nodes = options.nodes;\n        delete options.nodes;\n      }\n\n      if (!sigma.plugins || typeof sigma.plugins.animate === 'undefined') {\n        throw new Error('sigma.plugins.animate is not declared');\n      }\n\n      // State\n      this.running = false;\n    };\n\n    /**\n     * Single layout iteration.\n     */\n    this.atomicGo = function () {\n      if (!this.running || this.iterCount < 1) return false;\n\n      var nodes = this.nodes || this.sigInst.graph.nodes(),\n          nodesCount = nodes.length,\n          i,\n          n,\n          n1,\n          n2,\n          xmin = Infinity,\n          xmax = -Infinity,\n          ymin = Infinity,\n          ymax = -Infinity,\n          xwidth,\n          yheight,\n          xcenter,\n          ycenter,\n          grid,\n          row,\n          col,\n          minXBox,\n          maxXBox,\n          minYBox,\n          maxYBox,\n          adjacentNodes,\n          subRow,\n          subCol,\n          nxmin,\n          nxmax,\n          nymin,\n          nymax;\n\n      this.iterCount--;\n      this.running = false;\n\n      for (i=0; i < nodesCount; i++) {\n        n = nodes[i];\n        n.dn.dx = 0;\n        n.dn.dy = 0;\n\n        //Find the min and max for both x and y across all nodes\n        xmin = Math.min(xmin, n.dn_x - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n        xmax = Math.max(xmax, n.dn_x + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n        ymin = Math.min(ymin, n.dn_y - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n        ymax = Math.max(ymax, n.dn_y + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n\n      }\n\n      xwidth = xmax - xmin;\n      yheight = ymax - ymin;\n      xcenter = (xmin + xmax) / 2;\n      ycenter = (ymin + ymax) / 2;\n      xmin = xcenter - self.config.permittedExpansion*xwidth / 2;\n      xmax = xcenter + self.config.permittedExpansion*xwidth / 2;\n      ymin = ycenter - self.config.permittedExpansion*yheight / 2;\n      ymax = ycenter + self.config.permittedExpansion*yheight / 2;\n\n      grid = {}; //An object of objects where grid[row][col] is an array of node ids representing nodes that fall in that grid. Nodes can fall in more than one grid\n\n      for(row = 0; row < self.config.gridSize; row++) {\n        grid[row] = {};\n        for(col = 0; col < self.config.gridSize; col++) {\n          grid[row][col] = [];\n        }\n      }\n\n      //Place nodes in grid\n      for (i=0; i < nodesCount; i++) {\n        n = nodes[i];\n\n        nxmin = n.dn_x - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n        nxmax = n.dn_x + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n        nymin = n.dn_y - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n        nymax = n.dn_y + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n\n        minXBox = Math.floor(self.config.gridSize* (nxmin - xmin) / (xmax - xmin) );\n        maxXBox = Math.floor(self.config.gridSize* (nxmax - xmin) / (xmax - xmin) );\n        minYBox = Math.floor(self.config.gridSize* (nymin - ymin) / (ymax - ymin) );\n        maxYBox = Math.floor(self.config.gridSize* (nymax - ymin) / (ymax - ymin) );\n        for(col = minXBox; col <= maxXBox; col++) {\n          for(row = minYBox; row <= maxYBox; row++) {\n            grid[row][col].push(n.id);\n          }\n        }\n      }\n\n\n      adjacentNodes = {}; //An object that stores the node ids of adjacent nodes (either in same grid box or adjacent grid box) for all nodes\n\n      for(row = 0; row < self.config.gridSize; row++) {\n        for(col = 0; col < self.config.gridSize; col++) {\n          grid[row][col].forEach(function(nodeId) {\n            if(!adjacentNodes[nodeId]) {\n              adjacentNodes[nodeId] = [];\n            }\n            for(subRow = Math.max(0, row - 1); subRow <= Math.min(row + 1, self.config.gridSize - 1); subRow++) {\n              for(subCol = Math.max(0, col - 1); subCol <= Math.min(col + 1,  self.config.gridSize - 1); subCol++) {\n                grid[subRow][subCol].forEach(function(subNodeId) {\n                  if(subNodeId !== nodeId && adjacentNodes[nodeId].indexOf(subNodeId) === -1) {\n                    adjacentNodes[nodeId].push(subNodeId);\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n\n      //If two nodes overlap then repulse them\n      for (i=0; i < nodesCount; i++) {\n        n1 = nodes[i];\n        adjacentNodes[n1.id].forEach(function(nodeId) {\n          var n2 = self.sigInst.graph.nodes(nodeId);\n          var xDist = n2.dn_x - n1.dn_x;\n          var yDist = n2.dn_y - n1.dn_y;\n          var dist = Math.sqrt(xDist*xDist + yDist*yDist);\n          var collision = (dist < ((n1.dn_size*self.config.scaleNodes + self.config.nodeMargin) + (n2.dn_size*self.config.scaleNodes + self.config.nodeMargin)));\n          if(collision) {\n            self.running = true;\n            if(dist > 0) {\n              n2.dn.dx += xDist / dist * (1 + n1.dn_size);\n              n2.dn.dy += yDist / dist * (1 + n1.dn_size);\n            } else {\n              n2.dn.dx += xwidth * 0.01 * (0.5 - Math.random());\n              n2.dn.dy += yheight * 0.01 * (0.5 - Math.random());\n            }\n          }\n        });\n      }\n\n      for (i=0; i < nodesCount; i++) {\n        n = nodes[i];\n        if(!n.fixed) {\n          n.dn_x = n.dn_x + n.dn.dx * 0.1 * self.config.speed;\n          n.dn_y = n.dn_y + n.dn.dy * 0.1 * self.config.speed;\n        }\n      }\n\n      if(this.running && this.iterCount < 1) {\n        this.running = false;\n      }\n\n      return this.running;\n    };\n\n    this.go = function () {\n      this.iterCount = this.config.maxIterations;\n\n      while (this.running) {\n        this.atomicGo();\n      };\n\n      this.stop();\n    };\n\n    this.start = function() {\n      if (this.running) return;\n\n      var nodes = this.sigInst.graph.nodes();\n\n      var prefix = this.sigInst.renderers[self.config.rendererIndex].options.prefix;\n\n      this.running = true;\n\n      // Init nodes\n      for (var i = 0; i < nodes.length; i++) {\n        nodes[i].dn_x = nodes[i][prefix + 'x'];\n        nodes[i].dn_y = nodes[i][prefix + 'y'];\n        nodes[i].dn_size = nodes[i][prefix + 'size'];\n        nodes[i].dn = {\n          dx: 0,\n          dy: 0\n        };\n      }\n      _eventEmitter[self.sigInst.id].dispatchEvent('start');\n      this.go();\n    };\n\n    this.stop = function() {\n      var nodes = this.sigInst.graph.nodes();\n\n      this.running = false;\n\n      if (this.easing) {\n        _eventEmitter[self.sigInst.id].dispatchEvent('interpolate');\n        sigma.plugins.animate(\n          self.sigInst,\n          {\n            x: 'dn_x',\n            y: 'dn_y'\n          },\n          {\n            easing: self.easing,\n            onComplete: function() {\n              self.sigInst.refresh();\n              for (var i = 0; i < nodes.length; i++) {\n                nodes[i].dn = null;\n                nodes[i].dn_x = null;\n                nodes[i].dn_y = null;\n              }\n              _eventEmitter[self.sigInst.id].dispatchEvent('stop');\n            },\n            duration: self.duration\n          }\n        );\n      }\n      else {\n        // Apply changes\n        for (var i = 0; i < nodes.length; i++) {\n          nodes[i].x = nodes[i].dn_x;\n          nodes[i].y = nodes[i].dn_y;\n        }\n\n        this.sigInst.refresh();\n\n        for (var i = 0; i < nodes.length; i++) {\n          nodes[i].dn = null;\n          nodes[i].dn_x = null;\n          nodes[i].dn_y = null;\n        }\n        _eventEmitter[self.sigInst.id].dispatchEvent('stop');\n      }\n    };\n\n    this.kill = function() {\n      this.sigInst = null;\n      this.config = null;\n      this.easing = null;\n    };\n  };\n\n  /**\n   * Interface\n   * ----------\n   */\n\n  /**\n   * Configure the layout algorithm.\n\n   * Recognized options:\n   * **********************\n   * Here is the exhaustive list of every accepted parameter in the settings\n   * object:\n   *\n   *   {?number}            speed               A larger value increases the convergence speed at the cost of precision\n   *   {?number}            scaleNodes          The ratio to scale nodes by - a larger ratio will lead to more space around larger nodes\n   *   {?number}            nodeMargin          A fixed margin to apply around nodes regardless of size\n   *   {?number}            maxIterations       The maximum number of iterations to perform before the layout completes.\n   *   {?integer}           gridSize            The number of rows and columns to use when partioning nodes into a grid for efficient computation\n   *   {?number}            permittedExpansion  A permitted expansion factor to the overall size of the network applied at each iteration\n   *   {?integer}           rendererIndex       The index of the renderer to use for node co-ordinates. Defaults to zero.\n   *   {?(function|string)} easing              Either the name of an easing in the sigma.utils.easings package or a function. If not specified, the\n   *                                            quadraticInOut easing from this package will be used instead.\n   *   {?number}            duration            The duration of the animation. If not specified, the \"animationsTime\" setting value of the sigma instance will be used instead.\n   *\n   *\n   * @param  {object} config  The optional configuration object.\n   *\n   * @return {sigma.classes.dispatcher} Returns an event emitter.\n   */\n  sigma.prototype.configNoverlap = function(config) {\n\n    var sigInst = this;\n\n    if (!config) throw new Error('Missing argument: \"config\"');\n\n    // Create instance if undefined\n    if (!_instance[sigInst.id]) {\n      _instance[sigInst.id] = new Noverlap();\n\n      _eventEmitter[sigInst.id] = {};\n      sigma.classes.dispatcher.extend(_eventEmitter[sigInst.id]);\n\n      // Binding on kill to clear the references\n      sigInst.bind('kill', function() {\n        _instance[sigInst.id].kill();\n        _instance[sigInst.id] = null;\n        _eventEmitter[sigInst.id] = null;\n      });\n    }\n\n    _instance[sigInst.id].init(sigInst, config);\n\n    return _eventEmitter[sigInst.id];\n  };\n\n  /**\n   * Start the layout algorithm. It will use the existing configuration if no\n   * new configuration is passed.\n\n   * Recognized options:\n   * **********************\n   * Here is the exhaustive list of every accepted parameter in the settings\n   * object\n   *\n   *   {?number}            speed               A larger value increases the convergence speed at the cost of precision\n   *   {?number}            scaleNodes          The ratio to scale nodes by - a larger ratio will lead to more space around larger nodes\n   *   {?number}            nodeMargin          A fixed margin to apply around nodes regardless of size\n   *   {?number}            maxIterations       The maximum number of iterations to perform before the layout completes.\n   *   {?integer}           gridSize            The number of rows and columns to use when partioning nodes into a grid for efficient computation\n   *   {?number}            permittedExpansion  A permitted expansion factor to the overall size of the network applied at each iteration\n   *   {?integer}           rendererIndex       The index of the renderer to use for node co-ordinates. Defaults to zero.\n   *   {?(function|string)} easing              Either the name of an easing in the sigma.utils.easings package or a function. If not specified, the\n   *                                            quadraticInOut easing from this package will be used instead.\n   *   {?number}            duration            The duration of the animation. If not specified, the \"animationsTime\" setting value of the sigma instance will be used instead.\n   *\n   *\n   *\n   * @param  {object} config  The optional configuration object.\n   *\n   * @return {sigma.classes.dispatcher} Returns an event emitter.\n   */\n\n  sigma.prototype.startNoverlap = function(config) {\n\n    var sigInst = this;\n\n    if (config) {\n      this.configNoverlap(sigInst, config);\n    }\n\n    _instance[sigInst.id].start();\n\n    return _eventEmitter[sigInst.id];\n  };\n\n\n  sigma.prototype.stopNoverlap = function() {\n    var sigInst = this;\n\n    if (_instance[sigInst.id]) {\n      _instance[sigInst.id].stop();\n    }\n  };\n\n  /**\n   * Returns true if the layout has started and is not completed.\n   *\n   * @return {boolean}\n   */\n  sigma.prototype.isNoverlapRunning = function() {\n\n    var sigInst = this;\n\n    return !!_instance[sigInst.id] && _instance[sigInst.id].running;\n  };\n\n}).call(this);\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 119);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 119:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function (undefined) {\n    'use strict';\n\n    if (typeof sigma === 'undefined')\n        throw 'sigma is not declared';\n\n    // Declare neo4j package\n    sigma.utils.pkg(\"sigma.neo4j\");\n\n    // Initialize package:\n    sigma.utils.pkg('sigma.utils');\n\n\n    /**\n     * This function is an helper for the neo4j communication.\n     *\n     * @param   {string|object}     neo4j       The URL of neo4j server or a neo4j server object.\n     * @param   {string}            endpoint    Endpoint of the neo4j server\n     * @param   {string}            method      The calling method for the endpoint : 'GET' or 'POST'\n     * @param   {object|string}     data        Data that will be send to the server\n     * @param   {function}          callback    The callback function\n     */\n    sigma.neo4j.send = function(neo4j, endpoint, method, data, callback) {\n        var xhr = sigma.utils.xhr(),\n            url, user, password;\n\n        // if neo4j arg is not an object\n        url = neo4j;\n        if(typeof neo4j === 'object') {\n            url = neo4j.url;\n            user = neo4j.user;\n            password = neo4j.password;\n        }\n\n        if (!xhr)\n            throw 'XMLHttpRequest not supported, cannot load the file.';\n\n        // Construct the endpoint url\n        url += endpoint;\n\n        xhr.open(method, url, true);\n        if( user && password) {\n            xhr.setRequestHeader('Authorization', 'Basic ' + btoa(user + ':' + password));\n        }\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                // Call the callback if specified:\n                callback(JSON.parse(xhr.responseText));\n            }\n        };\n        xhr.send(data);\n    };\n\n    /**\n     * This function parse a neo4j cypher query result, and transform it into\n     * a sigma graph object.\n     *\n     * @param  {object}     result      The server response of a cypher query.\n     *\n     * @return A graph object\n     */\n    sigma.neo4j.cypher_parse = function(result, producers) {\n        var graph = { nodes: [], edges: [] },\n            nodesMap = {},\n            edgesMap = {},\n            key;\n\n        // Iteration on all result data\n        result.results[0].data.forEach(function (data) {\n\n            // iteration on graph for all node\n            data.graph.nodes.forEach(function (node) {\n\n                var sigmaNode = producers.node(node);\n\n                if (sigmaNode.id in nodesMap) {\n                    // do nothing\n                } else {\n                    nodesMap[sigmaNode.id] = sigmaNode;\n                }\n            });\n\n            // iteration on graph for all edges\n            data.graph.relationships.forEach(function (edge) {\n\n                var sigmaEdge = producers.edge(edge);\n\n                if (sigmaEdge.id in edgesMap) {\n                    // do nothing\n                } else {\n                    edgesMap[sigmaEdge.id] = sigmaEdge;\n                }\n            });\n\n        });\n\n        // construct sigma nodes\n        for (key in nodesMap) {\n            graph.nodes.push(nodesMap[key]);\n        }\n        // construct sigma nodes\n        for (key in edgesMap) {\n            graph.edges.push(edgesMap[key]);\n        }\n\n        return graph;\n    };\n\n\n    /**\n     * This function execute a cypher and create a new sigma instance or\n     * updates the graph of a given instance. It is possible to give a callback\n     * that will be executed at the end of the process.\n     *\n     * @param  {object|string}      neo4j       The URL of neo4j server or a neo4j server object.\n     * @param  {string}             cypher      The cypher query\n     * @param  {?object|?sigma}     sig         A sigma configuration object or a sigma instance.\n     * @param  {?function}          callback    Eventually a callback to execute after\n     *                                          having parsed the file. It will be called\n     *                                          with the related sigma instance as\n     *                                          parameter.\n     * @param  {?object}            producers   Factory object with node and/or edge producers functions\n     *                                          By default sigma.neo4j produces black nodes and gray edges.\n     *                                          producers.node(node) takes neo4j node as input,\n     *                                          should output sigma node properties\n     *                                          producers.edge(edge) takes neo4j node as input,\n     *                                          should output sigma edge properties\n     */\n    sigma.neo4j.cypher = function (neo4j, cypher, sig, callback, producers) {\n        var endpoint = '/db/data/transaction/commit',\n            data, cypherCallback;\n\n        if(!producers) producers = sigma.neo4j.defaultProducers;\n\n        // Data that will be send to the server\n        data = JSON.stringify({\n            \"statements\": [\n                {\n                    \"statement\": cypher,\n                    \"resultDataContents\": [\"graph\"],\n                    \"includeStats\": false\n                }\n            ]\n        });\n\n        // Callback method after server response\n        cypherCallback = function (callback) {\n\n            return function (response) {\n\n                var graph = { nodes: [], edges: [] };\n\n                graph = sigma.neo4j.cypher_parse(response, producers);\n\n                // Update the instance's graph:\n                if (sig instanceof sigma) {\n                    sig.graph.clear();\n                    sig.graph.read(graph);\n\n                    // ...or instantiate sigma if needed:\n                } else if (typeof sig === 'object') {\n                    sig = new sigma(sig);\n                    sig.graph.read(graph);\n                    sig.refresh();\n\n                    // ...or it's finally the callback:\n                } else if (typeof sig === 'function') {\n                    callback = sig;\n                    sig = null;\n                }\n\n                // Call the callback if specified:\n                if (callback)\n                    callback(sig || graph);\n            };\n        };\n\n        // Let's call neo4j\n        sigma.neo4j.send(neo4j, endpoint, 'POST', data, cypherCallback(callback));\n    };\n\n    /**\n     * This function call neo4j to get all labels of the graph.\n     *\n     * @param  {string}       neo4j      The URL of neo4j server or an object with the url, user & password.\n     * @param  {function}     callback   The callback function\n     *\n     * @return An array of label\n     */\n    sigma.neo4j.getLabels = function(neo4j, callback) {\n        sigma.neo4j.send(neo4j, '/db/data/labels', 'GET', null, callback);\n    };\n\n    /**\n     * This function parse a neo4j cypher query result.\n     *\n     * @param  {string}       neo4j      The URL of neo4j server or an object with the url, user & password.\n     * @param  {function}     callback   The callback function\n     *\n     * @return An array of relationship type\n     */\n    sigma.neo4j.getTypes = function(neo4j, callback) {\n        sigma.neo4j.send(neo4j, '/db/data/relationship/types', 'GET', null, callback);\n    };\n\n    /**\n     * This object consist of sigma node and endge producers based on neo4j data node.\n     *\n     * @param  {object}       node   node(neo4j_node): sigma_node, where  neo4j_node = {id, label, properties}\n     * @param  {object}       edge   edge(neo4j_edge): sigma_edge, where  neo4j_edge = {id, type, startNode, endNode, properties}\n     *\n     * @return Sigma data object for node or edge\n     */\n    sigma.neo4j.defaultProducers = {\n        node: function(node) {\n            return {\n                id : node.id,\n                label : node.id,\n                x : Math.random(),\n                y : Math.random(),\n                size : 1,\n                color : '#666666',\n                neo4j_labels : node.labels,\n                neo4j_data : node.properties\n            }\n        },\n        edge: function(edge) {\n            return {\n                id : edge.id,\n                label : edge.type,\n                source : edge.startNode,\n                target : edge.endNode,\n                color : '#7D7C8E',\n                neo4j_type : edge.type,\n                neo4j_data : edge.properties\n            }\n        }\n    }\n\n}).call(this);\n\n    \n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 116);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 116:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js__);\n\n\n\n/***/ },\n\n/***/ 29:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  var shapes = [];\n  var register = function(name,drawShape,drawBorder) {\n    shapes.push({\n      'name': name,\n      'drawShape': drawShape,\n      'drawBorder': drawBorder\n    });\n  }\n\n  var enumerateShapes = function() {\n    return shapes;\n  }\n\n  /**\n   * For the standard closed shapes - the shape fill and border are drawn the\n   * same, with some minor differences for fill and border. To facilitate this we\n   * create the generic draw functions, that take a shape drawing func and\n   * return a shape-renderer/border-renderer\n   * ----------\n   */\n  var genericDrawShape = function(shapeFunc) {\n    return function(node,x,y,size,color,context) {\n      context.fillStyle = color;\n      context.beginPath();\n      shapeFunc(node,x,y,size,context);\n      context.closePath();\n      context.fill();\n    };\n  }\n\n  var genericDrawBorder = function(shapeFunc) {\n    return function(node,x,y,size,color,context) {\n      context.strokeStyle = color;\n      context.lineWidth = size / 5;\n      context.beginPath();\n      shapeFunc(node,x,y,size,context);\n      context.closePath();\n      context.stroke();\n    };\n  }\n\n  /**\n   * We now proced to use the generics to define our standard shape/border\n   * drawers: square, diamond, equilateral (polygon), and star\n   * ----------\n   */\n  var drawSquare = function(node,x,y,size,context) {\n    var rotate = Math.PI*45/180; // 45 deg rotation of a diamond shape\n    context.moveTo(x+size*Math.sin(rotate), y-size*Math.cos(rotate)); // first point on outer radius, dwangle 'rotate'\n    for(var i=1; i<4; i++) {\n      context.lineTo(x+Math.sin(rotate+2*Math.PI*i/4)*size, y-Math.cos(rotate+2*Math.PI*i/4)*size);\n    }\n  }\n  register(\"square\",genericDrawShape(drawSquare),genericDrawBorder(drawSquare));\n\n  var drawCircle = function(node,x,y,size,context) {\n    context.arc(x,y,size,0,Math.PI*2,true);\n  }\n  register(\"circle\",genericDrawShape(drawCircle),genericDrawBorder(drawCircle));\n\n  var drawDiamond = function(node,x,y,size,context) {\n    context.moveTo(x-size, y);\n    context.lineTo(x, y-size);\n    context.lineTo(x+size, y);\n    context.lineTo(x, y+size);\n  }\n  register(\"diamond\",genericDrawShape(drawDiamond),genericDrawBorder(drawDiamond));\n\n  var drawCross = function(node,x,y,size,context) {\n    var lineWeight = (node.cross && node.cross.lineWeight) || 5;\n    context.moveTo(x-size, y-lineWeight);\n    context.lineTo(x-size, y+lineWeight);\n    context.lineTo(x-lineWeight, y+lineWeight);\n    context.lineTo(x-lineWeight, y+size);\n    context.lineTo(x+lineWeight, y+size);\n    context.lineTo(x+lineWeight, y+lineWeight);\n    context.lineTo(x+size, y+lineWeight);\n    context.lineTo(x+size, y-lineWeight);\n    context.lineTo(x+lineWeight, y-lineWeight);\n    context.lineTo(x+lineWeight, y-size);\n    context.lineTo(x-lineWeight, y-size);\n    context.lineTo(x-lineWeight, y-lineWeight);\n  }\n  register(\"cross\",genericDrawShape(drawCross),genericDrawBorder(drawCross));\n\n  var drawEquilateral = function(node,x,y,size,context) {\n    var pcount = (node.equilateral && node.equilateral.numPoints) || 5;\n    var rotate = ((node.equilateral && node.equilateral.rotate) || 0)*Math.PI/180;\n    var radius = size;\n    context.moveTo(x+radius*Math.sin(rotate), y-radius*Math.cos(rotate)); // first point on outer radius, angle 'rotate'\n    for(var i=1; i<pcount; i++) {\n      context.lineTo(x+Math.sin(rotate+2*Math.PI*i/pcount)*radius, y-Math.cos(rotate+2*Math.PI*i/pcount)*radius);\n    }\n  }\n  register(\"equilateral\",genericDrawShape(drawEquilateral),genericDrawBorder(drawEquilateral));\n\n\n  var starShape = function(node,x,y,size,context) {\n    var pcount = (node.star && node.star.numPoints) || 5,\n        inRatio = (node.star && node.star.innerRatio) || 0.5,\n        outR = size,\n        inR = size*inRatio,\n        angleOffset = Math.PI/pcount;\n    context.moveTo(x, y-size); // first point on outer radius, top\n    for(var i=0; i<pcount; i++) {\n      context.lineTo(x+Math.sin(angleOffset+2*Math.PI*i/pcount)*inR,\n          y-Math.cos(angleOffset+2*Math.PI*i/pcount)*inR);\n      context.lineTo(x+Math.sin(2*Math.PI*(i+1)/pcount)*outR,\n          y-Math.cos(2*Math.PI*(i+1)/pcount)*outR);\n    }\n  }\n  register(\"star\",genericDrawShape(starShape),genericDrawBorder(starShape));\n\n  /**\n   * An example of a non standard shape (pacman). Here we WILL NOT use the\n   * genericDraw functions, but rather register a full custom node renderer for\n   * fill, and skip the border renderer which is irrelevant for this shape\n   * ----------\n   */\n  var drawPacman = function(node,x,y,size,color,context) {\n    context.fillStyle = 'yellow';\n    context.beginPath();\n    context.arc(x,y,size,1.25*Math.PI,0,false);\n    context.arc(x,y,size,0,0.75*Math.PI,false);\n    context.lineTo(x,y);\n    context.closePath();\n    context.fill();\n\n    context.fillStyle = 'white';\n    context.strokeStyle = 'black';\n    context.beginPath();\n    context.arc(x+size/3,y-size/3,size/4,0,2*Math.PI,false);\n    context.closePath();\n    context.fill();\n    context.stroke();\n\n    context.fillStyle = 'black';\n    context.beginPath();\n    context.arc(x+4*size/9,y-size/3,size/8,0,2*Math.PI,false);\n    context.closePath();\n    context.fill();\n  }\n  register(\"pacman\",drawPacman,null);\n\n  /**\n   * Exporting\n   * ----------\n   */\n  this.ShapeLibrary = {\n\n    // Functions\n    enumerate: enumerateShapes,\n    // add: addShape,\n\n    // Version\n    version: '0.1'\n  };\n\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 30:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  if (typeof ShapeLibrary === 'undefined')\n    throw 'ShapeLibrary is not declared';\n\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.canvas.nodes');\n  sigma.utils.pkg('sigma.svg.nodes');\n\n  var sigInst = undefined;\n  var imgCache = {};\n\n  var initPlugin = function(inst) {\n    sigInst = inst;\n  }\n\n  var drawImage = function (node,x,y,size,context) {\n    if(sigInst && node.image && node.image.url) {\n      var url = node.image.url;\n      var ih = node.image.h || 1; // 1 is arbitrary, anyway only the ratio counts\n      var iw = node.image.w || 1;\n      var scale = node.image.scale || 1;\n      var clip = node.image.clip || 1;\n\n      // create new IMG or get from imgCache\n      var image = imgCache[url];\n      if(!image) {\n        image = document.createElement('IMG');\n        image.src = url;\n        image.status = 'loading';\n        image.onerror = function() {\n          console.log(\"error loading\", url);\n          image.status = 'error';\n        };\n        image.onload = function(){\n          // TODO see how we redraw on load\n          // need to provide the siginst as a parameter to the library\n          console.log(\"redraw on image load\", url);\n          image.status = 'ok';\n          sigInst.refresh();\n        };\n        imgCache[url] = image;\n      }\n\n      // calculate position and draw\n      var xratio = (iw<ih) ? (iw/ih) : 1;\n      var yratio = (ih<iw) ? (ih/iw) : 1;\n      var r = size*scale;\n\n      // Draw the clipping disc:\n      context.save(); // enter clipping mode\n      context.beginPath();\n      context.arc(x,y,size*clip,0,Math.PI*2,true);\n      context.closePath();\n      context.clip();\n\n      if(image.status === 'ok') {\n        // Draw the actual image\n        context.drawImage(image,\n            x+Math.sin(-3.142/4)*r*xratio,\n            y-Math.cos(-3.142/4)*r*yratio,\n            r*xratio*2*Math.sin(-3.142/4)*(-1),\n            r*yratio*2*Math.cos(-3.142/4));\n      }\n      context.restore(); // exit clipping mode\n    }\n  }\n\n  var drawSVGImage = function (node, group, settings) {\n    if(sigInst && node.image && node.image.url) {\n      var clipCircle = document.createElementNS(settings('xmlns'), 'circle'),\n        clipPath = document.createElementNS(settings('xmlns'), 'clipPath'),\n        clipPathId = settings('classPrefix') + '-clip-path-' + node.id,\n        def = document.createElementNS(settings('xmlns'), 'defs'),\n        image = document.createElementNS(settings('xmlns'), 'image'),\n        url = node.image.url;\n\n      clipPath.setAttributeNS(null, 'id', clipPathId);\n      clipPath.appendChild(clipCircle);\n      def.appendChild(clipPath);\n\n      // angular's base tag will change the relative fragment id, so\n      // #<clipPathId> doesn't work\n      // HACKHACK: IE <=9 does not respect the HTML base element in SVG.\n      // They don't need the current URL in the clip path reference.\n      var absolutePath = /MSIE [5-9]/.test(navigator.userAgent) ?\n        \"\" : document.location.href;\n      // To fix cases where an anchor tag was used\n      absolutePath = absolutePath.split(\"#\")[0];\n      image.setAttributeNS(null, 'class',\n        settings('classPrefix') + '-node-image');\n      image.setAttributeNS(null, 'clip-path',\n        'url(' + absolutePath + '#' + clipPathId + ')');\n      image.setAttributeNS(null, 'pointer-events', 'none');\n      image.setAttributeNS('http://www.w3.org/1999/xlink', 'href',\n        node.image.url);\n      group.appendChild(def);\n      group.appendChild(image);\n    }\n  }\n\n  var register = function(name,drawShape,drawBorder) {\n    sigma.canvas.nodes[name] = function(node, context, settings) {\n      var args = arguments,\n          prefix = settings('prefix') || '',\n          size = node[prefix + 'size'],\n          color = node.color || settings('defaultNodeColor'),\n          borderColor = node.borderColor || color,\n          x = node[prefix + 'x'],\n          y = node[prefix + 'y'];\n\n      context.save();\n\n      if(drawShape) {\n        drawShape(node,x,y,size,color,context);\n      }\n\n      if(drawBorder) {\n        drawBorder(node,x,y,size,borderColor,context);\n      }\n\n      drawImage(node,x,y,size,context);\n\n      context.restore();\n    };\n\n    sigma.svg.nodes[name] = {\n      create: function(node, settings) {\n        var group = document.createElementNS(settings('xmlns'), 'g'),\n        circle = document.createElementNS(settings('xmlns'), 'circle');\n\n        group.setAttributeNS(null, 'class',\n          settings('classPrefix') + '-node-group');\n        group.setAttributeNS(null, 'data-node-id', node.id);\n        // Defining the node's circle\n        circle.setAttributeNS(null, 'data-node-id', node.id);\n        circle.setAttributeNS(null, 'class',\n          settings('classPrefix') + '-node');\n        circle.setAttributeNS(null, 'fill',\n          node.color || settings('defaultNodeColor'));\n\n        group.appendChild(circle);\n        drawSVGImage(node, group, settings);\n        return group;\n      },\n      update: function(node, group, settings) {\n        var classPrefix = settings('classPrefix'),\n          clip = node.image.clip || 1,\n          // 1 is arbitrary, anyway only the ratio counts\n          ih = node.image.h || 1,\n          iw = node.image.w || 1,\n          prefix = settings('prefix') || '',\n          scale = node.image.scale || 1,\n          size = node[prefix + 'size'],\n          x = node[prefix + 'x'],\n          y = node[prefix + 'y'];\n\n          var r = scale * size,\n          xratio = (iw<ih) ? (iw/ih) : 1,\n          yratio = (ih<iw) ? (ih/iw) : 1;\n\n        for(var i = 0, childNodes = group.childNodes; i < childNodes.length; i ++) {\n          var className = childNodes[i].getAttribute('class');\n\n          switch (className) {\n            case classPrefix + '-node':\n              childNodes[i].setAttributeNS(null, 'cx', x);\n              childNodes[i].setAttributeNS(null, 'cy', y);\n              childNodes[i].setAttributeNS(null, 'r', size);\n\n              // // Updating only if not freestyle\n              if (!settings('freeStyle')) {\n                childNodes[i].setAttributeNS(\n                  null,\n                  'fill',\n                  node.color || settings('defaultNodeColor'));\n              }\n              break;\n            case classPrefix + '-node-image':\n              childNodes[i].setAttributeNS(null, 'x',\n                x+Math.sin(-3.142/4)*r*xratio);\n              childNodes[i].setAttributeNS(null, 'y',\n                y-Math.cos(-3.142/4)*r*yratio);\n              childNodes[i].setAttributeNS(null, 'width',\n                r*xratio*2*Math.sin(-3.142/4)*(-1));\n              childNodes[i].setAttributeNS(null, 'height',\n                r*yratio*2*Math.cos(-3.142/4));\n              break;\n            default:\n              // no class name, must be the clip-path\n              var clipPath = childNodes[i].firstChild;\n              if (clipPath != null) {\n                var clipPathId = classPrefix + '-clip-path-' + node.id;\n                if (clipPath.getAttribute('id') === clipPathId) {\n                  clipPath.firstChild.setAttributeNS(null, 'cx', x);\n                  clipPath.firstChild.setAttributeNS(null, 'cy', y);\n                  clipPath.firstChild.setAttributeNS(null, 'r',\n                    clip * size);\n                }\n              }\n              break;\n          }\n        }\n\n        // showing\n        group.style.display = '';\n      }\n    }\n  }\n\n  ShapeLibrary.enumerate().forEach(function(shape) {\n    register(shape.name,shape.drawShape,shape.drawBorder);\n  });\n\n  /**\n   * Exporting\n   * ----------\n   */\n  this.CustomShapes = {\n\n    // Functions\n    init: initPlugin,\n    // add pre-cache images\n\n    // Version\n    version: '0.1'\n  };\n\n\n\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 128);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 128:\n/***/ function(module, exports, __webpack_require__) {\n\n__webpack_require__(19);\nmodule.exports = __webpack_require__(20);\n\n\n/***/ },\n\n/***/ 19:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * GEXF Library\n   * =============\n   *\n   * Author: PLIQUE Guillaume (Yomguithereal)\n   * URL: https://github.com/Yomguithereal/gexf-parser\n   * Version: 0.1.1\n   */\n\n  /**\n   * Helper Namespace\n   * -----------------\n   *\n   * A useful batch of function dealing with DOM operations and types.\n   */\n  var _helpers = {\n    getModelTags: function(xml) {\n      var attributesTags = xml.getElementsByTagName('attributes'),\n          modelTags = {},\n          l = attributesTags.length,\n          i;\n\n      for (i = 0; i < l; i++)\n        modelTags[attributesTags[i].getAttribute('class')] =\n          attributesTags[i].childNodes;\n\n      return modelTags;\n    },\n    nodeListToArray: function(nodeList) {\n\n      // Return array\n      var children = [];\n\n      // Iterating\n      for (var i = 0, len = nodeList.length; i < len; ++i) {\n        if (nodeList[i].nodeName !== '#text')\n          children.push(nodeList[i]);\n      }\n\n      return children;\n    },\n    nodeListEach: function(nodeList, func) {\n\n      // Iterating\n      for (var i = 0, len = nodeList.length; i < len; ++i) {\n        if (nodeList[i].nodeName !== '#text')\n          func(nodeList[i]);\n      }\n    },\n    nodeListToHash: function(nodeList, filter) {\n\n      // Return object\n      var children = {};\n\n      // Iterating\n      for (var i = 0; i < nodeList.length; i++) {\n        if (nodeList[i].nodeName !== '#text') {\n          var prop = filter(nodeList[i]);\n          children[prop.key] = prop.value;\n        }\n      }\n\n      return children;\n    },\n    namedNodeMapToObject: function(nodeMap) {\n\n      // Return object\n      var attributes = {};\n\n      // Iterating\n      for (var i = 0; i < nodeMap.length; i++) {\n        attributes[nodeMap[i].name] = nodeMap[i].value;\n      }\n\n      return attributes;\n    },\n    getFirstElementByTagNS: function(node, ns, tag) {\n      var el = node.getElementsByTagName(ns + ':' + tag)[0];\n\n      if (!el)\n        el = node.getElementsByTagNameNS(ns, tag)[0];\n\n      if (!el)\n        el = node.getElementsByTagName(tag)[0];\n\n      return el;\n    },\n    getAttributeNS: function(node, ns, attribute) {\n      var attr_value = node.getAttribute(ns + ':' + attribute);\n\n      if (attr_value === undefined)\n        attr_value = node.getAttributeNS(ns, attribute);\n\n      if (attr_value === undefined)\n        attr_value = node.getAttribute(attribute);\n\n      return attr_value;\n    },\n    enforceType: function(type, value) {\n\n      switch (type) {\n        case 'boolean':\n          value = (value === 'true');\n          break;\n\n        case 'integer':\n        case 'long':\n        case 'float':\n        case 'double':\n          value = +value;\n          break;\n\n        case 'liststring':\n          value = value ? value.split('|') : [];\n          break;\n      }\n\n      return value;\n    },\n    getRGB: function(values) {\n      return (values[3]) ?\n        'rgba(' + values.join(',') + ')' :\n        'rgb(' + values.slice(0, -1).join(',') + ')';\n    }\n  };\n\n\n  /**\n   * Parser Core Functions\n   * ----------------------\n   *\n   * The XML parser's functions themselves.\n   */\n\n  /**\n   * Node structure.\n   * A function returning an object guarded with default value.\n   *\n   * @param  {object} properties The node properties.\n   * @return {object}            The guarded node object.\n   */\n  function Node(properties) {\n\n    // Possible Properties\n    var node = {\n      id: properties.id,\n      label: properties.label\n    };\n\n    if (properties.viz)\n      node.viz = properties.viz;\n\n    if (properties.attributes)\n      node.attributes = properties.attributes;\n\n    return node;\n  }\n\n\n  /**\n   * Edge structure.\n   * A function returning an object guarded with default value.\n   *\n   * @param  {object} properties The edge properties.\n   * @return {object}            The guarded edge object.\n   */\n  function Edge(properties) {\n\n    // Possible Properties\n    var edge = {\n      id: properties.id,\n      type: properties.type || 'undirected',\n      label: properties.label || '',\n      source: properties.source,\n      target: properties.target,\n      weight: +properties.weight || 1.0\n    };\n\n    if (properties.viz)\n      edge.viz = properties.viz;\n\n    if (properties.attributes)\n      edge.attributes = properties.attributes;\n\n    return edge;\n  }\n\n  /**\n   * Graph parser.\n   * This structure parse a gexf string and return an object containing the\n   * parsed graph.\n   *\n   * @param  {string} xml The xml string of the gexf file to parse.\n   * @return {object}     The parsed graph.\n   */\n  function Graph(xml) {\n    var _xml = {};\n\n    // Basic Properties\n    //------------------\n    _xml.els = {\n      root: xml.getElementsByTagName('gexf')[0],\n      graph: xml.getElementsByTagName('graph')[0],\n      meta: xml.getElementsByTagName('meta')[0],\n      nodes: xml.getElementsByTagName('node'),\n      edges: xml.getElementsByTagName('edge'),\n      model: _helpers.getModelTags(xml)\n    };\n\n    // Information\n    _xml.hasViz = !!_helpers.getAttributeNS(_xml.els.root, 'xmlns', 'viz');\n    _xml.version = _xml.els.root.getAttribute('version') || '1.0';\n    _xml.mode = _xml.els.graph.getAttribute('mode') || 'static';\n\n    var edgeType = _xml.els.graph.getAttribute('defaultedgetype');\n    _xml.defaultEdgetype = edgeType || 'undirected';\n\n    // Parser Functions\n    //------------------\n\n    // Meta Data\n    function _metaData() {\n\n      var metas = {};\n      if (!_xml.els.meta)\n        return metas;\n\n      // Last modified date\n      metas.lastmodifieddate = _xml.els.meta.getAttribute('lastmodifieddate');\n\n      // Other information\n      _helpers.nodeListEach(_xml.els.meta.childNodes, function(child) {\n        metas[child.tagName.toLowerCase()] = child.textContent;\n      });\n\n      return metas;\n    }\n\n    // Model\n    function _model(cls) {\n      var attributes = [];\n\n      // Iterating through attributes\n      if (_xml.els.model[cls])\n        _helpers.nodeListEach(_xml.els.model[cls], function(attr) {\n\n          // Properties\n          var properties = {\n            id: attr.getAttribute('id') || attr.getAttribute('for'),\n            type: attr.getAttribute('type') || 'string',\n            title: attr.getAttribute('title') || ''\n          };\n\n          // Defaults\n          var default_el = _helpers.nodeListToArray(attr.childNodes);\n\n          if (default_el.length > 0)\n            properties.defaultValue = default_el[0].textContent;\n\n          // Creating attribute\n          attributes.push(properties);\n        });\n\n      return attributes.length > 0 ? attributes : false;\n    }\n\n    // Data from nodes or edges\n    function _data(model, node_or_edge) {\n\n      var data = {};\n      var attvalues_els = node_or_edge.getElementsByTagName('attvalue');\n\n      // Getting Node Indicated Attributes\n      var ah = _helpers.nodeListToHash(attvalues_els, function(el) {\n        var attributes = _helpers.namedNodeMapToObject(el.attributes);\n        var key = attributes.id || attributes['for'];\n\n        // Returning object\n        return {key: key, value: attributes.value};\n      });\n\n\n      // Iterating through model\n      model.map(function(a) {\n\n        // Default value?\n        data[a.id] = !(a.id in ah) && 'defaultValue' in a ?\n          _helpers.enforceType(a.type, a.defaultValue) :\n          _helpers.enforceType(a.type, ah[a.id]);\n\n      });\n\n      return data;\n    }\n\n    // Nodes\n    function _nodes(model) {\n      var nodes = [];\n\n      // Iteration through nodes\n      _helpers.nodeListEach(_xml.els.nodes, function(n) {\n\n        // Basic properties\n        var properties = {\n          id: n.getAttribute('id'),\n          label: n.getAttribute('label') || ''\n        };\n\n        // Retrieving data from nodes if any\n        if (model)\n          properties.attributes = _data(model, n);\n\n        // Retrieving viz information\n        if (_xml.hasViz)\n          properties.viz = _nodeViz(n);\n\n        // Pushing node\n        nodes.push(Node(properties));\n      });\n\n      return nodes;\n    }\n\n    // Viz information from nodes\n    function _nodeViz(node) {\n      var viz = {};\n\n      // Color\n      var color_el = _helpers.getFirstElementByTagNS(node, 'viz', 'color');\n\n      if (color_el) {\n        var color = ['r', 'g', 'b', 'a'].map(function(c) {\n          return color_el.getAttribute(c);\n        });\n\n        viz.color = _helpers.getRGB(color);\n      }\n\n      // Position\n      var pos_el = _helpers.getFirstElementByTagNS(node, 'viz', 'position');\n\n      if (pos_el) {\n        viz.position = {};\n\n        ['x', 'y', 'z'].map(function(p) {\n          viz.position[p] = +pos_el.getAttribute(p);\n        });\n      }\n\n      // Size\n      var size_el = _helpers.getFirstElementByTagNS(node, 'viz', 'size');\n      if (size_el)\n        viz.size = +size_el.getAttribute('value');\n\n      // Shape\n      var shape_el = _helpers.getFirstElementByTagNS(node, 'viz', 'shape');\n      if (shape_el)\n        viz.shape = shape_el.getAttribute('value');\n\n      return viz;\n    }\n\n    // Edges\n    function _edges(model, default_type) {\n      var edges = [];\n\n      // Iteration through edges\n      _helpers.nodeListEach(_xml.els.edges, function(e) {\n\n        // Creating the edge\n        var properties = _helpers.namedNodeMapToObject(e.attributes);\n        if (!('type' in properties)) {\n          properties.type = default_type;\n        }\n\n        // Retrieving edge data\n        if (model)\n          properties.attributes = _data(model, e);\n\n\n        // Retrieving viz information\n        if (_xml.hasViz)\n          properties.viz = _edgeViz(e);\n\n        edges.push(Edge(properties));\n      });\n\n      return edges;\n    }\n\n    // Viz information from edges\n    function _edgeViz(edge) {\n      var viz = {};\n\n      // Color\n      var color_el = _helpers.getFirstElementByTagNS(edge, 'viz', 'color');\n\n      if (color_el) {\n        var color = ['r', 'g', 'b', 'a'].map(function(c) {\n          return color_el.getAttribute(c);\n        });\n\n        viz.color = _helpers.getRGB(color);\n      }\n\n      // Shape\n      var shape_el = _helpers.getFirstElementByTagNS(edge, 'viz', 'shape');\n      if (shape_el)\n        viz.shape = shape_el.getAttribute('value');\n\n      // Thickness\n      var thick_el = _helpers.getFirstElementByTagNS(edge, 'viz', 'thickness');\n      if (thick_el)\n        viz.thickness = +thick_el.getAttribute('value');\n\n      return viz;\n    }\n\n\n    // Returning the Graph\n    //---------------------\n    var nodeModel = _model('node'),\n        edgeModel = _model('edge');\n\n    var graph = {\n      version: _xml.version,\n      mode: _xml.mode,\n      defaultEdgeType: _xml.defaultEdgetype,\n      meta: _metaData(),\n      model: {},\n      nodes: _nodes(nodeModel),\n      edges: _edges(edgeModel, _xml.defaultEdgetype)\n    };\n\n    if (nodeModel)\n      graph.model.node = nodeModel;\n    if (edgeModel)\n      graph.model.edge = edgeModel;\n\n    return graph;\n  }\n\n\n  /**\n   * Public API\n   * -----------\n   *\n   * User-accessible functions.\n   */\n\n  // Fetching GEXF with XHR\n  function fetch(gexf_url, callback) {\n    var xhr = (function() {\n      if (window.XMLHttpRequest)\n        return new XMLHttpRequest();\n\n      var names,\n          i;\n\n      if (window.ActiveXObject) {\n        names = [\n          'Msxml2.XMLHTTP.6.0',\n          'Msxml2.XMLHTTP.3.0',\n          'Msxml2.XMLHTTP',\n          'Microsoft.XMLHTTP'\n        ];\n\n        for (i in names)\n          try {\n            return new ActiveXObject(names[i]);\n          } catch (e) {}\n      }\n\n      return null;\n    })();\n\n    if (!xhr)\n      throw 'XMLHttpRequest not supported, cannot load the file.';\n\n    // Async?\n    var async = (typeof callback === 'function'),\n        getResult;\n\n    // If we can't override MIME type, we are on IE 9\n    // We'll be parsing the response string then.\n    if (xhr.overrideMimeType) {\n      xhr.overrideMimeType('text/xml');\n      getResult = function(r) {\n        return r.responseXML;\n      };\n    }\n    else {\n      getResult = function(r) {\n        var p = new DOMParser();\n        return p.parseFromString(r.responseText, 'application/xml');\n      };\n    }\n\n    xhr.open('GET', gexf_url, async);\n\n    if (async)\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4)\n          callback(getResult(xhr));\n      };\n\n    xhr.send();\n\n    return (async) ? xhr : getResult(xhr);\n  }\n\n  // Parsing the GEXF File\n  function parse(gexf) {\n    return Graph(gexf);\n  }\n\n  // Fetch and parse the GEXF File\n  function fetchAndParse(gexf_url, callback) {\n    if (typeof callback === 'function') {\n      return fetch(gexf_url, function(gexf) {\n        callback(Graph(gexf));\n      });\n    } else\n      return Graph(fetch(gexf_url));\n  }\n\n\n  /**\n   * Exporting\n   * ----------\n   */\n  if (typeof this.gexf !== 'undefined')\n    throw 'gexf: error - a variable called \"gexf\" already ' +\n          'exists in the global scope';\n\n  this.gexf = {\n\n    // Functions\n    parse: parse,\n    fetch: fetchAndParse,\n\n    // Version\n    version: '0.1.1'\n  };\n\n  if (typeof exports !== 'undefined' && this.exports !== exports)\n    module.exports = this.gexf;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 20:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.parsers');\n\n  // Just a basic ID generator:\n  var _id = 0;\n  function edgeId() {\n    return 'e' + (_id++);\n  }\n\n  /**\n   * If the first arguments is a valid URL, this function loads a GEXF file and\n   * creates a new sigma instance or updates the graph of a given instance. It\n   * is possible to give a callback that will be executed at the end of the\n   * process. And if the first argument is a DOM element, it will skip the\n   * loading step and parse the given XML tree to fill the graph.\n   *\n   * @param  {string|DOMElement} target   The URL of the GEXF file or a valid\n   *                                      GEXF tree.\n   * @param  {object|sigma}      sig      A sigma configuration object or a\n   *                                      sigma instance.\n   * @param  {?function}         callback Eventually a callback to execute\n   *                                      after having parsed the file. It will\n   *                                      be called with the related sigma\n   *                                      instance as parameter.\n   */\n  sigma.parsers.gexf = function(target, sig, callback) {\n    var i,\n        l,\n        arr,\n        obj;\n\n    function parse(graph) {\n      // Adapt the graph:\n      arr = graph.nodes;\n      for (i = 0, l = arr.length; i < l; i++) {\n        obj = arr[i];\n\n        obj.id = obj.id;\n        if (obj.viz && typeof obj.viz === 'object') {\n          if (obj.viz.position && typeof obj.viz.position === 'object') {\n            obj.x = obj.viz.position.x;\n            obj.y = -obj.viz.position.y; // Needed otherwise it's up side down\n          }\n          obj.size = obj.viz.size;\n          obj.color = obj.viz.color;\n        }\n      }\n\n      arr = graph.edges;\n      for (i = 0, l = arr.length; i < l; i++) {\n        obj = arr[i];\n\n        obj.id = typeof obj.id === 'string' ? obj.id : edgeId();\n        obj.source = '' + obj.source;\n        obj.target = '' + obj.target;\n\n        if (obj.viz && typeof obj.viz === 'object') {\n          obj.color = obj.viz.color;\n          obj.size = obj.viz.thickness;\n        }\n\n        // Weight over viz.thickness?\n        obj.size = obj.weight;\n\n        // Changing type to be direction so it won't mess with sigma's naming\n        obj.direction = obj.type;\n        delete obj.type;\n      }\n\n      // Update the instance's graph:\n      if (sig instanceof sigma) {\n        sig.graph.clear();\n\n        arr = graph.nodes;\n        for (i = 0, l = arr.length; i < l; i++)\n          sig.graph.addNode(arr[i]);\n\n        arr = graph.edges;\n        for (i = 0, l = arr.length; i < l; i++)\n          sig.graph.addEdge(arr[i]);\n\n      // ...or instantiate sigma if needed:\n      } else if (typeof sig === 'object') {\n        sig.graph = graph;\n        sig = new sigma(sig);\n\n      // ...or it's finally the callback:\n      } else if (typeof sig === 'function') {\n        callback = sig;\n        sig = null;\n      }\n\n      // Call the callback if specified:\n      if (callback) {\n        callback(sig || graph);\n        return;\n      } else\n        return graph;\n    }\n\n    if (typeof target === 'string')\n      gexf.fetch(target, parse);\n    else if (typeof target === 'object')\n      return parse(gexf.parse(target));\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 121);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 121:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/**\n * This plugin provides a method to animate a sigma instance by interpolating\n * some node properties. Check the sigma.plugins.animate function doc or the\n * examples/animate.html code sample to know more.\n */\n(function() {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  sigma.utils.pkg('sigma.plugins');\n\n  var _id = 0,\n      _cache = {};\n\n  // TOOLING FUNCTIONS:\n  // ******************\n  function parseColor(val) {\n    if (_cache[val])\n      return _cache[val];\n\n    var result = [0, 0, 0];\n\n    if (val.match(/^#/)) {\n      val = (val || '').replace(/^#/, '');\n      result = (val.length === 3) ?\n        [\n          parseInt(val.charAt(0) + val.charAt(0), 16),\n          parseInt(val.charAt(1) + val.charAt(1), 16),\n          parseInt(val.charAt(2) + val.charAt(2), 16)\n        ] :\n        [\n          parseInt(val.charAt(0) + val.charAt(1), 16),\n          parseInt(val.charAt(2) + val.charAt(3), 16),\n          parseInt(val.charAt(4) + val.charAt(5), 16)\n        ];\n    } else if (val.match(/^ *rgba? *\\(/)) {\n      val = val.match(\n        /^ *rgba? *\\( *([0-9]*) *, *([0-9]*) *, *([0-9]*) *(,.*)?\\) *$/\n      );\n      result = [\n        +val[1],\n        +val[2],\n        +val[3]\n      ];\n    }\n\n    _cache[val] = {\n      r: result[0],\n      g: result[1],\n      b: result[2]\n    };\n\n    return _cache[val];\n  }\n\n  function interpolateColors(c1, c2, p) {\n    c1 = parseColor(c1);\n    c2 = parseColor(c2);\n\n    var c = {\n      r: c1.r * (1 - p) + c2.r * p,\n      g: c1.g * (1 - p) + c2.g * p,\n      b: c1.b * (1 - p) + c2.b * p\n    };\n\n    return 'rgb(' + [c.r | 0, c.g | 0, c.b | 0].join(',') + ')';\n  }\n\n  /**\n   * This function will animate some specified node properties. It will\n   * basically call requestAnimationFrame, interpolate the values and call the\n   * refresh method during a specified duration.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the settings\n   * object:\n   *\n   *   {?array}             nodes      An array of node objects or node ids. If\n   *                                   not specified, all nodes of the graph\n   *                                   will be animated.\n   *   {?(function|string)} easing     Either the name of an easing in the\n   *                                   sigma.utils.easings package or a\n   *                                   function. If not specified, the\n   *                                   quadraticInOut easing from this package\n   *                                   will be used instead.\n   *   {?number}            duration   The duration of the animation. If not\n   *                                   specified, the \"animationsTime\" setting\n   *                                   value of the sigma instance will be used\n   *                                   instead.\n   *   {?function}          onComplete Eventually a function to call when the\n   *                                   animation is ended.\n   *\n   * @param  {sigma}   s       The related sigma instance.\n   * @param  {object}  animate An hash with the keys being the node properties\n   *                           to interpolate, and the values being the related\n   *                           target values.\n   * @param  {?object} options Eventually an object with options.\n   */\n  sigma.plugins.animate = function(s, animate, options) {\n    var o = options || {},\n        id = ++_id,\n        duration = o.duration || s.settings('animationsTime'),\n        easing = typeof o.easing === 'string' ?\n          sigma.utils.easings[o.easing] :\n          typeof o.easing === 'function' ?\n          o.easing :\n          sigma.utils.easings.quadraticInOut,\n        start = sigma.utils.dateNow(),\n        nodes,\n        startPositions;\n\n    if (o.nodes && o.nodes.length) {\n      if (typeof o.nodes[0] === 'object')\n        nodes = o.nodes;\n      else\n        nodes = s.graph.nodes(o.nodes); // argument is an array of IDs\n    }\n    else\n      nodes = s.graph.nodes();\n\n    // Store initial positions:\n    startPositions = nodes.reduce(function(res, node) {\n      var k;\n      res[node.id] = {};\n      for (k in animate)\n        if (k in node)\n          res[node.id][k] = node[k];\n      return res;\n    }, {});\n\n    s.animations = s.animations || Object.create({});\n    sigma.plugins.kill(s);\n\n    // Do not refresh edgequadtree during drag:\n    var k,\n        c;\n    for (k in s.cameras) {\n      c = s.cameras[k];\n      c.edgequadtree._enabled = false;\n    }\n\n    function step() {\n      var p = (sigma.utils.dateNow() - start) / duration;\n\n      if (p >= 1) {\n        nodes.forEach(function(node) {\n          for (var k in animate)\n            if (k in animate)\n              node[k] = node[animate[k]];\n        });\n\n        // Allow to refresh edgequadtree:\n        var k,\n            c;\n        for (k in s.cameras) {\n          c = s.cameras[k];\n          c.edgequadtree._enabled = true;\n        }\n\n        s.refresh();\n        if (typeof o.onComplete === 'function')\n          o.onComplete();\n      } else {\n        p = easing(p);\n        nodes.forEach(function(node) {\n          for (var k in animate)\n            if (k in animate) {\n              if (k.match(/color$/))\n                node[k] = interpolateColors(\n                  startPositions[node.id][k],\n                  node[animate[k]],\n                  p\n                );\n              else\n                node[k] =\n                  node[animate[k]] * p +\n                  startPositions[node.id][k] * (1 - p);\n            }\n        });\n\n        s.refresh();\n        s.animations[id] = requestAnimationFrame(step);\n      }\n    }\n\n    step();\n  };\n\n  sigma.plugins.kill = function(s) {\n    for (var k in (s.animations || {}))\n      cancelAnimationFrame(s.animations[k]);\n\n    // Allow to refresh edgequadtree:\n    var k,\n        c;\n    for (k in s.cameras) {\n      c = s.cameras[k];\n      c.edgequadtree._enabled = true;\n    }\n  };\n}).call(window);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 122);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 122:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.plugins');\n\n  // Add custom graph methods:\n  /**\n   * This methods returns an array of nodes that are adjacent to a node.\n   *\n   * @param  {string} id The node id.\n   * @return {array}     The array of adjacent nodes.\n   */\n  if (!sigma.classes.graph.hasMethod('adjacentNodes'))\n    sigma.classes.graph.addMethod('adjacentNodes', function(id) {\n      if (typeof id !== 'string')\n        throw 'adjacentNodes: the node id must be a string.';\n\n      var target,\n          nodes = [];\n      for(target in this.allNeighborsIndex[id]) {\n        nodes.push(this.nodesIndex[target]);\n      }\n      return nodes;\n    });\n\n  /**\n   * This methods returns an array of edges that are adjacent to a node.\n   *\n   * @param  {string} id The node id.\n   * @return {array}     The array of adjacent edges.\n   */\n  if (!sigma.classes.graph.hasMethod('adjacentEdges'))\n    sigma.classes.graph.addMethod('adjacentEdges', function(id) {\n      if (typeof id !== 'string')\n        throw 'adjacentEdges: the node id must be a string.';\n\n      var a = this.allNeighborsIndex[id],\n          eid,\n          target,\n          edges = [];\n      for(target in a) {\n        for(eid in a[target]) {\n          edges.push(a[target][eid]);\n        }\n      }\n      return edges;\n    });\n\n  /**\n   * Sigma Filter\n   * =============================\n   *\n   * @author Sébastien Heymann <seb@linkurio.us> (Linkurious)\n   * @version 0.1\n   */\n\n   var _g = undefined,\n       _s = undefined,\n       _chain = [], // chain of wrapped filters\n       _keysIndex = Object.create(null),\n       Processors = {};   // available predicate processors\n\n\n  /**\n   * Library of processors\n   * ------------------\n   */\n\n   /**\n    *\n    * @param  {function} fn The predicate.\n    */\n  Processors.nodes = function nodes(fn) {\n    var n = _g.nodes(),\n        ln = n.length,\n        e = _g.edges(),\n        le = e.length;\n\n    // hide node, or keep former value\n    while(ln--)\n      n[ln].hidden = !fn.call(_g, n[ln]) || n[ln].hidden;\n\n    while(le--)\n      if (_g.nodes(e[le].source).hidden || _g.nodes(e[le].target).hidden)\n        e[le].hidden = true;\n  };\n\n   /**\n    *\n    * @param  {function} fn The predicate.\n    */\n  Processors.edges = function edges(fn) {\n    var e = _g.edges(),\n        le = e.length;\n\n    // hide edge, or keep former value\n    while(le--)\n      e[le].hidden = !fn.call(_g, e[le]) || e[le].hidden;\n  };\n\n   /**\n    *\n    * @param  {string} id The center node.\n    */\n  Processors.neighbors = function neighbors(id) {\n    var n = _g.nodes(),\n        ln = n.length,\n        e = _g.edges(),\n        le = e.length,\n        neighbors = _g.adjacentNodes(id),\n        nn = neighbors.length,\n        no = {};\n\n    while(nn--)\n      no[neighbors[nn].id] = true;\n\n    while(ln--)\n      if (n[ln].id !== id && !(n[ln].id in no))\n        n[ln].hidden = true;\n\n    while(le--)\n      if (_g.nodes(e[le].source).hidden || _g.nodes(e[le].target).hidden)\n        e[le].hidden = true;\n  };\n\n\n  /**\n   * This function adds a filter to the chain of filters.\n   *\n   * @param  {function} fn  The filter (i.e. predicate processor).\n   * @param  {function} p   The predicate.\n   * @param  {?string}  key The key to identify the filter.\n   */\n  function register(fn, p, key) {\n    if (key != undefined && typeof key !== 'string')\n      throw 'The filter key \"'+ key.toString() +'\" must be a string.';\n\n    if (key != undefined && !key.length)\n      throw 'The filter key must be a non-empty string.';\n\n    if (typeof fn !== 'function')\n      throw 'The predicate of key \"'+ key +'\" must be a function.';\n\n    if ('undo' === key)\n      throw '\"undo\" is a reserved key.';\n\n    if (_keysIndex[key])\n      throw 'The filter \"' + key + '\" already exists.';\n\n    if (key)\n      _keysIndex[key] = true;\n\n    _chain.push({\n      'key': key,\n      'processor': fn,\n      'predicate': p\n    });\n  };\n\n  /**\n   * This function removes a set of filters from the chain.\n   *\n   * @param {object} o The filter keys.\n   */\n  function unregister (o) {\n    _chain = _chain.filter(function(a) {\n      return !(a.key in o);\n    });\n\n    for(var key in o)\n      delete _keysIndex[key];\n  };\n\n\n\n\n  /**\n   * Filter Object\n   * ------------------\n   * @param  {sigma} s The related sigma instance.\n   */\n  function Filter(s) {\n    _s = s;\n    _g = s.graph;\n  };\n\n\n  /**\n   * This method is used to filter the nodes. The method must be called with\n   * the predicate, which is a function that takes a node as argument and\n   * returns a boolean. It may take an identifier as argument to undo the\n   * filter later. The method wraps the predicate into an anonymous function\n   * that looks through each node in the graph. When executed, the anonymous\n   * function hides the nodes that fail a truth test (predicate). The method\n   * adds the anonymous function to the chain of filters. The filter is not\n   * executed until the apply() method is called.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.nodesBy(function(n) {\n   * >   return this.degree(n.id) > 0;\n   * > }, 'degreeNotNull');\n   *\n   * @param  {function}             fn  The filter predicate.\n   * @param  {?string}              key The key to identify the filter.\n   * @return {sigma.plugins.filter}     Returns the instance.\n   */\n  Filter.prototype.nodesBy = function(fn, key) {\n    // Wrap the predicate to be applied on the graph and add it to the chain.\n    register(Processors.nodes, fn, key);\n\n    return this;\n  };\n\n  /**\n   * This method is used to filter the edges. The method must be called with\n   * the predicate, which is a function that takes a node as argument and\n   * returns a boolean. It may take an identifier as argument to undo the\n   * filter later. The method wraps the predicate into an anonymous function\n   * that looks through each edge in the graph. When executed, the anonymous\n   * function hides the edges that fail a truth test (predicate). The method\n   * adds the anonymous function to the chain of filters. The filter is not\n   * executed until the apply() method is called.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.edgesBy(function(e) {\n   * >   return e.size > 1;\n   * > }, 'edgeSize');\n   *\n   * @param  {function}             fn  The filter predicate.\n   * @param  {?string}              key The key to identify the filter.\n   * @return {sigma.plugins.filter}     Returns the instance.\n   */\n  Filter.prototype.edgesBy = function(fn, key) {\n    // Wrap the predicate to be applied on the graph and add it to the chain.\n    register(Processors.edges, fn, key);\n\n    return this;\n  };\n\n  /**\n   * This method is used to filter the nodes which are not direct connections\n   * of a given node. The method must be called with the node identifier. It\n   * may take an identifier as argument to undo the filter later. The filter\n   * is not executed until the apply() method is called.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.neighborsOf('n0');\n   *\n   * @param  {string}               id  The node id.\n   * @param  {?string}              key The key to identify the filter.\n   * @return {sigma.plugins.filter}     Returns the instance.\n   */\n  Filter.prototype.neighborsOf = function(id, key) {\n    if (typeof id !== 'string')\n      throw 'The node id \"'+ id.toString() +'\" must be a string.';\n    if (!id.length)\n      throw 'The node id must be a non-empty string.';\n\n    // Wrap the predicate to be applied on the graph and add it to the chain.\n    register(Processors.neighbors, id, key);\n\n    return this;\n  };\n\n  /**\n   * This method is used to execute the chain of filters and to refresh the\n   * display.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter\n   * >   .nodesBy(function(n) {\n   * >     return this.degree(n.id) > 0;\n   * >   }, 'degreeNotNull')\n   * >   .apply();\n   *\n   * @return {sigma.plugins.filter}      Returns the instance.\n   */\n  Filter.prototype.apply = function() {\n    for (var i = 0, len = _chain.length; i < len; ++i) {\n      _chain[i].processor(_chain[i].predicate);\n    };\n\n    if (_chain[0] && 'undo' === _chain[0].key) {\n      _chain.shift();\n    }\n\n    _s.refresh();\n\n    return this;\n  };\n\n  /**\n   * This method undoes one or several filters, depending on how it is called.\n   *\n   * To undo all filters, call \"undo\" without argument. To undo a specific\n   * filter, call it with the key of the filter. To undo multiple filters, call\n   * it with an array of keys or multiple arguments, and it will undo each\n   * filter, in the same order. The undo is not executed until the apply()\n   * method is called. For instance:\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter\n   * >   .nodesBy(function(n) {\n   * >     return this.degree(n.id) > 0;\n   * >   }, 'degreeNotNull');\n   * >   .edgesBy(function(e) {\n   * >     return e.size > 1;\n   * >   }, 'edgeSize')\n   * >   .undo();\n   *\n   * Other examples:\n   * > filter.undo();\n   * > filter.undo('myfilter');\n   * > filter.undo(['myfilter1', 'myfilter2']);\n   * > filter.undo('myfilter1', 'myfilter2');\n   *\n   * @param  {?(string|array|*string))} v Eventually one key, an array of keys.\n   * @return {sigma.plugins.filter}       Returns the instance.\n   */\n  Filter.prototype.undo = function(v) {\n    var q = Object.create(null),\n        la = arguments.length;\n\n    // find removable filters\n    if (la === 1) {\n      if (Object.prototype.toString.call(v) === '[object Array]')\n        for (var i = 0, len = v.length; i < len; i++)\n          q[v[i]] = true;\n\n      else // 1 filter key\n        q[v] = true;\n\n    } else if (la > 1) {\n      for (var i = 0; i < la; i++)\n        q[arguments[i]] = true;\n    }\n    else\n      this.clear();\n\n    unregister(q);\n\n    function processor() {\n      var n = _g.nodes(),\n          ln = n.length,\n          e = _g.edges(),\n          le = e.length;\n\n      while(ln--)\n        n[ln].hidden = false;\n\n      while(le--)\n        e[le].hidden = false;\n    };\n\n    _chain.unshift({\n      'key': 'undo',\n      'processor': processor\n    });\n\n    return this;\n  };\n\n  // fast deep copy function\n  function deepCopy(o) {\n    var copy = Object.create(null);\n    for (var i in o) {\n      if (typeof o[i] === \"object\" && o[i] !== null) {\n        copy[i] = deepCopy(o[i]);\n      }\n      else if (typeof o[i] === \"function\" && o[i] !== null) {\n        // clone function:\n        eval(\" copy[i] = \" +  o[i].toString());\n        //copy[i] = o[i].bind(_g);\n      }\n\n      else\n        copy[i] = o[i];\n    }\n    return copy;\n  };\n\n  function cloneChain(chain) {\n    // Clone the array of filters:\n    var copy = chain.slice(0);\n    for (var i = 0, len = copy.length; i < len; i++) {\n      copy[i] = deepCopy(copy[i]);\n      if (typeof copy[i].processor === \"function\")\n        copy[i].processor = 'filter.processors.' + copy[i].processor.name;\n    };\n    return copy;\n  }\n\n  /**\n   * This method is used to empty the chain of filters.\n   * Prefer the undo() method to reset filters.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.clear();\n   *\n   * @return {sigma.plugins.filter} Returns the instance.\n   */\n  Filter.prototype.clear = function() {\n    _chain.length = 0; // clear the array\n    _keysIndex = Object.create(null);\n    return this;\n  };\n\n  /**\n   * This method clones the filter chain and return the copy.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > var chain = filter.export();\n   *\n   * @return {object}   The cloned chain of filters.\n   */\n  Filter.prototype.export = function() {\n    var c = cloneChain(_chain);\n    return c;\n  };\n\n  /**\n   * This method sets the chain of filters with the specified chain.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > var chain = [\n   * >   {\n   * >     key: 'my-filter',\n   * >     predicate: function(n) {...},\n   * >     processor: 'filter.processors.nodes'\n   * >   }, ...\n   * > ];\n   * > filter.import(chain);\n   *\n   * @param {array} chain The chain of filters.\n   * @return {sigma.plugins.filter} Returns the instance.\n   */\n  Filter.prototype.import = function(chain) {\n    if (chain === undefined)\n      throw 'Wrong arguments.';\n\n    if (Object.prototype.toString.call(chain) !== '[object Array]')\n      throw 'The chain\" must be an array.';\n\n    var copy = cloneChain(chain);\n\n    for (var i = 0, len = copy.length; i < len; i++) {\n      if (copy[i].predicate === undefined || copy[i].processor === undefined)\n        throw 'Wrong arguments.';\n\n      if (copy[i].key != undefined && typeof copy[i].key !== 'string')\n        throw 'The filter key \"'+ copy[i].key.toString() +'\" must be a string.';\n\n      if (typeof copy[i].predicate !== 'function')\n        throw 'The predicate of key \"'+ copy[i].key +'\" must be a function.';\n\n      if (typeof copy[i].processor !== 'string')\n        throw 'The processor of key \"'+ copy[i].key +'\" must be a string.';\n\n      // Replace the processor name by the corresponding function:\n      switch(copy[i].processor) {\n        case 'filter.processors.nodes':\n          copy[i].processor = Processors.nodes;\n          break;\n        case 'filter.processors.edges':\n          copy[i].processor = Processors.edges;\n          break;\n        case 'filter.processors.neighbors':\n          copy[i].processor = Processors.neighbors;\n          break;\n        default:\n          throw 'Unknown processor ' + copy[i].processor;\n      }\n    };\n\n    _chain = copy;\n\n    return this;\n  };\n\n\n  /**\n   * Interface\n   * ------------------\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   */\n  var filter = null;\n\n  /**\n   * @param  {sigma} s The related sigma instance.\n   */\n  sigma.plugins.filter = function(s) {\n    // Create new filter to update the graph params. Be aware, filter is a singleton,\n    // therefore filter instance can work on one sigma instance at a time.\n    filter = new Filter(s);\n    return filter;\n  };\n\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 124);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 124:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n(function() {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  sigma.utils.pkg('sigma.plugins');\n\n  var _id = 0,\n      _cache = {};\n\n  /**\n   * This function will change size for all nodes depending to their degree\n   *\n   * @param  {sigma}   s       \t\tThe related sigma instance.\n   * @param  {object}  initialSize \tStart size property\n   */\n  sigma.plugins.relativeSize = function(s, initialSize) {\n    var nodes = s.graph.nodes();\n\n    // second create size for every node\n    for(var i = 0; i < nodes.length; i++) {\n      var degree = s.graph.degree(nodes[i].id);\n      nodes[i].size = initialSize * Math.sqrt(degree);\n    }\n    s.refresh();\n  };\n}).call(window);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\nvar Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 117);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 117:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js__);\n\n\n\n\n\n\n\n\n/***/ },\n\n/***/ 62:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(global) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.renderers');\n\n  // Check if WebGL is enabled:\n  var canvas,\n      webgl = !!global.WebGLRenderingContext;\n  if (webgl) {\n    canvas = document.createElement('canvas');\n    try {\n      webgl = !!(\n        canvas.getContext('webgl') ||\n        canvas.getContext('experimental-webgl')\n      );\n    } catch (e) {\n      webgl = false;\n    }\n  }\n\n  // Copy the good renderer:\n  sigma.renderers.def = webgl ?\n    sigma.renderers.webgl :\n    sigma.renderers.canvas;\n})(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 63:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.renderers');\n\n  /**\n   * This function is the constructor of the canvas sigma's renderer.\n   *\n   * @param  {sigma.classes.graph}            graph    The graph to render.\n   * @param  {sigma.classes.camera}           camera   The camera.\n   * @param  {configurable}           settings The sigma instance settings\n   *                                           function.\n   * @param  {object}                 object   The options object.\n   * @return {sigma.renderers.canvas}          The renderer instance.\n   */\n  sigma.renderers.webgl = function(graph, camera, settings, options) {\n    if (typeof options !== 'object')\n      throw 'sigma.renderers.webgl: Wrong arguments.';\n\n    if (!(options.container instanceof HTMLElement))\n      throw 'Container not found.';\n\n    var k,\n        i,\n        l,\n        a,\n        fn,\n        _self = this;\n\n    sigma.classes.dispatcher.extend(this);\n\n    // Conrad related attributes:\n    this.jobs = {};\n\n    Object.defineProperty(this, 'conradId', {\n      value: sigma.utils.id()\n    });\n\n    // Initialize main attributes:\n    this.graph = graph;\n    this.camera = camera;\n    this.contexts = {};\n    this.domElements = {};\n    this.options = options;\n    this.container = this.options.container;\n    this.settings = (\n        typeof options.settings === 'object' &&\n        options.settings\n      ) ?\n        settings.embedObjects(options.settings) :\n        settings;\n\n    // Find the prefix:\n    this.options.prefix = this.camera.readPrefix;\n\n    // Initialize programs hash\n    Object.defineProperty(this, 'nodePrograms', {\n      value: {}\n    });\n    Object.defineProperty(this, 'edgePrograms', {\n      value: {}\n    });\n    Object.defineProperty(this, 'nodeFloatArrays', {\n      value: {}\n    });\n    Object.defineProperty(this, 'edgeFloatArrays', {\n      value: {}\n    });\n    Object.defineProperty(this, 'edgeIndicesArrays', {\n      value: {}\n    });\n\n    // Initialize the DOM elements:\n    if (this.settings(options, 'batchEdgesDrawing')) {\n      this.initDOM('canvas', 'edges', true);\n      this.initDOM('canvas', 'nodes', true);\n    } else {\n      this.initDOM('canvas', 'scene', true);\n      this.contexts.nodes = this.contexts.scene;\n      this.contexts.edges = this.contexts.scene;\n    }\n\n    this.initDOM('canvas', 'labels');\n    this.initDOM('canvas', 'mouse');\n    this.contexts.hover = this.contexts.mouse;\n\n    // Initialize captors:\n    this.captors = [];\n    a = this.options.captors || [sigma.captors.mouse, sigma.captors.touch];\n    for (i = 0, l = a.length; i < l; i++) {\n      fn = typeof a[i] === 'function' ? a[i] : sigma.captors[a[i]];\n      this.captors.push(\n        new fn(\n          this.domElements.mouse,\n          this.camera,\n          this.settings\n        )\n      );\n    }\n\n    // Deal with sigma events:\n    sigma.misc.bindEvents.call(this, this.camera.prefix);\n    sigma.misc.drawHovers.call(this, this.camera.prefix);\n\n    this.resize();\n  };\n\n\n\n\n  /**\n   * This method will generate the nodes and edges float arrays. This step is\n   * separated from the \"render\" method, because to keep WebGL efficient, since\n   * all the camera and middlewares are modelised as matrices and they do not\n   * require the float arrays to be regenerated.\n   *\n   * Basically, when the user moves the camera or applies some specific linear\n   * transformations, this process step will be skipped, and the \"render\"\n   * method will efficiently refresh the rendering.\n   *\n   * And when the user modifies the graph colors or positions (applying a new\n   * layout or filtering the colors, for instance), this \"process\" step will be\n   * required to regenerate the float arrays.\n   *\n   * @return {sigma.renderers.webgl} Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.process = function() {\n    var a,\n        i,\n        l,\n        k,\n        type,\n        renderer,\n        graph = this.graph,\n        options = sigma.utils.extend(options, this.options),\n        defaultEdgeType = this.settings(options, 'defaultEdgeType'),\n        defaultNodeType = this.settings(options, 'defaultNodeType');\n\n    // Empty float arrays:\n    for (k in this.nodeFloatArrays)\n      delete this.nodeFloatArrays[k];\n\n    for (k in this.edgeFloatArrays)\n      delete this.edgeFloatArrays[k];\n\n    for (k in this.edgeIndicesArrays)\n      delete this.edgeIndicesArrays[k];\n\n    // Sort edges and nodes per types:\n    for (a = graph.edges(), i = 0, l = a.length; i < l; i++) {\n      type = a[i].type || defaultEdgeType;\n      k = (type && sigma.webgl.edges[type]) ? type : 'def';\n\n      if (!this.edgeFloatArrays[k])\n        this.edgeFloatArrays[k] = {\n          edges: []\n        };\n\n      this.edgeFloatArrays[k].edges.push(a[i]);\n    }\n\n    for (a = graph.nodes(), i = 0, l = a.length; i < l; i++) {\n      type = a[i].type || defaultNodeType;\n      k = (type && sigma.webgl.nodes[type]) ? type : 'def';\n\n      if (!this.nodeFloatArrays[k])\n        this.nodeFloatArrays[k] = {\n          nodes: []\n        };\n\n      this.nodeFloatArrays[k].nodes.push(a[i]);\n    }\n\n    // Push edges:\n    for (k in this.edgeFloatArrays) {\n      renderer = sigma.webgl.edges[k];\n      a = this.edgeFloatArrays[k].edges;\n\n      // Creating the necessary arrays\n      this.edgeFloatArrays[k].array = new Float32Array(\n        a.length * renderer.POINTS * renderer.ATTRIBUTES\n      );\n\n      for (i = 0, l = a.length; i < l; i++) {\n\n        // Just check that the edge and both its extremities are visible:\n        if (\n          !a[i].hidden &&\n          !graph.nodes(a[i].source).hidden &&\n          !graph.nodes(a[i].target).hidden\n        )\n          renderer.addEdge(\n            a[i],\n            graph.nodes(a[i].source),\n            graph.nodes(a[i].target),\n            this.edgeFloatArrays[k].array,\n            i * renderer.POINTS * renderer.ATTRIBUTES,\n            options.prefix,\n            this.settings\n          );\n      }\n\n      if (typeof renderer.computeIndices === 'function')\n        this.edgeIndicesArrays[k] = renderer.computeIndices(\n          this.edgeFloatArrays[k].array\n        );\n    }\n\n    // Push nodes:\n    for (k in this.nodeFloatArrays) {\n      renderer = sigma.webgl.nodes[k];\n      a = this.nodeFloatArrays[k].nodes;\n\n      // Creating the necessary arrays\n      this.nodeFloatArrays[k].array = new Float32Array(\n        a.length * renderer.POINTS * renderer.ATTRIBUTES\n      );\n\n      for (i = 0, l = a.length; i < l; i++) {\n        if (!this.nodeFloatArrays[k].array)\n          this.nodeFloatArrays[k].array = new Float32Array(\n            a.length * renderer.POINTS * renderer.ATTRIBUTES\n          );\n\n        // Just check that the edge and both its extremities are visible:\n        if (\n          !a[i].hidden\n        )\n          renderer.addNode(\n            a[i],\n            this.nodeFloatArrays[k].array,\n            i * renderer.POINTS * renderer.ATTRIBUTES,\n            options.prefix,\n            this.settings\n          );\n      }\n    }\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method renders the graph. It basically calls each program (and\n   * generate them if they do not exist yet) to render nodes and edges, batched\n   * per renderer.\n   *\n   * As in the canvas renderer, it is possible to display edges, nodes and / or\n   * labels in batches, to make the whole thing way more scalable.\n   *\n   * @param  {?object}               params Eventually an object of options.\n   * @return {sigma.renderers.webgl}        Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.render = function(params) {\n    var a,\n        i,\n        l,\n        k,\n        o,\n        program,\n        renderer,\n        self = this,\n        graph = this.graph,\n        nodesGl = this.contexts.nodes,\n        edgesGl = this.contexts.edges,\n        matrix = this.camera.getMatrix(),\n        options = sigma.utils.extend(params, this.options),\n        drawLabels = this.settings(options, 'drawLabels'),\n        drawEdges = this.settings(options, 'drawEdges'),\n        drawNodes = this.settings(options, 'drawNodes');\n\n    // Call the resize function:\n    this.resize(false);\n\n    // Check the 'hideEdgesOnMove' setting:\n    if (this.settings(options, 'hideEdgesOnMove'))\n      if (this.camera.isAnimated || this.camera.isMoving)\n        drawEdges = false;\n\n    // Clear canvases:\n    this.clear();\n\n    // Translate matrix to [width/2, height/2]:\n    matrix = sigma.utils.matrices.multiply(\n      matrix,\n      sigma.utils.matrices.translation(this.width / 2, this.height / 2)\n    );\n\n    // Kill running jobs:\n    for (k in this.jobs)\n      if (conrad.hasJob(k))\n        conrad.killJob(k);\n\n    if (drawEdges) {\n      if (this.settings(options, 'batchEdgesDrawing'))\n        (function() {\n          var a,\n              k,\n              i,\n              id,\n              job,\n              arr,\n              end,\n              start,\n              indices,\n              renderer,\n              batchSize,\n              currentProgram;\n\n          id = 'edges_' + this.conradId;\n          batchSize = this.settings(options, 'webglEdgesBatchSize');\n          a = Object.keys(this.edgeFloatArrays);\n\n          if (!a.length)\n            return;\n          i = 0;\n          renderer = sigma.webgl.edges[a[i]];\n          arr = this.edgeFloatArrays[a[i]].array;\n          indices = this.edgeIndicesArrays[a[i]];\n          start = 0;\n          end = Math.min(\n            start + batchSize * renderer.POINTS,\n            arr.length / renderer.ATTRIBUTES\n          );\n\n          job = function() {\n            // Check program:\n            if (!this.edgePrograms[a[i]])\n              this.edgePrograms[a[i]] = renderer.initProgram(edgesGl);\n\n            if (start < end) {\n              edgesGl.useProgram(this.edgePrograms[a[i]]);\n              renderer.render(\n                edgesGl,\n                this.edgePrograms[a[i]],\n                arr,\n                {\n                  settings: this.settings,\n                  matrix: matrix,\n                  width: this.width,\n                  height: this.height,\n                  ratio: this.camera.ratio,\n                  scalingRatio: this.settings(\n                    options,\n                    'webglOversamplingRatio'\n                  ),\n                  start: start,\n                  count: end - start,\n                  indicesData: indices\n                }\n              );\n            }\n\n            // Catch job's end:\n            if (\n              end >= arr.length / renderer.ATTRIBUTES &&\n              i === a.length - 1\n            ) {\n              delete this.jobs[id];\n              return false;\n            }\n\n            if (end >= arr.length / renderer.ATTRIBUTES) {\n              i++;\n              arr = this.edgeFloatArrays[a[i]].array;\n              renderer = sigma.webgl.edges[a[i]];\n              start = 0;\n              end = Math.min(\n                start + batchSize * renderer.POINTS,\n                arr.length / renderer.ATTRIBUTES\n              );\n            } else {\n              start = end;\n              end = Math.min(\n                start + batchSize * renderer.POINTS,\n                arr.length / renderer.ATTRIBUTES\n              );\n            }\n\n            return true;\n          };\n\n          this.jobs[id] = job;\n          conrad.addJob(id, job.bind(this));\n        }).call(this);\n      else {\n        for (k in this.edgeFloatArrays) {\n          renderer = sigma.webgl.edges[k];\n\n          // Check program:\n          if (!this.edgePrograms[k])\n            this.edgePrograms[k] = renderer.initProgram(edgesGl);\n\n          // Render\n          if (this.edgeFloatArrays[k]) {\n            edgesGl.useProgram(this.edgePrograms[k]);\n            renderer.render(\n              edgesGl,\n              this.edgePrograms[k],\n              this.edgeFloatArrays[k].array,\n              {\n                settings: this.settings,\n                matrix: matrix,\n                width: this.width,\n                height: this.height,\n                ratio: this.camera.ratio,\n                scalingRatio: this.settings(options, 'webglOversamplingRatio'),\n                indicesData: this.edgeIndicesArrays[k]\n              }\n            );\n          }\n        }\n      }\n    }\n\n    if (drawNodes) {\n      // Enable blending:\n      nodesGl.blendFunc(nodesGl.SRC_ALPHA, nodesGl.ONE_MINUS_SRC_ALPHA);\n      nodesGl.enable(nodesGl.BLEND);\n\n      for (k in this.nodeFloatArrays) {\n        renderer = sigma.webgl.nodes[k];\n\n        // Check program:\n        if (!this.nodePrograms[k])\n          this.nodePrograms[k] = renderer.initProgram(nodesGl);\n\n        // Render\n        if (this.nodeFloatArrays[k]) {\n          nodesGl.useProgram(this.nodePrograms[k]);\n          renderer.render(\n            nodesGl,\n            this.nodePrograms[k],\n            this.nodeFloatArrays[k].array,\n            {\n              settings: this.settings,\n              matrix: matrix,\n              width: this.width,\n              height: this.height,\n              ratio: this.camera.ratio,\n              scalingRatio: this.settings(options, 'webglOversamplingRatio')\n            }\n          );\n        }\n      }\n    }\n\n    if (drawLabels) {\n      a = this.camera.quadtree.area(\n        this.camera.getRectangle(this.width, this.height)\n      );\n\n      // Apply camera view to these nodes:\n      this.camera.applyView(\n        undefined,\n        undefined,\n        {\n          nodes: a,\n          edges: [],\n          width: this.width,\n          height: this.height\n        }\n      );\n\n      o = function(key) {\n        return self.settings({\n          prefix: self.camera.prefix\n        }, key);\n      };\n\n      for (i = 0, l = a.length; i < l; i++)\n        if (!a[i].hidden)\n          (\n            sigma.canvas.labels[\n              a[i].type ||\n              this.settings(options, 'defaultNodeType')\n            ] || sigma.canvas.labels.def\n          )(a[i], this.contexts.labels, o);\n    }\n\n    this.dispatchEvent('render');\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method creates a DOM element of the specified type, switches its\n   * position to \"absolute\", references it to the domElements attribute, and\n   * finally appends it to the container.\n   *\n   * @param  {string}   tag   The label tag.\n   * @param  {string}   id    The id of the element (to store it in\n   *                          \"domElements\").\n   * @param  {?boolean} webgl Will init the WebGL context if true.\n   */\n  sigma.renderers.webgl.prototype.initDOM = function(tag, id, webgl) {\n    var gl,\n        dom = document.createElement(tag),\n        self = this;\n\n    dom.style.position = 'absolute';\n    dom.setAttribute('class', 'sigma-' + id);\n\n    this.domElements[id] = dom;\n    this.container.appendChild(dom);\n\n    if (tag.toLowerCase() === 'canvas') {\n      this.contexts[id] = dom.getContext(webgl ? 'experimental-webgl' : '2d', {\n        preserveDrawingBuffer: true\n      });\n\n      // Adding webgl context loss listeners\n      if (webgl) {\n        dom.addEventListener('webglcontextlost', function(e) {\n          e.preventDefault();\n        }, false);\n\n        dom.addEventListener('webglcontextrestored', function(e) {\n          self.render();\n        }, false);\n      }\n    }\n  };\n\n  /**\n   * This method resizes each DOM elements in the container and stores the new\n   * dimensions. Then, it renders the graph.\n   *\n   * @param  {?number}               width  The new width of the container.\n   * @param  {?number}               height The new height of the container.\n   * @return {sigma.renderers.webgl}        Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.resize = function(w, h) {\n    var k,\n        oldWidth = this.width,\n        oldHeight = this.height,\n        pixelRatio = sigma.utils.getPixelRatio();\n\n    if (w !== undefined && h !== undefined) {\n      this.width = w;\n      this.height = h;\n    } else {\n      this.width = this.container.offsetWidth;\n      this.height = this.container.offsetHeight;\n\n      w = this.width;\n      h = this.height;\n    }\n\n    if (oldWidth !== this.width || oldHeight !== this.height) {\n      for (k in this.domElements) {\n        this.domElements[k].style.width = w + 'px';\n        this.domElements[k].style.height = h + 'px';\n\n        if (this.domElements[k].tagName.toLowerCase() === 'canvas') {\n          // If simple 2D canvas:\n          if (this.contexts[k] && this.contexts[k].scale) {\n            this.domElements[k].setAttribute('width', (w * pixelRatio) + 'px');\n            this.domElements[k].setAttribute('height', (h * pixelRatio) + 'px');\n\n            if (pixelRatio !== 1)\n              this.contexts[k].scale(pixelRatio, pixelRatio);\n          } else {\n            this.domElements[k].setAttribute(\n              'width',\n              (w * this.settings('webglOversamplingRatio')) + 'px'\n            );\n            this.domElements[k].setAttribute(\n              'height',\n              (h * this.settings('webglOversamplingRatio')) + 'px'\n            );\n          }\n        }\n      }\n    }\n\n    // Scale:\n    for (k in this.contexts)\n      if (this.contexts[k] && this.contexts[k].viewport)\n        this.contexts[k].viewport(\n          0,\n          0,\n          this.width * this.settings('webglOversamplingRatio'),\n          this.height * this.settings('webglOversamplingRatio')\n        );\n\n    return this;\n  };\n\n  /**\n   * This method clears each canvas.\n   *\n   * @return {sigma.renderers.webgl} Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.clear = function() {\n    this.contexts.labels.clearRect(0, 0, this.width, this.height);\n    this.contexts.nodes.clear(this.contexts.nodes.COLOR_BUFFER_BIT);\n    this.contexts.edges.clear(this.contexts.edges.COLOR_BUFFER_BIT);\n\n    return this;\n  };\n\n  /**\n   * This method kills contexts and other attributes.\n   */\n  sigma.renderers.webgl.prototype.kill = function() {\n    var k,\n        captor;\n\n    // Kill captors:\n    while ((captor = this.captors.pop()))\n      captor.kill();\n    delete this.captors;\n\n    // Kill contexts:\n    for (k in this.domElements) {\n      this.domElements[k].parentNode.removeChild(this.domElements[k]);\n      delete this.domElements[k];\n      delete this.contexts[k];\n    }\n    delete this.domElements;\n    delete this.contexts;\n  };\n\n\n\n\n  /**\n   * The object \"sigma.webgl.nodes\" contains the different WebGL node\n   * renderers. The default one draw nodes as discs. Here are the attributes\n   * any node renderer must have:\n   *\n   * {number}   POINTS      The number of points required to draw a node.\n   * {number}   ATTRIBUTES  The number of attributes needed to draw one point.\n   * {function} addNode     A function that adds a node to the data stack that\n   *                        will be given to the buffer. Here is the arguments:\n   *                        > {object}       node\n   *                        > {number}       index   The node index in the\n   *                                                 nodes array.\n   *                        > {Float32Array} data    The stack.\n   *                        > {object}       options Some options.\n   * {function} render      The function that will effectively render the nodes\n   *                        into the buffer.\n   *                        > {WebGLRenderingContext} gl\n   *                        > {WebGLProgram}          program\n   *                        > {Float32Array} data    The stack to give to the\n   *                                                 buffer.\n   *                        > {object}       params  An object containing some\n   *                                                 options, like width,\n   *                                                 height, the camera ratio.\n   * {function} initProgram The function that will initiate the program, with\n   *                        the relevant shaders and parameters. It must return\n   *                        the newly created program.\n   *\n   * Check sigma.webgl.nodes.def or sigma.webgl.nodes.fast to see how it\n   * works more precisely.\n   */\n  sigma.utils.pkg('sigma.webgl.nodes');\n\n\n\n\n  /**\n   * The object \"sigma.webgl.edges\" contains the different WebGL edge\n   * renderers. The default one draw edges as direct lines. Here are the\n   * attributes any edge renderer must have:\n   *\n   * {number}   POINTS      The number of points required to draw an edge.\n   * {number}   ATTRIBUTES  The number of attributes needed to draw one point.\n   * {function} addEdge     A function that adds an edge to the data stack that\n   *                        will be given to the buffer. Here is the arguments:\n   *                        > {object}       edge\n   *                        > {object}       source\n   *                        > {object}       target\n   *                        > {Float32Array} data    The stack.\n   *                        > {object}       options Some options.\n   * {function} render      The function that will effectively render the edges\n   *                        into the buffer.\n   *                        > {WebGLRenderingContext} gl\n   *                        > {WebGLProgram}          program\n   *                        > {Float32Array} data    The stack to give to the\n   *                                                 buffer.\n   *                        > {object}       params  An object containing some\n   *                                                 options, like width,\n   *                                                 height, the camera ratio.\n   * {function} initProgram The function that will initiate the program, with\n   *                        the relevant shaders and parameters. It must return\n   *                        the newly created program.\n   *\n   * Check sigma.webgl.edges.def or sigma.webgl.edges.fast to see how it\n   * works more precisely.\n   */\n  sigma.utils.pkg('sigma.webgl.edges');\n\n\n\n\n  /**\n   * The object \"sigma.canvas.labels\" contains the different\n   * label renderers for the WebGL renderer. Since displaying texts in WebGL is\n   * definitely painful and since there a way less labels to display than nodes\n   * or edges, the default renderer simply renders them in a canvas.\n   *\n   * A labels renderer is a simple function, taking as arguments the related\n   * node, the renderer and a settings function.\n   */\n  sigma.utils.pkg('sigma.canvas.labels');\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 64:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.edges');\n\n  /**\n   * This edge renderer will display edges as arrows going from the source node\n   * to the target node. To deal with edge thicknesses, the lines are made of\n   * three triangles: two forming rectangles, with the gl.TRIANGLES drawing\n   * mode.\n   *\n   * It is expensive, since drawing a single edge requires 9 points, each\n   * having a lot of attributes.\n   */\n  sigma.webgl.edges.arrow = {\n    POINTS: 9,\n    ATTRIBUTES: 11,\n    addEdge: function(edge, source, target, data, i, prefix, settings) {\n      var w = (edge[prefix + 'size'] || 1) / 2,\n          x1 = source[prefix + 'x'],\n          y1 = source[prefix + 'y'],\n          x2 = target[prefix + 'x'],\n          y2 = target[prefix + 'y'],\n          targetSize = target[prefix + 'size'],\n          color = edge.color;\n\n      if (!color)\n        switch (settings('edgeColor')) {\n          case 'source':\n            color = source.color || settings('defaultNodeColor');\n            break;\n          case 'target':\n            color = target.color || settings('defaultNodeColor');\n            break;\n          default:\n            color = settings('defaultEdgeColor');\n            break;\n        }\n\n      // Normalize color:\n      color = sigma.utils.floatColor(color);\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      // Arrow head:\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = -1.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = 1.0;\n      data[i++] = color;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var positionLocation1 =\n            gl.getAttribLocation(program, 'a_pos1'),\n          positionLocation2 =\n            gl.getAttribLocation(program, 'a_pos2'),\n          thicknessLocation =\n            gl.getAttribLocation(program, 'a_thickness'),\n          targetSizeLocation =\n            gl.getAttribLocation(program, 'a_tSize'),\n          delayLocation =\n            gl.getAttribLocation(program, 'a_delay'),\n          minusLocation =\n            gl.getAttribLocation(program, 'a_minus'),\n          headLocation =\n            gl.getAttribLocation(program, 'a_head'),\n          headPositionLocation =\n            gl.getAttribLocation(program, 'a_headPosition'),\n          colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          matrixHalfPiLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPi'),\n          matrixHalfPiMinusLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPiMinus'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          nodeRatioLocation =\n            gl.getUniformLocation(program, 'u_nodeRatio'),\n          arrowHeadLocation =\n            gl.getUniformLocation(program, 'u_arrowHead'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        params.ratio / Math.pow(params.ratio, params.settings('edgesPowRatio'))\n      );\n      gl.uniform1f(\n        nodeRatioLocation,\n        Math.pow(params.ratio, params.settings('nodesPowRatio')) /\n        params.ratio\n      );\n      gl.uniform1f(arrowHeadLocation, 5.0);\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n      gl.uniformMatrix2fv(\n        matrixHalfPiLocation,\n        false,\n        sigma.utils.matrices.rotation(Math.PI / 2, true)\n      );\n      gl.uniformMatrix2fv(\n        matrixHalfPiMinusLocation,\n        false,\n        sigma.utils.matrices.rotation(-Math.PI / 2, true)\n      );\n\n      gl.enableVertexAttribArray(positionLocation1);\n      gl.enableVertexAttribArray(positionLocation2);\n      gl.enableVertexAttribArray(thicknessLocation);\n      gl.enableVertexAttribArray(targetSizeLocation);\n      gl.enableVertexAttribArray(delayLocation);\n      gl.enableVertexAttribArray(minusLocation);\n      gl.enableVertexAttribArray(headLocation);\n      gl.enableVertexAttribArray(headPositionLocation);\n      gl.enableVertexAttribArray(colorLocation);\n\n      gl.vertexAttribPointer(positionLocation1,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(positionLocation2,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(thicknessLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        16\n      );\n      gl.vertexAttribPointer(targetSizeLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        20\n      );\n      gl.vertexAttribPointer(delayLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        24\n      );\n      gl.vertexAttribPointer(minusLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        28\n      );\n      gl.vertexAttribPointer(headLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        32\n      );\n      gl.vertexAttribPointer(headPositionLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        36\n      );\n      gl.vertexAttribPointer(colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        40\n      );\n\n      gl.drawArrays(\n        gl.TRIANGLES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_pos1;',\n          'attribute vec2 a_pos2;',\n          'attribute float a_thickness;',\n          'attribute float a_tSize;',\n          'attribute float a_delay;',\n          'attribute float a_minus;',\n          'attribute float a_head;',\n          'attribute float a_headPosition;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_nodeRatio;',\n          'uniform float u_arrowHead;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n          'uniform mat2 u_matrixHalfPi;',\n          'uniform mat2 u_matrixHalfPiMinus;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Find the good point:\n            'vec2 pos = normalize(a_pos2 - a_pos1);',\n\n            'mat2 matrix = (1.0 - a_head) *',\n              '(',\n                'a_minus * u_matrixHalfPiMinus +',\n                '(1.0 - a_minus) * u_matrixHalfPi',\n              ') + a_head * (',\n                'a_headPosition * u_matrixHalfPiMinus * 0.6 +',\n                '(a_headPosition * a_headPosition - 1.0) * mat2(1.0)',\n              ');',\n\n            'pos = a_pos1 + (',\n              // Deal with body:\n              '(1.0 - a_head) * a_thickness * u_ratio * matrix * pos +',\n              // Deal with head:\n              'a_head * u_arrowHead * a_thickness * u_ratio * matrix * pos +',\n              // Deal with delay:\n              'a_delay * pos * (',\n                'a_tSize / u_nodeRatio +',\n                'u_arrowHead * a_thickness * u_ratio',\n              ')',\n            ');',\n\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(pos, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'gl_FragColor = color;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 65:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.edges');\n\n  /**\n   * This edge renderer will display edges as lines going from the source node\n   * to the target node. To deal with edge thicknesses, the lines are made of\n   * two triangles forming rectangles, with the gl.TRIANGLES drawing mode.\n   *\n   * It is expensive, since drawing a single edge requires 6 points, each\n   * having 7 attributes (source position, target position, thickness, color\n   * and a flag indicating which vertice of the rectangle it is).\n   */\n  sigma.webgl.edges.def = {\n    POINTS: 6,\n    ATTRIBUTES: 7,\n    addEdge: function(edge, source, target, data, i, prefix, settings) {\n      var w = (edge[prefix + 'size'] || 1) / 2,\n          x1 = source[prefix + 'x'],\n          y1 = source[prefix + 'y'],\n          x2 = target[prefix + 'x'],\n          y2 = target[prefix + 'y'],\n          color = edge.color;\n\n      if (!color)\n        switch (settings('edgeColor')) {\n          case 'source':\n            color = source.color || settings('defaultNodeColor');\n            break;\n          case 'target':\n            color = target.color || settings('defaultNodeColor');\n            break;\n          default:\n            color = settings('defaultEdgeColor');\n            break;\n        }\n\n      // Normalize color:\n      color = sigma.utils.floatColor(color);\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = 1.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = 1.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          positionLocation1 =\n            gl.getAttribLocation(program, 'a_position1'),\n          positionLocation2 =\n            gl.getAttribLocation(program, 'a_position2'),\n          thicknessLocation =\n            gl.getAttribLocation(program, 'a_thickness'),\n          minusLocation =\n            gl.getAttribLocation(program, 'a_minus'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          matrixHalfPiLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPi'),\n          matrixHalfPiMinusLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPiMinus'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        params.ratio / Math.pow(params.ratio, params.settings('edgesPowRatio'))\n      );\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n      gl.uniformMatrix2fv(\n        matrixHalfPiLocation,\n        false,\n        sigma.utils.matrices.rotation(Math.PI / 2, true)\n      );\n      gl.uniformMatrix2fv(\n        matrixHalfPiMinusLocation,\n        false,\n        sigma.utils.matrices.rotation(-Math.PI / 2, true)\n      );\n\n      gl.enableVertexAttribArray(colorLocation);\n      gl.enableVertexAttribArray(positionLocation1);\n      gl.enableVertexAttribArray(positionLocation2);\n      gl.enableVertexAttribArray(thicknessLocation);\n      gl.enableVertexAttribArray(minusLocation);\n\n      gl.vertexAttribPointer(positionLocation1,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(positionLocation2,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(thicknessLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        16\n      );\n      gl.vertexAttribPointer(minusLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        20\n      );\n      gl.vertexAttribPointer(colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        24\n      );\n\n      gl.drawArrays(\n        gl.TRIANGLES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position1;',\n          'attribute vec2 a_position2;',\n          'attribute float a_thickness;',\n          'attribute float a_minus;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n          'uniform mat2 u_matrixHalfPi;',\n          'uniform mat2 u_matrixHalfPiMinus;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Find the good point:\n            'vec2 position = a_thickness * u_ratio *',\n              'normalize(a_position2 - a_position1);',\n\n            'mat2 matrix = a_minus * u_matrixHalfPiMinus +',\n              '(1.0 - a_minus) * u_matrixHalfPi;',\n\n            'position = matrix * position + a_position1;',\n\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(position, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'gl_FragColor = color;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 66:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.edges');\n\n  /**\n   * This edge renderer will display edges as lines with the gl.LINES display\n   * mode. Since this mode does not support well thickness, edges are all drawn\n   * with the same thickness (3px), independantly of the edge attributes or the\n   * zooming ratio.\n   */\n  sigma.webgl.edges.fast = {\n    POINTS: 2,\n    ATTRIBUTES: 3,\n    addEdge: function(edge, source, target, data, i, prefix, settings) {\n      var w = (edge[prefix + 'size'] || 1) / 2,\n          x1 = source[prefix + 'x'],\n          y1 = source[prefix + 'y'],\n          x2 = target[prefix + 'x'],\n          y2 = target[prefix + 'y'],\n          color = edge.color;\n\n      if (!color)\n        switch (settings('edgeColor')) {\n          case 'source':\n            color = source.color || settings('defaultNodeColor');\n            break;\n          case 'target':\n            color = target.color || settings('defaultNodeColor');\n            break;\n          default:\n            color = settings('defaultEdgeColor');\n            break;\n        }\n\n      // Normalize color:\n      color = sigma.utils.floatColor(color);\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = color;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          positionLocation =\n            gl.getAttribLocation(program, 'a_position'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n\n      gl.enableVertexAttribArray(positionLocation);\n      gl.enableVertexAttribArray(colorLocation);\n\n      gl.vertexAttribPointer(positionLocation,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n\n      gl.lineWidth(3);\n      gl.drawArrays(\n        gl.LINES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform mat3 u_matrix;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(a_position, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'gl_FragColor = color;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 67:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.nodes');\n\n  /**\n   * This node renderer will display nodes as discs, shaped in triangles with\n   * the gl.TRIANGLES display mode. So, to be more precise, to draw one node,\n   * it will store three times the center of node, with the color and the size,\n   * and an angle indicating which \"corner\" of the triangle to draw.\n   *\n   * The fragment shader does not deal with anti-aliasing, so make sure that\n   * you deal with it somewhere else in the code (by default, the WebGL\n   * renderer will oversample the rendering through the webglOversamplingRatio\n   * value).\n   */\n  sigma.webgl.nodes.def = {\n    POINTS: 3,\n    ATTRIBUTES: 5,\n    addNode: function(node, data, i, prefix, settings) {\n      var color = sigma.utils.floatColor(\n        node.color || settings('defaultNodeColor')\n      );\n\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = color;\n      data[i++] = 0;\n\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = color;\n      data[i++] = 2 * Math.PI / 3;\n\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = color;\n      data[i++] = 4 * Math.PI / 3;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var positionLocation =\n            gl.getAttribLocation(program, 'a_position'),\n          sizeLocation =\n            gl.getAttribLocation(program, 'a_size'),\n          colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          angleLocation =\n            gl.getAttribLocation(program, 'a_angle'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        1 / Math.pow(params.ratio, params.settings('nodesPowRatio'))\n      );\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n\n      gl.enableVertexAttribArray(positionLocation);\n      gl.enableVertexAttribArray(sizeLocation);\n      gl.enableVertexAttribArray(colorLocation);\n      gl.enableVertexAttribArray(angleLocation);\n\n      gl.vertexAttribPointer(\n        positionLocation,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(\n        sizeLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(\n        colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        12\n      );\n      gl.vertexAttribPointer(\n        angleLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        16\n      );\n\n      gl.drawArrays(\n        gl.TRIANGLES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position;',\n          'attribute float a_size;',\n          'attribute float a_color;',\n          'attribute float a_angle;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n\n          'varying vec4 color;',\n          'varying vec2 center;',\n          'varying float radius;',\n\n          'void main() {',\n            // Multiply the point size twice:\n            'radius = a_size * u_ratio;',\n\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'vec2 position = (u_matrix * vec3(a_position, 1)).xy;',\n            // 'center = (position / u_resolution * 2.0 - 1.0) * vec2(1, -1);',\n            'center = position * u_scale;',\n            'center = vec2(center.x, u_scale * u_resolution.y - center.y);',\n\n            'position = position +',\n              '2.0 * radius * vec2(cos(a_angle), sin(a_angle));',\n            'position = (position / u_resolution * 2.0 - 1.0) * vec2(1, -1);',\n\n            'radius = radius * u_scale;',\n\n            'gl_Position = vec4(position, 0, 1);',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n          'varying vec2 center;',\n          'varying float radius;',\n\n          'void main(void) {',\n            'vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);',\n\n            'vec2 m = gl_FragCoord.xy - center;',\n            'float diff = radius - sqrt(m.x * m.x + m.y * m.y);',\n\n            // Here is how we draw a disc instead of a square:\n            'if (diff > 0.0)',\n              'gl_FragColor = color;',\n            'else',\n              'gl_FragColor = color0;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 68:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.nodes');\n\n  /**\n   * This node renderer will display nodes in the fastest way: Nodes are basic\n   * squares, drawn through the gl.POINTS drawing method. The size of the nodes\n   * are represented with the \"gl_PointSize\" value in the vertex shader.\n   *\n   * It is the fastest node renderer here since the buffer just takes one line\n   * to draw each node (with attributes \"x\", \"y\", \"size\" and \"color\").\n   *\n   * Nevertheless, this method has some problems, especially due to some issues\n   * with the gl.POINTS:\n   *  - First, if the center of a node is outside the scene, the point will not\n   *    be drawn, even if it should be partly on screen.\n   *  - I tried applying a fragment shader similar to the one in the default\n   *    node renderer to display them as discs, but it did not work fine on\n   *    some computers settings, filling the discs with weird gradients not\n   *    depending on the actual color.\n   */\n  sigma.webgl.nodes.fast = {\n    POINTS: 1,\n    ATTRIBUTES: 4,\n    addNode: function(node, data, i, prefix, settings) {\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = sigma.utils.floatColor(\n        node.color || settings('defaultNodeColor')\n      );\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var positionLocation =\n            gl.getAttribLocation(program, 'a_position'),\n          sizeLocation =\n            gl.getAttribLocation(program, 'a_size'),\n          colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        1 / Math.pow(params.ratio, params.settings('nodesPowRatio'))\n      );\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n\n      gl.enableVertexAttribArray(positionLocation);\n      gl.enableVertexAttribArray(sizeLocation);\n      gl.enableVertexAttribArray(colorLocation);\n\n      gl.vertexAttribPointer(\n        positionLocation,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(\n        sizeLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(\n        colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        12\n      );\n\n      gl.drawArrays(\n        gl.POINTS,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position;',\n          'attribute float a_size;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(a_position, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Multiply the point size twice:\n            //  - x SCALING_RATIO to correct the canvas scaling\n            //  - x 2 to correct the formulae\n            'gl_PointSize = a_size * u_ratio * u_scale * 2.0;',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'float border = 0.01;',\n            'float radius = 0.5;',\n\n            'vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);',\n            'vec2 m = gl_PointCoord - vec2(0.5, 0.5);',\n            'float dist = radius - sqrt(m.x * m.x + m.y * m.y);',\n\n            'float t = 0.0;',\n            'if (dist > border)',\n              't = 1.0;',\n            'else if (dist > 0.0)',\n              't = dist / border;',\n\n            'gl_FragColor = mix(color0, color, t);',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sigma__ = __webpack_require__(2);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"Sigma\", function() { return __WEBPACK_IMPORTED_MODULE_0__Sigma__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EdgeShapes__ = __webpack_require__(6);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"EdgeShapes\", function() { return __WEBPACK_IMPORTED_MODULE_1__EdgeShapes__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__NodeShapes__ = __webpack_require__(13);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"NodeShapes\", function() { return __WEBPACK_IMPORTED_MODULE_2__NodeShapes__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LoadJSON__ = __webpack_require__(10);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"LoadJSON\", function() { return __WEBPACK_IMPORTED_MODULE_3__LoadJSON__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__LoadGEXF__ = __webpack_require__(9);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"LoadGEXF\", function() { return __WEBPACK_IMPORTED_MODULE_4__LoadGEXF__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Filter__ = __webpack_require__(7);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"Filter\", function() { return __WEBPACK_IMPORTED_MODULE_5__Filter__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ForceAtlas2__ = __webpack_require__(8);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"ForceAtlas2\", function() { return __WEBPACK_IMPORTED_MODULE_6__ForceAtlas2__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__RelativeSize__ = __webpack_require__(15);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"RelativeSize\", function() { return __WEBPACK_IMPORTED_MODULE_7__RelativeSize__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__NOverlap__ = __webpack_require__(11);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"NOverlap\", function() { return __WEBPACK_IMPORTED_MODULE_8__NOverlap__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__NeoCypher__ = __webpack_require__(12);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"NeoCypher\", function() { return __WEBPACK_IMPORTED_MODULE_9__NeoCypher__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__NeoGraphItemsProducers__ = __webpack_require__(4);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"NeoGraphItemsProducers\", function() { return __WEBPACK_IMPORTED_MODULE_10__NeoGraphItemsProducers__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__RandomizeNodePositions__ = __webpack_require__(14);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"RandomizeNodePositions\", function() { return __WEBPACK_IMPORTED_MODULE_11__RandomizeNodePositions__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__SigmaEnableWebGL__ = __webpack_require__(16);\n/* harmony reexport (binding) */ __webpack_require__.d(exports, \"SigmaEnableWebGL\", function() { return __WEBPACK_IMPORTED_MODULE_12__SigmaEnableWebGL__[\"a\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ exports[\"default\"] = __WEBPACK_IMPORTED_MODULE_0__Sigma__[\"a\" /* default */];\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// react-sigma.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a696084b9d88c7ee096d","module.exports = undefined;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n// module id = 0\n// module chunks = 0","import React from 'react'\n\nexport function embedProps(elements: mixed, extraProps) {\n        return React.Children.map(elements, \n            (element) => React.cloneElement(element, extraProps))\n    }\n\n\n\n// WEBPACK FOOTER //\n// ./src/tools.js","// @flow\n\nimport React from 'react'\nimport { embedProps } from './tools'\nimport '../sigma/main'\n\ntype Props = {\n  settings: Sigma$Settings,\n  renderer?: \"webgl\" | \"canvas\",\n  style?: CSS,\n  children?: mixed,\n  graph?: Sigma$Graph$Data,\n  onClickNode?: (e: Sigma$Event) => void,\n  onClickEdge?: (e: Sigma$Event) => void,\n  onOverNode?: (e: Sigma$Event) => void,\n  onOutNode?: (e: Sigma$Event) => void,\n  onOverEdge?: (e: Sigma$Event) => void, // TODO: onOverEdge does not work?\n  onOutEdge?: (e: Sigma$Event) => void,\n  onClickStage?: (e: Sigma$Event) => void,\n};\ntype DefaultProps = {\n  settings: Sigma$Settings\n};\ntype State = {\n  renderer: boolean\n};\n\n\n/**\n *\n * Sigma - React.JS flow-typed interface for Sigma js library - fastest opensource rendering engine for network graphs.\n * Sigma makes it easy to publish networks on Web pages, and allows developers to integrate network exploration in\n * rich Web applications.\n *\n * Parameter types\n * ```\n * type Sigma$Graph$Data = {\n *   nodes: [Sigma$Node],\n *   edges: [Sigma$Edge]\n * };\n *\n * type Sigma$Node = {\n *   id: string,\n *   label?: string,\n *   x?: number,\n *   y?: number,\n *   size?: number,\n *   color?: color\n * };\n *\n * type Sigma$Edge = {\n *   id: string,\n *   source: string,\n *   target: string,\n *   label?: string,\n *   color?: color\n * };\n * ```\n *\n *\n * @signature `<Sigma graph={graph} settings={settings} onClickNode={func}.../>`\n *\n * @param {CSS} style   CSS style description for main div holding graph, should be specified in React format\n * @param {Sigma$Settings} settings     js object with sigma initialization options, for full list see [sigma settings page](https://github.com/jacomyal/sigma.js/wiki/Settings)\n * @param {string} renderer     can be \"webgl\" or \"canvas\"\n * @param {Sigma$Graph$Data} graph   js object with array of nodes and edges used to initialize sigma\n * @param {Sigma$EventHandler} onClickNode      set sigma callback for \"clickNode\" event (see below)\n * @param {Sigma$EventHandler} onOverNode      set sigma callback for \"overNode\" event\n * @param {Sigma$EventHandler} onOutNode      set sigma callback for \"outNode\" event\n * @param {Sigma$EventHandler} onClickEdge     set sigma callback for \"clickEdge\" event\n * @param {Sigma$EventHandler} onOverEdge      set sigma callback for \"overEdge\" event\n * @param {Sigma$EventHandler} onOutEdge      set sigma callback for \"outEdge\" event\n *\n * @example\n * Can be composed with sigma sub-components using JSX syntax\n * <Sigma renderer=\"webgl\" style={{maxWidth:\"inherit\", height:\"400px\"}}\n *        settings={{drawEdges:false}}\n *        onOverNode={e => console.log(\"Mouse over node: \" + e.data.node.label)}>\n *        graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n *   <RelativeSize initialSize={8}/>\n * </Sigma>\n *\n */\n\n\nclass Sigma extends React.PureComponent {\n  props: Props;\n  state: State;\n  sigma: sigma;\n  sigmaRenderer: ?string;\n  plugins: mixed;\n  initRenderer: (container: HTMLElement) => void;\n\n  static defaultProps: DefaultProps = {\n    settings: {\n      defaultNodeColor: \"#3388AA\",\n      defaultLabelSize: 8,\n      defaultLabelColor: \"#777\",\n      labelThreshold: 12,\n      hoverFontStyle: \"text-size: 11\",\n      batchEdgesDrawing: true,\n      drawEdges: true,\n      drawEdgeLabels: false\n    },\n    style: {\n      maxWidth: \"inherit\",\n      height: \"400px\"\n    }\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {renderer:false}\n    let settings = this.props.settings ? this.props.settings : {}\n    this.sigma = new sigma({settings})\n    this.initRenderer = this.initRenderer.bind(this)\n    Sigma.bindHandlers(this.props, this.sigma)\n    if(this.props.graph)\n      this.sigma.graph.read(this.props.graph)\n  }\n\n  initRenderer(container: HTMLElement) {\n    if(container) {\n      let options: Object = {container}\n      if(this.props.renderer)\n        options.type = this.props.renderer\n      this.sigmaRenderer = this.sigma.addRenderer(options)\n      this.sigma.refresh()\n      this.setState({renderer:true})\n    } else if(this.sigmaRenderer) {\n      this.sigma.killRenderer(this.sigmaRenderer)\n      this.sigmaRenderer = null\n      this.setState({renderer:false})\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Sigma unmounting\")\n    this.sigma.kill()\n    this.sigmaRenderer = null\n  }\n\n  render() {\n    let children = this.state.renderer ? embedProps(this.props.children, {sigma: this.sigma}) : null\n    return <div ref={this.initRenderer} style={this.props.style}>\n          { children }\n        </div>\n  }\n\n/**\nInitialize event handlers with sigma.\n\nEvent handler function receives [Sigma Event](https://github.com/jacomyal/sigma.js/wiki/Events-API)\nwith the structure of following type:\n```\ntype Sigma$Event = {\n  data: {\n    node?: Neo4j$Node, //for node events is sigma node data\n    edge?: Neo4j$Edge, //for edge events is sigma edge data\n    captor: {   // information about event handler, for instance position on the page {clientX, clientY}\n      clientX: number,\n      clientY: number\n}}}\n\ntype Sigma$EventHandler = (node:Sigma$Event) => void\n\n```\n**/\n\n  static bindHandlers(handlers, sigma) {\n    [\"clickNode\", \"overNode\", \"outNode\", \"clickEdge\", \"overEdge\", \"outEdge\", \"clickStage\"].forEach(\n      event => {\n          let handler = \"on\" + event[0].toUpperCase() + event.substr(1);\n          if (handlers[handler]) {\n            sigma.bind(event, handlers[handler])\n          }\n        } );\n  }\n}\n\nexport default Sigma;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sigma.js","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 115);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 115:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_sigma_core_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_conrad_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_utils_sigma_utils_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_utils_sigma_polyfills_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_sigma_settings_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_classes_sigma_classes_dispatcher_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js__ = __webpack_require__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_sigma_react_src_classes_sigma_classes_configurable_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_sigma_react_src_classes_sigma_classes_graph_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_sigma_react_src_classes_sigma_classes_camera_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_sigma_react_src_classes_sigma_classes_quad_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js__ = __webpack_require__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_sigma_react_src_classes_sigma_classes_edgequad_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_sigma_react_src_captors_sigma_captors_mouse_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_sigma_react_src_captors_sigma_captors_touch_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js__ = __webpack_require__(61);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_sigma_react_src_renderers_sigma_renderers_canvas_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_sigma_react_src_renderers_canvas_sigma_canvas_labels_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_sigma_react_src_renderers_canvas_sigma_canvas_hovers_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_sigma_react_src_renderers_canvas_sigma_canvas_nodes_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_sigma_react_src_renderers_canvas_sigma_canvas_edges_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js__ = __webpack_require__(52);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_sigma_react_src_renderers_canvas_sigma_canvas_extremities_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js__ = __webpack_require__(44);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_sigma_react_src_middlewares_sigma_middlewares_rescale_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js__ = __webpack_require__(43);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_sigma_react_src_middlewares_sigma_middlewares_copy_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_sigma_react_src_misc_sigma_misc_animation_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js__ = __webpack_require__(47);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23_sigma_react_src_misc_sigma_misc_bindEvents_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24_sigma_react_src_misc_sigma_misc_bindDOMEvents_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25_sigma_react_src_misc_sigma_misc_drawHovers_js__);\n// Sigma build is quite big and not friendly for webpack, therefore we use custom import\n\n// Core:\n\n\n// Utils:\n\n\n\n\n// Main classes:\n\n\n\n\n\n\n\n\n// Captors:\n\n\n\n// Renderers:\n\n\n// Sub functions per engine:\n\n\n\n\n\n\n\n// Middlewares:\n\n\n\n// Miscellaneous:\n\n\n\n\n\nvar sigma = window.sigma;\n\n// By default we exclude WbGL renderer from the Sigma component.\n// WebGL has to be imported explicitly via <SigmaEnableWebGL /> in the global context.\nsigma.renderers.def = sigma.renderers.canvas;\n\n// We do not support svg at all to reduce package size\n//    'src/renderers/sigma.renderers.svg.js',\n//    'src/renderers/svg/sigma.svg.utils.js',\n//    'src/renderers/svg/sigma.svg.nodes.def.js',\n//    'src/renderers/svg/sigma.svg.edges.def.js',\n//    'src/renderers/svg/sigma.svg.edges.curve.js',\n//    'src/renderers/svg/sigma.svg.labels.def.js',\n//    'src/renderers/svg/sigma.svg.hovers.def.js',\n\n/* harmony default export */ exports[\"default\"] = sigma;\n\n/***/ },\n\n/***/ 34:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.captors');\n\n  /**\n   * The user inputs default captor. It deals with mouse events, keyboards\n   * events and touch events.\n   *\n   * @param  {DOMElement}   target   The DOM element where the listeners will be\n   *                                 bound.\n   * @param  {camera}       camera   The camera related to the target.\n   * @param  {configurable} settings The settings function.\n   * @return {sigma.captor}          The fresh new captor instance.\n   */\n  sigma.captors.mouse = function(target, camera, settings) {\n    var _self = this,\n        _target = target,\n        _camera = camera,\n        _settings = settings,\n\n        // CAMERA MANAGEMENT:\n        // ******************\n        // The camera position when the user starts dragging:\n        _startCameraX,\n        _startCameraY,\n        _startCameraAngle,\n\n        // The latest stage position:\n        _lastCameraX,\n        _lastCameraY,\n        _lastCameraAngle,\n        _lastCameraRatio,\n\n        // MOUSE MANAGEMENT:\n        // *****************\n        // The mouse position when the user starts dragging:\n        _startMouseX,\n        _startMouseY,\n\n        _isMouseDown,\n        _isMoving,\n        _hasDragged,\n        _downStartTime,\n        _movingTimeoutId;\n\n    sigma.classes.dispatcher.extend(this);\n\n    sigma.utils.doubleClick(_target, 'click', _doubleClickHandler);\n    _target.addEventListener('DOMMouseScroll', _wheelHandler, false);\n    _target.addEventListener('mousewheel', _wheelHandler, false);\n    _target.addEventListener('mousemove', _moveHandler, false);\n    _target.addEventListener('mousedown', _downHandler, false);\n    _target.addEventListener('click', _clickHandler, false);\n    _target.addEventListener('mouseout', _outHandler, false);\n    document.addEventListener('mouseup', _upHandler, false);\n\n\n\n\n    /**\n     * This method unbinds every handlers that makes the captor work.\n     */\n    this.kill = function() {\n      sigma.utils.unbindDoubleClick(_target, 'click');\n      _target.removeEventListener('DOMMouseScroll', _wheelHandler);\n      _target.removeEventListener('mousewheel', _wheelHandler);\n      _target.removeEventListener('mousemove', _moveHandler);\n      _target.removeEventListener('mousedown', _downHandler);\n      _target.removeEventListener('click', _clickHandler);\n      _target.removeEventListener('mouseout', _outHandler);\n      document.removeEventListener('mouseup', _upHandler);\n    };\n\n\n\n\n    // MOUSE EVENTS:\n    // *************\n\n    /**\n     * The handler listening to the 'move' mouse event. It will effectively\n     * drag the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _moveHandler(e) {\n      var x,\n          y,\n          pos;\n\n      // Dispatch event:\n      if (_settings('mouseEnabled')) {\n        _self.dispatchEvent('mousemove',\n          sigma.utils.mouseCoords(e));\n\n        if (_isMouseDown) {\n          _isMoving = true;\n          _hasDragged = true;\n\n          if (_movingTimeoutId)\n            clearTimeout(_movingTimeoutId);\n\n          _movingTimeoutId = setTimeout(function() {\n            _isMoving = false;\n          }, _settings('dragTimeout'));\n\n          sigma.misc.animation.killAll(_camera);\n\n          _camera.isMoving = true;\n          pos = _camera.cameraPosition(\n            sigma.utils.getX(e) - _startMouseX,\n            sigma.utils.getY(e) - _startMouseY,\n            true\n          );\n\n          x = _startCameraX - pos.x;\n          y = _startCameraY - pos.y;\n\n          if (x !== _camera.x || y !== _camera.y) {\n            _lastCameraX = _camera.x;\n            _lastCameraY = _camera.y;\n\n            _camera.goTo({\n              x: x,\n              y: y\n            });\n          }\n\n          if (e.preventDefault)\n            e.preventDefault();\n          else\n            e.returnValue = false;\n\n          e.stopPropagation();\n          return false;\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'up' mouse event. It will stop dragging the\n     * graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _upHandler(e) {\n      if (_settings('mouseEnabled') && _isMouseDown) {\n        _isMouseDown = false;\n        if (_movingTimeoutId)\n          clearTimeout(_movingTimeoutId);\n\n        _camera.isMoving = false;\n\n        var x = sigma.utils.getX(e),\n            y = sigma.utils.getY(e);\n\n        if (_isMoving) {\n          sigma.misc.animation.killAll(_camera);\n          sigma.misc.animation.camera(\n            _camera,\n            {\n              x: _camera.x +\n                _settings('mouseInertiaRatio') * (_camera.x - _lastCameraX),\n              y: _camera.y +\n                _settings('mouseInertiaRatio') * (_camera.y - _lastCameraY)\n            },\n            {\n              easing: 'quadraticOut',\n              duration: _settings('mouseInertiaDuration')\n            }\n          );\n        } else if (\n          _startMouseX !== x ||\n          _startMouseY !== y\n        )\n          _camera.goTo({\n            x: _camera.x,\n            y: _camera.y\n          });\n\n        _self.dispatchEvent('mouseup',\n          sigma.utils.mouseCoords(e));\n\n        // Update _isMoving flag:\n        _isMoving = false;\n      }\n    }\n\n    /**\n     * The handler listening to the 'down' mouse event. It will start observing\n     * the mouse position for dragging the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _downHandler(e) {\n      if (_settings('mouseEnabled')) {\n        _startCameraX = _camera.x;\n        _startCameraY = _camera.y;\n\n        _lastCameraX = _camera.x;\n        _lastCameraY = _camera.y;\n\n        _startMouseX = sigma.utils.getX(e);\n        _startMouseY = sigma.utils.getY(e);\n\n        _hasDragged = false;\n        _downStartTime = (new Date()).getTime();\n\n        switch (e.which) {\n          case 2:\n            // Middle mouse button pressed\n            // Do nothing.\n            break;\n          case 3:\n            // Right mouse button pressed\n            _self.dispatchEvent('rightclick',\n              sigma.utils.mouseCoords(e, _startMouseX, _startMouseY));\n            break;\n          // case 1:\n          default:\n            // Left mouse button pressed\n            _isMouseDown = true;\n\n            _self.dispatchEvent('mousedown',\n              sigma.utils.mouseCoords(e, _startMouseX, _startMouseY));\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'out' mouse event. It will just redispatch\n     * the event.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _outHandler(e) {\n      if (_settings('mouseEnabled'))\n        _self.dispatchEvent('mouseout');\n    }\n\n    /**\n     * The handler listening to the 'click' mouse event. It will redispatch the\n     * click event, but with normalized X and Y coordinates.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _clickHandler(e) {\n      if (_settings('mouseEnabled')) {\n        var event = sigma.utils.mouseCoords(e);\n        event.isDragging =\n          (((new Date()).getTime() - _downStartTime) > 100) && _hasDragged;\n        _self.dispatchEvent('click', event);\n      }\n\n      if (e.preventDefault)\n        e.preventDefault();\n      else\n        e.returnValue = false;\n\n      e.stopPropagation();\n      return false;\n    }\n\n    /**\n     * The handler listening to the double click custom event. It will\n     * basically zoom into the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _doubleClickHandler(e) {\n      var pos,\n          ratio,\n          animation;\n\n      if (_settings('mouseEnabled')) {\n        ratio = 1 / _settings('doubleClickZoomingRatio');\n\n        _self.dispatchEvent('doubleclick',\n            sigma.utils.mouseCoords(e, _startMouseX, _startMouseY));\n\n        if (_settings('doubleClickEnabled')) {\n          pos = _camera.cameraPosition(\n            sigma.utils.getX(e) - sigma.utils.getCenter(e).x,\n            sigma.utils.getY(e) - sigma.utils.getCenter(e).y,\n            true\n          );\n\n          animation = {\n            duration: _settings('doubleClickZoomDuration')\n          };\n\n          sigma.utils.zoomTo(_camera, pos.x, pos.y, ratio, animation);\n        }\n\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n\n        e.stopPropagation();\n        return false;\n      }\n    }\n\n    /**\n     * The handler listening to the 'wheel' mouse event. It will basically zoom\n     * in or not into the graph.\n     *\n     * @param {event} e A mouse event.\n     */\n    function _wheelHandler(e) {\n      var pos,\n          ratio,\n          animation,\n          wheelDelta = sigma.utils.getDelta(e);\n\n      if (_settings('mouseEnabled') && _settings('mouseWheelEnabled') && wheelDelta !== 0) {\n        ratio = wheelDelta > 0 ?\n          1 / _settings('zoomingRatio') :\n          _settings('zoomingRatio');\n\n        pos = _camera.cameraPosition(\n          sigma.utils.getX(e) - sigma.utils.getCenter(e).x,\n          sigma.utils.getY(e) - sigma.utils.getCenter(e).y,\n          true\n        );\n\n        animation = {\n          duration: _settings('mouseZoomDuration')\n        };\n\n        sigma.utils.zoomTo(_camera, pos.x, pos.y, ratio, animation);\n\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n\n        e.stopPropagation();\n        return false;\n      }\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 35:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.captors');\n\n  /**\n   * The user inputs default captor. It deals with mouse events, keyboards\n   * events and touch events.\n   *\n   * @param  {DOMElement}   target   The DOM element where the listeners will be\n   *                                 bound.\n   * @param  {camera}       camera   The camera related to the target.\n   * @param  {configurable} settings The settings function.\n   * @return {sigma.captor}          The fresh new captor instance.\n   */\n  sigma.captors.touch = function(target, camera, settings) {\n    var _self = this,\n        _target = target,\n        _camera = camera,\n        _settings = settings,\n\n        // CAMERA MANAGEMENT:\n        // ******************\n        // The camera position when the user starts dragging:\n        _startCameraX,\n        _startCameraY,\n        _startCameraAngle,\n        _startCameraRatio,\n\n        // The latest stage position:\n        _lastCameraX,\n        _lastCameraY,\n        _lastCameraAngle,\n        _lastCameraRatio,\n\n        // TOUCH MANAGEMENT:\n        // *****************\n        // Touches that are down:\n        _downTouches = [],\n\n        _startTouchX0,\n        _startTouchY0,\n        _startTouchX1,\n        _startTouchY1,\n        _startTouchAngle,\n        _startTouchDistance,\n\n        _touchMode,\n\n        _isMoving,\n        _doubleTap,\n        _movingTimeoutId;\n\n    sigma.classes.dispatcher.extend(this);\n\n    sigma.utils.doubleClick(_target, 'touchstart', _doubleTapHandler);\n    _target.addEventListener('touchstart', _handleStart, false);\n    _target.addEventListener('touchend', _handleLeave, false);\n    _target.addEventListener('touchcancel', _handleLeave, false);\n    _target.addEventListener('touchleave', _handleLeave, false);\n    _target.addEventListener('touchmove', _handleMove, false);\n\n    function position(e) {\n      var offset = sigma.utils.getOffset(_target);\n\n      return {\n        x: e.pageX - offset.left,\n        y: e.pageY - offset.top\n      };\n    }\n\n    /**\n     * This method unbinds every handlers that makes the captor work.\n     */\n    this.kill = function() {\n      sigma.utils.unbindDoubleClick(_target, 'touchstart');\n      _target.addEventListener('touchstart', _handleStart);\n      _target.addEventListener('touchend', _handleLeave);\n      _target.addEventListener('touchcancel', _handleLeave);\n      _target.addEventListener('touchleave', _handleLeave);\n      _target.addEventListener('touchmove', _handleMove);\n    };\n\n    // TOUCH EVENTS:\n    // *************\n    /**\n     * The handler listening to the 'touchstart' event. It will set the touch\n     * mode (\"_touchMode\") and start observing the user touch moves.\n     *\n     * @param {event} e A touch event.\n     */\n    function _handleStart(e) {\n      if (_settings('touchEnabled')) {\n        var x0,\n            x1,\n            y0,\n            y1,\n            pos0,\n            pos1;\n\n        _downTouches = e.touches;\n\n        switch (_downTouches.length) {\n          case 1:\n            _camera.isMoving = true;\n            _touchMode = 1;\n\n            _startCameraX = _camera.x;\n            _startCameraY = _camera.y;\n\n            _lastCameraX = _camera.x;\n            _lastCameraY = _camera.y;\n\n            pos0 = position(_downTouches[0]);\n            _startTouchX0 = pos0.x;\n            _startTouchY0 = pos0.y;\n\n            break;\n          case 2:\n            _camera.isMoving = true;\n            _touchMode = 2;\n\n            pos0 = position(_downTouches[0]);\n            pos1 = position(_downTouches[1]);\n            x0 = pos0.x;\n            y0 = pos0.y;\n            x1 = pos1.x;\n            y1 = pos1.y;\n\n            _lastCameraX = _camera.x;\n            _lastCameraY = _camera.y;\n\n            _startCameraAngle = _camera.angle;\n            _startCameraRatio = _camera.ratio;\n\n            _startCameraX = _camera.x;\n            _startCameraY = _camera.y;\n\n            _startTouchX0 = x0;\n            _startTouchY0 = y0;\n            _startTouchX1 = x1;\n            _startTouchY1 = y1;\n\n            _startTouchAngle = Math.atan2(\n              _startTouchY1 - _startTouchY0,\n              _startTouchX1 - _startTouchX0\n            );\n            _startTouchDistance = Math.sqrt(\n              (_startTouchY1 - _startTouchY0) *\n                (_startTouchY1 - _startTouchY0) +\n              (_startTouchX1 - _startTouchX0) *\n                (_startTouchX1 - _startTouchX0)\n            );\n\n            e.preventDefault();\n            return false;\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'touchend', 'touchcancel' and 'touchleave'\n     * event. It will update the touch mode if there are still at least one\n     * finger, and stop dragging else.\n     *\n     * @param {event} e A touch event.\n     */\n    function _handleLeave(e) {\n      if (_settings('touchEnabled')) {\n        _downTouches = e.touches;\n        var inertiaRatio = _settings('touchInertiaRatio');\n\n        if (_movingTimeoutId) {\n          _isMoving = false;\n          clearTimeout(_movingTimeoutId);\n        }\n\n        switch (_touchMode) {\n          case 2:\n            if (e.touches.length === 1) {\n              _handleStart(e);\n\n              e.preventDefault();\n              break;\n            }\n            /* falls through */\n          case 1:\n            _camera.isMoving = false;\n            _self.dispatchEvent('stopDrag');\n\n            if (_isMoving) {\n              _doubleTap = false;\n              sigma.misc.animation.camera(\n                _camera,\n                {\n                  x: _camera.x +\n                    inertiaRatio * (_camera.x - _lastCameraX),\n                  y: _camera.y +\n                    inertiaRatio * (_camera.y - _lastCameraY)\n                },\n                {\n                  easing: 'quadraticOut',\n                  duration: _settings('touchInertiaDuration')\n                }\n              );\n            }\n\n            _isMoving = false;\n            _touchMode = 0;\n            break;\n        }\n      }\n    }\n\n    /**\n     * The handler listening to the 'touchmove' event. It will effectively drag\n     * the graph, and eventually zooms and turn it if the user is using two\n     * fingers.\n     *\n     * @param {event} e A touch event.\n     */\n    function _handleMove(e) {\n      if (!_doubleTap && _settings('touchEnabled')) {\n        var x0,\n            x1,\n            y0,\n            y1,\n            cos,\n            sin,\n            end,\n            pos0,\n            pos1,\n            diff,\n            start,\n            dAngle,\n            dRatio,\n            newStageX,\n            newStageY,\n            newStageRatio,\n            newStageAngle;\n\n        _downTouches = e.touches;\n        _isMoving = true;\n\n        if (_movingTimeoutId)\n          clearTimeout(_movingTimeoutId);\n\n        _movingTimeoutId = setTimeout(function() {\n          _isMoving = false;\n        }, _settings('dragTimeout'));\n\n        switch (_touchMode) {\n          case 1:\n            pos0 = position(_downTouches[0]);\n            x0 = pos0.x;\n            y0 = pos0.y;\n\n            diff = _camera.cameraPosition(\n              x0 - _startTouchX0,\n              y0 - _startTouchY0,\n              true\n            );\n\n            newStageX = _startCameraX - diff.x;\n            newStageY = _startCameraY - diff.y;\n\n            if (newStageX !== _camera.x || newStageY !== _camera.y) {\n              _lastCameraX = _camera.x;\n              _lastCameraY = _camera.y;\n\n              _camera.goTo({\n                x: newStageX,\n                y: newStageY\n              });\n\n              _self.dispatchEvent('mousemove',\n                sigma.utils.mouseCoords(e, pos0.x, pos0.y));\n\n              _self.dispatchEvent('drag');\n            }\n            break;\n          case 2:\n            pos0 = position(_downTouches[0]);\n            pos1 = position(_downTouches[1]);\n            x0 = pos0.x;\n            y0 = pos0.y;\n            x1 = pos1.x;\n            y1 = pos1.y;\n\n            start = _camera.cameraPosition(\n              (_startTouchX0 + _startTouchX1) / 2 -\n                sigma.utils.getCenter(e).x,\n              (_startTouchY0 + _startTouchY1) / 2 -\n                sigma.utils.getCenter(e).y,\n              true\n            );\n            end = _camera.cameraPosition(\n              (x0 + x1) / 2 - sigma.utils.getCenter(e).x,\n              (y0 + y1) / 2 - sigma.utils.getCenter(e).y,\n              true\n            );\n\n            dAngle = Math.atan2(y1 - y0, x1 - x0) - _startTouchAngle;\n            dRatio = Math.sqrt(\n              (y1 - y0) * (y1 - y0) + (x1 - x0) * (x1 - x0)\n            ) / _startTouchDistance;\n\n            // Translation:\n            x0 = start.x;\n            y0 = start.y;\n\n            // Homothetic transformation:\n            newStageRatio = _startCameraRatio / dRatio;\n            x0 = x0 * dRatio;\n            y0 = y0 * dRatio;\n\n            // Rotation:\n            newStageAngle = _startCameraAngle - dAngle;\n            cos = Math.cos(-dAngle);\n            sin = Math.sin(-dAngle);\n            x1 = x0 * cos + y0 * sin;\n            y1 = y0 * cos - x0 * sin;\n            x0 = x1;\n            y0 = y1;\n\n            // Finalize:\n            newStageX = x0 - end.x + _startCameraX;\n            newStageY = y0 - end.y + _startCameraY;\n\n            if (\n              newStageRatio !== _camera.ratio ||\n              newStageAngle !== _camera.angle ||\n              newStageX !== _camera.x ||\n              newStageY !== _camera.y\n            ) {\n              _lastCameraX = _camera.x;\n              _lastCameraY = _camera.y;\n              _lastCameraAngle = _camera.angle;\n              _lastCameraRatio = _camera.ratio;\n\n              _camera.goTo({\n                x: newStageX,\n                y: newStageY,\n                angle: newStageAngle,\n                ratio: newStageRatio\n              });\n\n              _self.dispatchEvent('drag');\n            }\n\n            break;\n        }\n\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    /**\n     * The handler listening to the double tap custom event. It will\n     * basically zoom into the graph.\n     *\n     * @param {event} e A touch event.\n     */\n    function _doubleTapHandler(e) {\n      var pos,\n          ratio,\n          animation;\n\n      if (e.touches && e.touches.length === 1 && _settings('touchEnabled')) {\n        _doubleTap = true;\n\n        ratio = 1 / _settings('doubleClickZoomingRatio');\n\n        pos = position(e.touches[0]);\n        _self.dispatchEvent('doubleclick',\n          sigma.utils.mouseCoords(e, pos.x, pos.y));\n\n        if (_settings('doubleClickEnabled')) {\n          pos = _camera.cameraPosition(\n            pos.x - sigma.utils.getCenter(e).x,\n            pos.y - sigma.utils.getCenter(e).y,\n            true\n          );\n\n          animation = {\n            duration: _settings('doubleClickZoomDuration'),\n            onComplete: function() {\n              _doubleTap = false;\n            }\n          };\n\n          sigma.utils.zoomTo(_camera, pos.x, pos.y, ratio, animation);\n        }\n\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n\n        e.stopPropagation();\n        return false;\n      }\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 36:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  sigma.utils.pkg('sigma.classes');\n\n  /**\n   * The camera constructor. It just initializes its attributes and methods.\n   *\n   * @param  {string}       id       The id.\n   * @param  {sigma.classes.graph}  graph    The graph.\n   * @param  {configurable} settings The settings function.\n   * @param  {?object}      options  Eventually some overriding options.\n   * @return {camera}                Returns the fresh new camera instance.\n   */\n  sigma.classes.camera = function(id, graph, settings, options) {\n    sigma.classes.dispatcher.extend(this);\n\n    Object.defineProperty(this, 'graph', {\n      value: graph\n    });\n    Object.defineProperty(this, 'id', {\n      value: id\n    });\n    Object.defineProperty(this, 'readPrefix', {\n      value: 'read_cam' + id + ':'\n    });\n    Object.defineProperty(this, 'prefix', {\n      value: 'cam' + id + ':'\n    });\n\n    this.x = 0;\n    this.y = 0;\n    this.ratio = 1;\n    this.angle = 0;\n    this.isAnimated = false;\n    this.settings = (typeof options === 'object' && options) ?\n      settings.embedObject(options) :\n      settings;\n  };\n\n  /**\n   * Updates the camera position.\n   *\n   * @param  {object} coordinates The new coordinates object.\n   * @return {camera}             Returns the camera.\n   */\n  sigma.classes.camera.prototype.goTo = function(coordinates) {\n    if (!this.settings('enableCamera'))\n      return this;\n\n    var i,\n        l,\n        c = coordinates || {},\n        keys = ['x', 'y', 'ratio', 'angle'];\n\n    for (i = 0, l = keys.length; i < l; i++)\n      if (c[keys[i]] !== undefined) {\n        if (typeof c[keys[i]] === 'number' && !isNaN(c[keys[i]]))\n          this[keys[i]] = c[keys[i]];\n        else\n          throw 'Value for \"' + keys[i] + '\" is not a number.';\n      }\n\n    this.dispatchEvent('coordinatesUpdated');\n    return this;\n  };\n\n  /**\n   * This method takes a graph and computes for each node and edges its\n   * coordinates relatively to the center of the camera. Basically, it will\n   * compute the coordinates that will be used by the graphic renderers.\n   *\n   * Since it should be possible to use different cameras and different\n   * renderers, it is possible to specify a prefix to put before the new\n   * coordinates (to get something like \"node.camera1_x\")\n   *\n   * @param  {?string} read    The prefix of the coordinates to read.\n   * @param  {?string} write   The prefix of the coordinates to write.\n   * @param  {?object} options Eventually an object of options. Those can be:\n   *                           - A restricted nodes array.\n   *                           - A restricted edges array.\n   *                           - A width.\n   *                           - A height.\n   * @return {camera}        Returns the camera.\n   */\n  sigma.classes.camera.prototype.applyView = function(read, write, options) {\n    options = options || {};\n    write = write !== undefined ? write : this.prefix;\n    read = read !== undefined ? read : this.readPrefix;\n\n    var nodes = options.nodes || this.graph.nodes(),\n        edges = options.edges || this.graph.edges();\n\n    var i,\n        l,\n        node,\n        relCos = Math.cos(this.angle) / this.ratio,\n        relSin = Math.sin(this.angle) / this.ratio,\n        nodeRatio = Math.pow(this.ratio, this.settings('nodesPowRatio')),\n        edgeRatio = Math.pow(this.ratio, this.settings('edgesPowRatio')),\n        xOffset = (options.width || 0) / 2 - this.x * relCos - this.y * relSin,\n        yOffset = (options.height || 0) / 2 - this.y * relCos + this.x * relSin;\n\n    for (i = 0, l = nodes.length; i < l; i++) {\n      node = nodes[i];\n      node[write + 'x'] =\n        (node[read + 'x'] || 0) * relCos +\n        (node[read + 'y'] || 0) * relSin +\n        xOffset;\n      node[write + 'y'] =\n        (node[read + 'y'] || 0) * relCos -\n        (node[read + 'x'] || 0) * relSin +\n        yOffset;\n      node[write + 'size'] =\n        (node[read + 'size'] || 0) /\n        nodeRatio;\n    }\n\n    for (i = 0, l = edges.length; i < l; i++) {\n      edges[i][write + 'size'] =\n        (edges[i][read + 'size'] || 0) /\n        edgeRatio;\n    }\n\n    return this;\n  };\n\n  /**\n   * This function converts the coordinates of a point from the frame of the\n   * camera to the frame of the graph.\n   *\n   * @param  {number} x The X coordinate of the point in the frame of the\n   *                    camera.\n   * @param  {number} y The Y coordinate of the point in the frame of the\n   *                    camera.\n   * @return {object}   The point coordinates in the frame of the graph.\n   */\n  sigma.classes.camera.prototype.graphPosition = function(x, y, vector) {\n    var X = 0,\n        Y = 0,\n        cos = Math.cos(this.angle),\n        sin = Math.sin(this.angle);\n\n    // Revert the origin differential vector:\n    if (!vector) {\n      X = - (this.x * cos + this.y * sin) / this.ratio;\n      Y = - (this.y * cos - this.x * sin) / this.ratio;\n    }\n\n    return {\n      x: (x * cos + y * sin) / this.ratio + X,\n      y: (y * cos - x * sin) / this.ratio + Y\n    };\n  };\n\n  /**\n   * This function converts the coordinates of a point from the frame of the\n   * graph to the frame of the camera.\n   *\n   * @param  {number} x The X coordinate of the point in the frame of the\n   *                    graph.\n   * @param  {number} y The Y coordinate of the point in the frame of the\n   *                    graph.\n   * @return {object}   The point coordinates in the frame of the camera.\n   */\n  sigma.classes.camera.prototype.cameraPosition = function(x, y, vector) {\n    var X = 0,\n        Y = 0,\n        cos = Math.cos(this.angle),\n        sin = Math.sin(this.angle);\n\n    // Revert the origin differential vector:\n    if (!vector) {\n      X = - (this.x * cos + this.y * sin) / this.ratio;\n      Y = - (this.y * cos - this.x * sin) / this.ratio;\n    }\n\n    return {\n      x: ((x - X) * cos - (y - Y) * sin) * this.ratio,\n      y: ((y - Y) * cos + (x - X) * sin) * this.ratio\n    };\n  };\n\n  /**\n   * This method returns the transformation matrix of the camera. This is\n   * especially useful to apply the camera view directly in shaders, in case of\n   * WebGL rendering.\n   *\n   * @return {array} The transformation matrix.\n   */\n  sigma.classes.camera.prototype.getMatrix = function() {\n    var scale = sigma.utils.matrices.scale(1 / this.ratio),\n        rotation = sigma.utils.matrices.rotation(this.angle),\n        translation = sigma.utils.matrices.translation(-this.x, -this.y),\n        matrix = sigma.utils.matrices.multiply(\n          translation,\n          sigma.utils.matrices.multiply(\n            rotation,\n            scale\n          )\n        );\n\n    return matrix;\n  };\n\n  /**\n   * Taking a width and a height as parameters, this method returns the\n   * coordinates of the rectangle representing the camera on screen, in the\n   * graph's referentiel.\n   *\n   * To keep displaying labels of nodes going out of the screen, the method\n   * keeps a margin around the screen in the returned rectangle.\n   *\n   * @param  {number} width  The width of the screen.\n   * @param  {number} height The height of the screen.\n   * @return {object}        The rectangle as x1, y1, x2 and y2, representing\n   *                         two opposite points.\n   */\n  sigma.classes.camera.prototype.getRectangle = function(width, height) {\n    var widthVect = this.cameraPosition(width, 0, true),\n        heightVect = this.cameraPosition(0, height, true),\n        centerVect = this.cameraPosition(width / 2, height / 2, true),\n        marginX = this.cameraPosition(width / 4, 0, true).x,\n        marginY = this.cameraPosition(0, height / 4, true).y;\n\n    return {\n      x1: this.x - centerVect.x - marginX,\n      y1: this.y - centerVect.y - marginY,\n      x2: this.x - centerVect.x + marginX + widthVect.x,\n      y2: this.y - centerVect.y - marginY + widthVect.y,\n      height: Math.sqrt(\n        Math.pow(heightVect.x, 2) +\n        Math.pow(heightVect.y + 2 * marginY, 2)\n      )\n    };\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  /**\n   * This utils aims to facilitate the manipulation of each instance setting.\n   * Using a function instead of an object brings two main advantages: First,\n   * it will be easier in the future to catch settings updates through a\n   * function than an object. Second, giving it a full object will \"merge\" it\n   * to the settings object properly, keeping us to have to always add a loop.\n   *\n   * @return {configurable} The \"settings\" function.\n   */\n  var configurable = function() {\n    var i,\n        l,\n        data = {},\n        datas = Array.prototype.slice.call(arguments, 0);\n\n    /**\n     * The method to use to set or get any property of this instance.\n     *\n     * @param  {string|object}    a1 If it is a string and if a2 is undefined,\n     *                               then it will return the corresponding\n     *                               property. If it is a string and if a2 is\n     *                               set, then it will set a2 as the property\n     *                               corresponding to a1, and return this. If\n     *                               it is an object, then each pair string +\n     *                               object(or any other type) will be set as a\n     *                               property.\n     * @param  {*?}               a2 The new property corresponding to a1 if a1\n     *                               is a string.\n     * @return {*|configurable}      Returns itself or the corresponding\n     *                               property.\n     *\n     * Polymorphism:\n     * *************\n     * Here are some basic use examples:\n     *\n     *  > settings = new configurable();\n     *  > settings('mySetting', 42);\n     *  > settings('mySetting'); // Logs: 42\n     *  > settings('mySetting', 123);\n     *  > settings('mySetting'); // Logs: 123\n     *  > settings({mySetting: 456});\n     *  > settings('mySetting'); // Logs: 456\n     *\n     * Also, it is possible to use the function as a fallback:\n     *  > settings({mySetting: 'abc'}, 'mySetting');  // Logs: 'abc'\n     *  > settings({hisSetting: 'abc'}, 'mySetting'); // Logs: 456\n     */\n    var settings = function(a1, a2) {\n      var o,\n          i,\n          l,\n          k;\n\n      if (arguments.length === 1 && typeof a1 === 'string') {\n        if (data[a1] !== undefined)\n          return data[a1];\n        for (i = 0, l = datas.length; i < l; i++)\n          if (datas[i][a1] !== undefined)\n            return datas[i][a1];\n        return undefined;\n      } else if (typeof a1 === 'object' && typeof a2 === 'string') {\n        return (a1 || {})[a2] !== undefined ? a1[a2] : settings(a2);\n      } else {\n        o = (typeof a1 === 'object' && a2 === undefined) ? a1 : {};\n\n        if (typeof a1 === 'string')\n          o[a1] = a2;\n\n        for (i = 0, k = Object.keys(o), l = k.length; i < l; i++)\n          data[k[i]] = o[k[i]];\n\n        return this;\n      }\n    };\n\n    /**\n     * This method returns a new configurable function, with new objects\n     *\n     * @param  {object*}  Any number of objects to search in.\n     * @return {function} Returns the function. Check its documentation to know\n     *                    more about how it works.\n     */\n    settings.embedObjects = function() {\n      var args = datas.concat(\n        data\n      ).concat(\n        Array.prototype.splice.call(arguments, 0)\n      );\n\n      return configurable.apply({}, args);\n    };\n\n    // Initialize\n    for (i = 0, l = arguments.length; i < l; i++)\n      settings(arguments[i]);\n\n    return settings;\n  };\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.configurable = configurable;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = configurable;\n    exports.configurable = configurable;\n  } else\n    this.configurable = configurable;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  /**\n   * Dispatcher constructor.\n   *\n   * @return {dispatcher} The new dispatcher instance.\n   */\n  var dispatcher = function() {\n    Object.defineProperty(this, '_handlers', {\n      value: {}\n    });\n  };\n\n\n\n\n  /**\n   * Will execute the handler everytime that the indicated event (or the\n   * indicated events) will be triggered.\n   *\n   * @param  {string}           events  The name of the event (or the events\n   *                                    separated by spaces).\n   * @param  {function(Object)} handler The handler to bind.\n   * @return {dispatcher}               Returns the instance itself.\n   */\n  dispatcher.prototype.bind = function(events, handler) {\n    var i,\n        l,\n        event,\n        eArray;\n\n    if (\n      arguments.length === 1 &&\n      typeof arguments[0] === 'object'\n    )\n      for (events in arguments[0])\n        this.bind(events, arguments[0][events]);\n    else if (\n      arguments.length === 2 &&\n      typeof arguments[1] === 'function'\n    ) {\n      eArray = typeof events === 'string' ? events.split(' ') : events;\n\n      for (i = 0, l = eArray.length; i !== l; i += 1) {\n        event = eArray[i];\n\n        // Check that event is not '':\n        if (!event)\n          continue;\n\n        if (!this._handlers[event])\n          this._handlers[event] = [];\n\n        // Using an object instead of directly the handler will make possible\n        // later to add flags\n        this._handlers[event].push({\n          handler: handler\n        });\n      }\n    } else\n      throw 'bind: Wrong arguments.';\n\n    return this;\n  };\n\n  /**\n   * Removes the handler from a specified event (or specified events).\n   *\n   * @param  {?string}           events  The name of the event (or the events\n   *                                     separated by spaces). If undefined,\n   *                                     then all handlers are removed.\n   * @param  {?function(object)} handler The handler to unbind. If undefined,\n   *                                     each handler bound to the event or the\n   *                                     events will be removed.\n   * @return {dispatcher}                Returns the instance itself.\n   */\n  dispatcher.prototype.unbind = function(events, handler) {\n    var i,\n        n,\n        j,\n        m,\n        k,\n        a,\n        event,\n        eArray = typeof events === 'string' ? events.split(' ') : events;\n\n    if (!arguments.length) {\n      for (k in this._handlers)\n        delete this._handlers[k];\n      return this;\n    }\n\n    if (handler) {\n      for (i = 0, n = eArray.length; i !== n; i += 1) {\n        event = eArray[i];\n        if (this._handlers[event]) {\n          a = [];\n          for (j = 0, m = this._handlers[event].length; j !== m; j += 1)\n            if (this._handlers[event][j].handler !== handler)\n              a.push(this._handlers[event][j]);\n\n          this._handlers[event] = a;\n        }\n\n        if (this._handlers[event] && this._handlers[event].length === 0)\n          delete this._handlers[event];\n      }\n    } else\n      for (i = 0, n = eArray.length; i !== n; i += 1)\n        delete this._handlers[eArray[i]];\n\n    return this;\n  };\n\n  /**\n   * Executes each handler bound to the event\n   *\n   * @param  {string}     events The name of the event (or the events separated\n   *                             by spaces).\n   * @param  {?object}    data   The content of the event (optional).\n   * @return {dispatcher}        Returns the instance itself.\n   */\n  dispatcher.prototype.dispatchEvent = function(events, data) {\n    var i,\n        n,\n        j,\n        m,\n        a,\n        event,\n        eventName,\n        self = this,\n        eArray = typeof events === 'string' ? events.split(' ') : events;\n\n    data = data === undefined ? {} : data;\n\n    for (i = 0, n = eArray.length; i !== n; i += 1) {\n      eventName = eArray[i];\n\n      if (this._handlers[eventName]) {\n        event = self.getEvent(eventName, data);\n        a = [];\n\n        for (j = 0, m = this._handlers[eventName].length; j !== m; j += 1) {\n          this._handlers[eventName][j].handler(event);\n          if (!this._handlers[eventName][j].one)\n            a.push(this._handlers[eventName][j]);\n        }\n\n        this._handlers[eventName] = a;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Return an event object.\n   *\n   * @param  {string}  events The name of the event.\n   * @param  {?object} data   The content of the event (optional).\n   * @return {object}         Returns the instance itself.\n   */\n  dispatcher.prototype.getEvent = function(event, data) {\n    return {\n      type: event,\n      data: data || {},\n      target: this\n    };\n  };\n\n  /**\n   * A useful function to deal with inheritance. It will make the target\n   * inherit the prototype of the class dispatcher as well as its constructor.\n   *\n   * @param {object} target The target.\n   */\n  dispatcher.extend = function(target, args) {\n    var k;\n\n    for (k in dispatcher.prototype)\n      if (dispatcher.prototype.hasOwnProperty(k))\n        target[k] = dispatcher.prototype[k];\n\n    dispatcher.apply(target, args);\n  };\n\n\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.dispatcher = dispatcher;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = dispatcher;\n    exports.dispatcher = dispatcher;\n  } else\n    this.dispatcher = dispatcher;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * Sigma Quadtree Module for edges\n   * ===============================\n   *\n   * Author: Sébastien Heymann,\n   *   from the quad of Guillaume Plique (Yomguithereal)\n   * Version: 0.2\n   */\n\n\n\n  /**\n   * Quad Geometric Operations\n   * -------------------------\n   *\n   * A useful batch of geometric operations used by the quadtree.\n   */\n\n  var _geom = {\n\n    /**\n     * Transforms a graph node with x, y and size into an\n     * axis-aligned square.\n     *\n     * @param  {object} A graph node with at least a point (x, y) and a size.\n     * @return {object} A square: two points (x1, y1), (x2, y2) and height.\n     */\n    pointToSquare: function(n) {\n      return {\n        x1: n.x - n.size,\n        y1: n.y - n.size,\n        x2: n.x + n.size,\n        y2: n.y - n.size,\n        height: n.size * 2\n      };\n    },\n\n    /**\n     * Transforms a graph edge with x1, y1, x2, y2 and size into an\n     * axis-aligned square.\n     *\n     * @param  {object} A graph edge with at least two points\n     *                  (x1, y1), (x2, y2) and a size.\n     * @return {object} A square: two points (x1, y1), (x2, y2) and height.\n     */\n    lineToSquare: function(e) {\n      if (e.y1 < e.y2) {\n        // (e.x1, e.y1) on top\n        if (e.x1 < e.x2) {\n          // (e.x1, e.y1) on left\n          return {\n            x1: e.x1 - e.size,\n            y1: e.y1 - e.size,\n            x2: e.x2 + e.size,\n            y2: e.y1 - e.size,\n            height: e.y2 - e.y1 + e.size * 2\n          };\n        }\n        // (e.x1, e.y1) on right\n        return {\n          x1: e.x2 - e.size,\n          y1: e.y1 - e.size,\n          x2: e.x1 + e.size,\n          y2: e.y1 - e.size,\n          height: e.y2 - e.y1 + e.size * 2\n        };\n      }\n\n      // (e.x2, e.y2) on top\n      if (e.x1 < e.x2) {\n        // (e.x1, e.y1) on left\n        return {\n          x1: e.x1 - e.size,\n          y1: e.y2 - e.size,\n          x2: e.x2 + e.size,\n          y2: e.y2 - e.size,\n          height: e.y1 - e.y2 + e.size * 2\n        };\n      }\n      // (e.x2, e.y2) on right\n      return {\n        x1: e.x2 - e.size,\n        y1: e.y2 - e.size,\n        x2: e.x1 + e.size,\n        y2: e.y2 - e.size,\n        height: e.y1 - e.y2 + e.size * 2\n      };\n    },\n\n    /**\n     * Transforms a graph edge of type 'curve' with x1, y1, x2, y2,\n     * control point and size into an axis-aligned square.\n     *\n     * @param  {object} e  A graph edge with at least two points\n     *                     (x1, y1), (x2, y2) and a size.\n     * @param  {object} cp A control point (x,y).\n     * @return {object}    A square: two points (x1, y1), (x2, y2) and height.\n     */\n    quadraticCurveToSquare: function(e, cp) {\n      var pt = sigma.utils.getPointOnQuadraticCurve(\n        0.5,\n        e.x1,\n        e.y1,\n        e.x2,\n        e.y2,\n        cp.x,\n        cp.y\n      );\n\n      // Bounding box of the two points and the point at the middle of the\n      // curve:\n      var minX = Math.min(e.x1, e.x2, pt.x),\n          maxX = Math.max(e.x1, e.x2, pt.x),\n          minY = Math.min(e.y1, e.y2, pt.y),\n          maxY = Math.max(e.y1, e.y2, pt.y);\n\n      return {\n        x1: minX - e.size,\n        y1: minY - e.size,\n        x2: maxX + e.size,\n        y2: minY - e.size,\n        height: maxY - minY + e.size * 2\n      };\n    },\n\n    /**\n     * Transforms a graph self loop into an axis-aligned square.\n     *\n     * @param  {object} n A graph node with a point (x, y) and a size.\n     * @return {object}   A square: two points (x1, y1), (x2, y2) and height.\n     */\n    selfLoopToSquare: function(n) {\n      // Fitting to the curve is too costly, we compute a larger bounding box\n      // using the control points:\n      var cp = sigma.utils.getSelfLoopControlPoints(n.x, n.y, n.size);\n\n      // Bounding box of the point and the two control points:\n      var minX = Math.min(n.x, cp.x1, cp.x2),\n          maxX = Math.max(n.x, cp.x1, cp.x2),\n          minY = Math.min(n.y, cp.y1, cp.y2),\n          maxY = Math.max(n.y, cp.y1, cp.y2);\n\n      return {\n        x1: minX - n.size,\n        y1: minY - n.size,\n        x2: maxX + n.size,\n        y2: minY - n.size,\n        height: maxY - minY + n.size * 2\n      };\n    },\n\n    /**\n     * Checks whether a rectangle is axis-aligned.\n     *\n     * @param  {object}  A rectangle defined by two points\n     *                   (x1, y1) and (x2, y2).\n     * @return {boolean} True if the rectangle is axis-aligned.\n     */\n    isAxisAligned: function(r) {\n      return r.x1 === r.x2 || r.y1 === r.y2;\n    },\n\n    /**\n     * Compute top points of an axis-aligned rectangle. This is useful in\n     * cases when the rectangle has been rotated (left, right or bottom up) and\n     * later operations need to know the top points.\n     *\n     * @param  {object} An axis-aligned rectangle defined by two points\n     *                  (x1, y1), (x2, y2) and height.\n     * @return {object} A rectangle: two points (x1, y1), (x2, y2) and height.\n     */\n    axisAlignedTopPoints: function(r) {\n\n      // Basic\n      if (r.y1 === r.y2 && r.x1 < r.x2)\n        return r;\n\n      // Rotated to right\n      if (r.x1 === r.x2 && r.y2 > r.y1)\n        return {\n          x1: r.x1 - r.height, y1: r.y1,\n          x2: r.x1, y2: r.y1,\n          height: r.height\n        };\n\n      // Rotated to left\n      if (r.x1 === r.x2 && r.y2 < r.y1)\n        return {\n          x1: r.x1, y1: r.y2,\n          x2: r.x2 + r.height, y2: r.y2,\n          height: r.height\n        };\n\n      // Bottom's up\n      return {\n        x1: r.x2, y1: r.y1 - r.height,\n        x2: r.x1, y2: r.y1 - r.height,\n        height: r.height\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower left corner from its top points.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerLeftCoor: function(r) {\n      var width = (\n        Math.sqrt(\n          Math.pow(r.x2 - r.x1, 2) +\n          Math.pow(r.y2 - r.y1, 2)\n        )\n      );\n\n      return {\n        x: r.x1 - (r.y2 - r.y1) * r.height / width,\n        y: r.y1 + (r.x2 - r.x1) * r.height / width\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower right corner from its top points\n     * and its lower left corner.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @param  {object} A corner's coordinates (x, y).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerRightCoor: function(r, llc) {\n      return {\n        x: llc.x - r.x1 + r.x2,\n        y: llc.y - r.y1 + r.y2\n      };\n    },\n\n    /**\n     * Get the coordinates of all the corners of a rectangle from its top point.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {array}  An array of the four corners' coordinates (x, y).\n     */\n    rectangleCorners: function(r) {\n      var llc = this.lowerLeftCoor(r),\n          lrc = this.lowerRightCoor(r, llc);\n\n      return [\n        {x: r.x1, y: r.y1},\n        {x: r.x2, y: r.y2},\n        {x: llc.x, y: llc.y},\n        {x: lrc.x, y: lrc.y}\n      ];\n    },\n\n    /**\n     * Split a square defined by its boundaries into four.\n     *\n     * @param  {object} Boundaries of the square (x, y, width, height).\n     * @return {array}  An array containing the four new squares, themselves\n     *                  defined by an array of their four corners (x, y).\n     */\n    splitSquare: function(b) {\n      return [\n        [\n          {x: b.x, y: b.y},\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x + b.width, y: b.y},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x, y: b.y + b.height},\n          {x: b.x + b.width / 2, y: b.y + b.height}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height},\n          {x: b.x + b.width, y: b.y + b.height}\n        ]\n      ];\n    },\n\n    /**\n     * Compute the four axis between corners of rectangle A and corners of\n     * rectangle B. This is needed later to check an eventual collision.\n     *\n     * @param  {array} An array of rectangle A's four corners (x, y).\n     * @param  {array} An array of rectangle B's four corners (x, y).\n     * @return {array} An array of four axis defined by their coordinates (x,y).\n     */\n    axis: function(c1, c2) {\n      return [\n        {x: c1[1].x - c1[0].x, y: c1[1].y - c1[0].y},\n        {x: c1[1].x - c1[3].x, y: c1[1].y - c1[3].y},\n        {x: c2[0].x - c2[2].x, y: c2[0].y - c2[2].y},\n        {x: c2[0].x - c2[1].x, y: c2[0].y - c2[1].y}\n      ];\n    },\n\n    /**\n     * Project a rectangle's corner on an axis.\n     *\n     * @param  {object} Coordinates of a corner (x, y).\n     * @param  {object} Coordinates of an axis (x, y).\n     * @return {object} The projection defined by coordinates (x, y).\n     */\n    projection: function(c, a) {\n      var l = (\n        (c.x * a.x + c.y * a.y) /\n        (Math.pow(a.x, 2) + Math.pow(a.y, 2))\n      );\n\n      return {\n        x: l * a.x,\n        y: l * a.y\n      };\n    },\n\n    /**\n     * Check whether two rectangles collide on one particular axis.\n     *\n     * @param  {object}   An axis' coordinates (x, y).\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide on the axis.\n     */\n    axisCollision: function(a, c1, c2) {\n      var sc1 = [],\n          sc2 = [];\n\n      for (var ci = 0; ci < 4; ci++) {\n        var p1 = this.projection(c1[ci], a),\n            p2 = this.projection(c2[ci], a);\n\n        sc1.push(p1.x * a.x + p1.y * a.y);\n        sc2.push(p2.x * a.x + p2.y * a.y);\n      }\n\n      var maxc1 = Math.max.apply(Math, sc1),\n          maxc2 = Math.max.apply(Math, sc2),\n          minc1 = Math.min.apply(Math, sc1),\n          minc2 = Math.min.apply(Math, sc2);\n\n      return (minc2 <= maxc1 && maxc2 >= minc1);\n    },\n\n    /**\n     * Check whether two rectangles collide on each one of their four axis. If\n     * all axis collide, then the two rectangles do collide on the plane.\n     *\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide.\n     */\n    collision: function(c1, c2) {\n      var axis = this.axis(c1, c2),\n          col = true;\n\n      for (var i = 0; i < 4; i++)\n        col = col && this.axisCollision(axis[i], c1, c2);\n\n      return col;\n    }\n  };\n\n\n  /**\n   * Quad Functions\n   * ------------\n   *\n   * The Quadtree functions themselves.\n   * For each of those functions, we consider that in a splitted quad, the\n   * index of each node is the following:\n   * 0: top left\n   * 1: top right\n   * 2: bottom left\n   * 3: bottom right\n   *\n   * Moreover, the hereafter quad's philosophy is to consider that if an element\n   * collides with more than one nodes, this element belongs to each of the\n   * nodes it collides with where other would let it lie on a higher node.\n   */\n\n  /**\n   * Get the index of the node containing the point in the quad\n   *\n   * @param  {object}  point      A point defined by coordinates (x, y).\n   * @param  {object}  quadBounds Boundaries of the quad (x, y, width, heigth).\n   * @return {integer}            The index of the node containing the point.\n   */\n  function _quadIndex(point, quadBounds) {\n    var xmp = quadBounds.x + quadBounds.width / 2,\n        ymp = quadBounds.y + quadBounds.height / 2,\n        top = (point.y < ymp),\n        left = (point.x < xmp);\n\n    if (top) {\n      if (left)\n        return 0;\n      else\n        return 1;\n    }\n    else {\n      if (left)\n        return 2;\n      else\n        return 3;\n    }\n  }\n\n  /**\n   * Get a list of indexes of nodes containing an axis-aligned rectangle\n   *\n   * @param  {object}  rectangle   A rectangle defined by two points (x1, y1),\n   *                               (x2, y2) and height.\n   * @param  {array}   quadCorners An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadIndexes(rectangle, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if ((rectangle.x2 >= quadCorners[i][0].x) &&\n          (rectangle.x1 <= quadCorners[i][1].x) &&\n          (rectangle.y1 + rectangle.height >= quadCorners[i][0].y) &&\n          (rectangle.y1 <= quadCorners[i][2].y))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Get a list of indexes of nodes containing a non-axis-aligned rectangle\n   *\n   * @param  {array}  corners      An array containing each corner of the\n   *                               rectangle defined by its coordinates (x, y).\n   * @param  {array}  quadCorners  An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadCollision(corners, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if (_geom.collision(corners, quadCorners[i]))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Subdivide a quad by creating a node at a precise index. The function does\n   * not generate all four nodes not to potentially create unused nodes.\n   *\n   * @param  {integer}  index The index of the node to create.\n   * @param  {object}   quad  The quad object to subdivide.\n   * @return {object}         A new quad representing the node created.\n   */\n  function _quadSubdivide(index, quad) {\n    var next = quad.level + 1,\n        subw = Math.round(quad.bounds.width / 2),\n        subh = Math.round(quad.bounds.height / 2),\n        qx = Math.round(quad.bounds.x),\n        qy = Math.round(quad.bounds.y),\n        x,\n        y;\n\n    switch (index) {\n      case 0:\n        x = qx;\n        y = qy;\n        break;\n      case 1:\n        x = qx + subw;\n        y = qy;\n        break;\n      case 2:\n        x = qx;\n        y = qy + subh;\n        break;\n      case 3:\n        x = qx + subw;\n        y = qy + subh;\n        break;\n    }\n\n    return _quadTree(\n      {x: x, y: y, width: subw, height: subh},\n      next,\n      quad.maxElements,\n      quad.maxLevel\n    );\n  }\n\n  /**\n   * Recursively insert an element into the quadtree. Only points\n   * with size, i.e. axis-aligned squares, may be inserted with this\n   * method.\n   *\n   * @param  {object}  el         The element to insert in the quadtree.\n   * @param  {object}  sizedPoint A sized point defined by two top points\n   *                              (x1, y1), (x2, y2) and height.\n   * @param  {object}  quad       The quad in which to insert the element.\n   * @return {undefined}          The function does not return anything.\n   */\n  function _quadInsert(el, sizedPoint, quad) {\n    if (quad.level < quad.maxLevel) {\n\n      // Searching appropriate quads\n      var indexes = _quadIndexes(sizedPoint, quad.corners);\n\n      // Iterating\n      for (var i = 0, l = indexes.length; i < l; i++) {\n\n        // Subdividing if necessary\n        if (quad.nodes[indexes[i]] === undefined)\n          quad.nodes[indexes[i]] = _quadSubdivide(indexes[i], quad);\n\n        // Recursion\n        _quadInsert(el, sizedPoint, quad.nodes[indexes[i]]);\n      }\n    }\n    else {\n\n      // Pushing the element in a leaf node\n      quad.elements.push(el);\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements held by the node containing the\n   * searched point.\n   *\n   * @param  {object}  point The searched point (x, y).\n   * @param  {object}  quad  The searched quad.\n   * @return {array}         An array of elements contained in the relevant\n   *                         node.\n   */\n  function _quadRetrievePoint(point, quad) {\n    if (quad.level < quad.maxLevel) {\n      var index = _quadIndex(point, quad.bounds);\n\n      // If node does not exist we return an empty list\n      if (quad.nodes[index] !== undefined) {\n        return _quadRetrievePoint(point, quad.nodes[index]);\n      }\n      else {\n        return [];\n      }\n    }\n    else {\n      return quad.elements;\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements contained within an rectangular area\n   * that may or may not be axis-aligned.\n   *\n   * @param  {object|array} rectData       The searched area defined either by\n   *                                       an array of four corners (x, y) in\n   *                                       the case of a non-axis-aligned\n   *                                       rectangle or an object with two top\n   *                                       points (x1, y1), (x2, y2) and height.\n   * @param  {object}       quad           The searched quad.\n   * @param  {function}     collisionFunc  The collision function used to search\n   *                                       for node indexes.\n   * @param  {array?}       els            The retrieved elements.\n   * @return {array}                       An array of elements contained in the\n   *                                       area.\n   */\n  function _quadRetrieveArea(rectData, quad, collisionFunc, els) {\n    els = els || {};\n\n    if (quad.level < quad.maxLevel) {\n      var indexes = collisionFunc(rectData, quad.corners);\n\n      for (var i = 0, l = indexes.length; i < l; i++)\n        if (quad.nodes[indexes[i]] !== undefined)\n          _quadRetrieveArea(\n            rectData,\n            quad.nodes[indexes[i]],\n            collisionFunc,\n            els\n          );\n    } else\n      for (var j = 0, m = quad.elements.length; j < m; j++)\n        if (els[quad.elements[j].id] === undefined)\n          els[quad.elements[j].id] = quad.elements[j];\n\n    return els;\n  }\n\n  /**\n   * Creates the quadtree object itself.\n   *\n   * @param  {object}   bounds       The boundaries of the quad defined by an\n   *                                 origin (x, y), width and heigth.\n   * @param  {integer}  level        The level of the quad in the tree.\n   * @param  {integer}  maxElements  The max number of element in a leaf node.\n   * @param  {integer}  maxLevel     The max recursion level of the tree.\n   * @return {object}                The quadtree object.\n   */\n  function _quadTree(bounds, level, maxElements, maxLevel) {\n    return {\n      level: level || 0,\n      bounds: bounds,\n      corners: _geom.splitSquare(bounds),\n      maxElements: maxElements || 40,\n      maxLevel: maxLevel || 8,\n      elements: [],\n      nodes: []\n    };\n  }\n\n\n  /**\n   * Sigma Quad Constructor\n   * ----------------------\n   *\n   * The edgequad API as exposed to sigma.\n   */\n\n  /**\n   * The edgequad core that will become the sigma interface with the quadtree.\n   *\n   * property {object} _tree     Property holding the quadtree object.\n   * property {object} _geom     Exposition of the _geom namespace for testing.\n   * property {object} _cache    Cache for the area method.\n   * property {boolean} _enabled Can index and retreive elements.\n   */\n  var edgequad = function() {\n    this._geom = _geom;\n    this._tree = null;\n    this._cache = {\n      query: false,\n      result: false\n    };\n    this._enabled = true;\n  };\n\n  /**\n   * Index a graph by inserting its edges into the quadtree.\n   *\n   * @param  {object} graph   A graph instance.\n   * @param  {object} params  An object of parameters with at least the quad\n   *                          bounds.\n   * @return {object}         The quadtree object.\n   *\n   * Parameters:\n   * ----------\n   * bounds:      {object}   boundaries of the quad defined by its origin (x, y)\n   *                         width and heigth.\n   * prefix:      {string?}  a prefix for edge geometric attributes.\n   * maxElements: {integer?} the max number of elements in a leaf node.\n   * maxLevel:    {integer?} the max recursion level of the tree.\n   */\n  edgequad.prototype.index = function(graph, params) {\n    if (!this._enabled)\n      return this._tree;\n\n    // Enforcing presence of boundaries\n    if (!params.bounds)\n      throw 'sigma.classes.edgequad.index: bounds information not given.';\n\n    // Prefix\n    var prefix = params.prefix || '',\n        cp,\n        source,\n        target,\n        n,\n        e;\n\n    // Building the tree\n    this._tree = _quadTree(\n      params.bounds,\n      0,\n      params.maxElements,\n      params.maxLevel\n    );\n\n    var edges = graph.edges();\n\n    // Inserting graph edges into the tree\n    for (var i = 0, l = edges.length; i < l; i++) {\n      source = graph.nodes(edges[i].source);\n      target = graph.nodes(edges[i].target);\n      e = {\n        x1: source[prefix + 'x'],\n        y1: source[prefix + 'y'],\n        x2: target[prefix + 'x'],\n        y2: target[prefix + 'y'],\n        size: edges[i][prefix + 'size'] || 0\n      };\n\n      // Inserting edge\n      if (edges[i].type === 'curve' || edges[i].type === 'curvedArrow') {\n        if (source.id === target.id) {\n          n = {\n            x: source[prefix + 'x'],\n            y: source[prefix + 'y'],\n            size: source[prefix + 'size'] || 0\n          };\n          _quadInsert(\n            edges[i],\n            _geom.selfLoopToSquare(n),\n            this._tree);\n        }\n        else {\n          cp = sigma.utils.getQuadraticControlPoint(e.x1, e.y1, e.x2, e.y2);\n          _quadInsert(\n            edges[i],\n            _geom.quadraticCurveToSquare(e, cp),\n            this._tree);\n        }\n      }\n      else {\n        _quadInsert(\n          edges[i],\n          _geom.lineToSquare(e),\n          this._tree);\n      }\n    }\n\n    // Reset cache:\n    this._cache = {\n      query: false,\n      result: false\n    };\n\n    // remove?\n    return this._tree;\n  };\n\n  /**\n   * Retrieve every graph edges held by the quadtree node containing the\n   * searched point.\n   *\n   * @param  {number} x of the point.\n   * @param  {number} y of the point.\n   * @return {array}  An array of edges retrieved.\n   */\n  edgequad.prototype.point = function(x, y) {\n    if (!this._enabled)\n      return [];\n\n    return this._tree ?\n      _quadRetrievePoint({x: x, y: y}, this._tree) || [] :\n      [];\n  };\n\n  /**\n   * Retrieve every graph edges within a rectangular area. The methods keep the\n   * last area queried in cache for optimization reason and will act differently\n   * for the same reason if the area is axis-aligned or not.\n   *\n   * @param  {object} A rectangle defined by two top points (x1, y1), (x2, y2)\n   *                  and height.\n   * @return {array}  An array of edges retrieved.\n   */\n  edgequad.prototype.area = function(rect) {\n    if (!this._enabled)\n      return [];\n\n    var serialized = JSON.stringify(rect),\n        collisionFunc,\n        rectData;\n\n    // Returning cache?\n    if (this._cache.query === serialized)\n      return this._cache.result;\n\n    // Axis aligned ?\n    if (_geom.isAxisAligned(rect)) {\n      collisionFunc = _quadIndexes;\n      rectData = _geom.axisAlignedTopPoints(rect);\n    }\n    else {\n      collisionFunc = _quadCollision;\n      rectData = _geom.rectangleCorners(rect);\n    }\n\n    // Retrieving edges\n    var edges = this._tree ?\n      _quadRetrieveArea(\n        rectData,\n        this._tree,\n        collisionFunc\n      ) :\n      [];\n\n    // Object to array\n    var edgesArray = [];\n    for (var i in edges)\n      edgesArray.push(edges[i]);\n\n    // Caching\n    this._cache.query = serialized;\n    this._cache.result = edgesArray;\n\n    return edgesArray;\n  };\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.edgequad = edgequad;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = edgequad;\n    exports.edgequad = edgequad;\n  } else\n    this.edgequad = edgequad;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 40:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  var _methods = Object.create(null),\n      _indexes = Object.create(null),\n      _initBindings = Object.create(null),\n      _methodBindings = Object.create(null),\n      _methodBeforeBindings = Object.create(null),\n      _defaultSettings = {\n        immutable: true,\n        clone: true\n      },\n      _defaultSettingsFunction = function(key) {\n        return _defaultSettings[key];\n      };\n\n  /**\n   * The graph constructor. It initializes the data and the indexes, and binds\n   * the custom indexes and methods to its own scope.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the settings\n   * object:\n   *\n   *   {boolean} clone     Indicates if the data have to be cloned in methods\n   *                       to add nodes or edges.\n   *   {boolean} immutable Indicates if nodes \"id\" values and edges \"id\",\n   *                       \"source\" and \"target\" values must be set as\n   *                       immutable.\n   *\n   * @param  {?configurable} settings Eventually a settings function.\n   * @return {graph}                  The new graph instance.\n   */\n  var graph = function(settings) {\n    var k,\n        fn,\n        data;\n\n    /**\n     * DATA:\n     * *****\n     * Every data that is callable from graph methods are stored in this \"data\"\n     * object. This object will be served as context for all these methods,\n     * and it is possible to add other type of data in it.\n     */\n    data = {\n      /**\n       * SETTINGS FUNCTION:\n       * ******************\n       */\n      settings: settings || _defaultSettingsFunction,\n\n      /**\n       * MAIN DATA:\n       * **********\n       */\n      nodesArray: [],\n      edgesArray: [],\n\n      /**\n       * GLOBAL INDEXES:\n       * ***************\n       * These indexes just index data by ids.\n       */\n      nodesIndex: Object.create(null),\n      edgesIndex: Object.create(null),\n\n      /**\n       * LOCAL INDEXES:\n       * **************\n       * These indexes refer from node to nodes. Each key is an id, and each\n       * value is the array of the ids of related nodes.\n       */\n      inNeighborsIndex: Object.create(null),\n      outNeighborsIndex: Object.create(null),\n      allNeighborsIndex: Object.create(null),\n\n      inNeighborsCount: Object.create(null),\n      outNeighborsCount: Object.create(null),\n      allNeighborsCount: Object.create(null)\n    };\n\n    // Execute bindings:\n    for (k in _initBindings)\n      _initBindings[k].call(data);\n\n    // Add methods to both the scope and the data objects:\n    for (k in _methods) {\n      fn = __bindGraphMethod(k, data, _methods[k]);\n      this[k] = fn;\n      data[k] = fn;\n    }\n  };\n\n\n\n\n  /**\n   * A custom tool to bind methods such that function that are bound to it will\n   * be executed anytime the method is called.\n   *\n   * @param  {string}   methodName The name of the method to bind.\n   * @param  {object}   scope      The scope where the method must be executed.\n   * @param  {function} fn         The method itself.\n   * @return {function}            The new method.\n   */\n  function __bindGraphMethod(methodName, scope, fn) {\n    var result = function() {\n      var k,\n          res;\n\n      // Execute \"before\" bound functions:\n      for (k in _methodBeforeBindings[methodName])\n        _methodBeforeBindings[methodName][k].apply(scope, arguments);\n\n      // Apply the method:\n      res = fn.apply(scope, arguments);\n\n      // Execute bound functions:\n      for (k in _methodBindings[methodName])\n        _methodBindings[methodName][k].apply(scope, arguments);\n\n      // Return res:\n      return res;\n    };\n\n    return result;\n  }\n\n  /**\n   * This custom tool function removes every pair key/value from an hash. The\n   * goal is to avoid creating a new object while some other references are\n   * still hanging in some scopes...\n   *\n   * @param  {object} obj The object to empty.\n   * @return {object}     The empty object.\n   */\n  function __emptyObject(obj) {\n    var k;\n\n    for (k in obj)\n      if (!('hasOwnProperty' in obj) || obj.hasOwnProperty(k))\n        delete obj[k];\n\n    return obj;\n  }\n\n\n\n\n  /**\n   * This global method adds a method that will be bound to the futurly created\n   * graph instances.\n   *\n   * Since these methods will be bound to their scope when the instances are\n   * created, it does not use the prototype. Because of that, methods have to\n   * be added before instances are created to make them available.\n   *\n   * Here is an example:\n   *\n   *  > graph.addMethod('getNodesCount', function() {\n   *  >   return this.nodesArray.length;\n   *  > });\n   *  >\n   *  > var myGraph = new graph();\n   *  > console.log(myGraph.getNodesCount()); // outputs 0\n   *\n   * @param  {string}   methodName The name of the method.\n   * @param  {function} fn         The method itself.\n   * @return {object}              The global graph constructor.\n   */\n  graph.addMethod = function(methodName, fn) {\n    if (\n      typeof methodName !== 'string' ||\n      typeof fn !== 'function' ||\n      arguments.length !== 2\n    )\n      throw 'addMethod: Wrong arguments.';\n\n    if (_methods[methodName] || graph[methodName])\n      throw 'The method \"' + methodName + '\" already exists.';\n\n    _methods[methodName] = fn;\n    _methodBindings[methodName] = Object.create(null);\n    _methodBeforeBindings[methodName] = Object.create(null);\n\n    return this;\n  };\n\n  /**\n   * This global method returns true if the method has already been added, and\n   * false else.\n   *\n   * Here are some examples:\n   *\n   *  > graph.hasMethod('addNode'); // returns true\n   *  > graph.hasMethod('hasMethod'); // returns true\n   *  > graph.hasMethod('unexistingMethod'); // returns false\n   *\n   * @param  {string}  methodName The name of the method.\n   * @return {boolean}            The result.\n   */\n  graph.hasMethod = function(methodName) {\n    return !!(_methods[methodName] || graph[methodName]);\n  };\n\n  /**\n   * This global methods attaches a function to a method. Anytime the specified\n   * method is called, the attached function is called right after, with the\n   * same arguments and in the same scope. The attached function is called\n   * right before if the last argument is true, unless the method is the graph\n   * constructor.\n   *\n   * To attach a function to the graph constructor, use 'constructor' as the\n   * method name (first argument).\n   *\n   * The main idea is to have a clean way to keep custom indexes up to date,\n   * for instance:\n   *\n   *  > var timesAddNodeCalled = 0;\n   *  > graph.attach('addNode', 'timesAddNodeCalledInc', function() {\n   *  >   timesAddNodeCalled++;\n   *  > });\n   *  >\n   *  > var myGraph = new graph();\n   *  > console.log(timesAddNodeCalled); // outputs 0\n   *  >\n   *  > myGraph.addNode({ id: '1' }).addNode({ id: '2' });\n   *  > console.log(timesAddNodeCalled); // outputs 2\n   *\n   * The idea for calling a function before is to provide pre-processors, for\n   * instance:\n   *\n   *  > var colorPalette = { Person: '#C3CBE1', Place: '#9BDEBD' };\n   *  > graph.attach('addNode', 'applyNodeColorPalette', function(n) {\n   *  >   n.color = colorPalette[n.category];\n   *  > }, true);\n   *  >\n   *  > var myGraph = new graph();\n   *  > myGraph.addNode({ id: 'n0', category: 'Person' });\n   *  > console.log(myGraph.nodes('n0').color); // outputs '#C3CBE1'\n   *\n   * @param  {string}   methodName The name of the related method or\n   *                               \"constructor\".\n   * @param  {string}   key        The key to identify the function to attach.\n   * @param  {function} fn         The function to bind.\n   * @param  {boolean}  before     If true the function is called right before.\n   * @return {object}              The global graph constructor.\n   */\n  graph.attach = function(methodName, key, fn, before) {\n    if (\n      typeof methodName !== 'string' ||\n      typeof key !== 'string' ||\n      typeof fn !== 'function' ||\n      arguments.length < 3 ||\n      arguments.length > 4\n    )\n      throw 'attach: Wrong arguments.';\n\n    var bindings;\n\n    if (methodName === 'constructor')\n      bindings = _initBindings;\n    else {\n      if (before) {\n        if (!_methodBeforeBindings[methodName])\n        throw 'The method \"' + methodName + '\" does not exist.';\n\n        bindings = _methodBeforeBindings[methodName];\n      }\n      else {\n        if (!_methodBindings[methodName])\n          throw 'The method \"' + methodName + '\" does not exist.';\n\n        bindings = _methodBindings[methodName];\n      }\n    }\n\n    if (bindings[key])\n      throw 'A function \"' + key + '\" is already attached ' +\n            'to the method \"' + methodName + '\".';\n\n    bindings[key] = fn;\n\n    return this;\n  };\n\n  /**\n   * Alias of attach(methodName, key, fn, true).\n   */\n  graph.attachBefore = function(methodName, key, fn) {\n    return this.attach(methodName, key, fn, true);\n  };\n\n  /**\n   * This methods is just an helper to deal with custom indexes. It takes as\n   * arguments the name of the index and an object containing all the different\n   * functions to bind to the methods.\n   *\n   * Here is a basic example, that creates an index to keep the number of nodes\n   * in the current graph. It also adds a method to provide a getter on that\n   * new index:\n   *\n   *  > sigma.classes.graph.addIndex('nodesCount', {\n   *  >   constructor: function() {\n   *  >     this.nodesCount = 0;\n   *  >   },\n   *  >   addNode: function() {\n   *  >     this.nodesCount++;\n   *  >   },\n   *  >   dropNode: function() {\n   *  >     this.nodesCount--;\n   *  >   }\n   *  > });\n   *  >\n   *  > sigma.classes.graph.addMethod('getNodesCount', function() {\n   *  >   return this.nodesCount;\n   *  > });\n   *  >\n   *  > var myGraph = new sigma.classes.graph();\n   *  > console.log(myGraph.getNodesCount()); // outputs 0\n   *  >\n   *  > myGraph.addNode({ id: '1' }).addNode({ id: '2' });\n   *  > console.log(myGraph.getNodesCount()); // outputs 2\n   *\n   * @param  {string} name     The name of the index.\n   * @param  {object} bindings The object containing the functions to bind.\n   * @return {object}          The global graph constructor.\n   */\n  graph.addIndex = function(name, bindings) {\n    if (\n      typeof name !== 'string' ||\n      Object(bindings) !== bindings ||\n      arguments.length !== 2\n    )\n      throw 'addIndex: Wrong arguments.';\n\n    if (_indexes[name])\n      throw 'The index \"' + name + '\" already exists.';\n\n    var k;\n\n    // Store the bindings:\n    _indexes[name] = bindings;\n\n    // Attach the bindings:\n    for (k in bindings)\n      if (typeof bindings[k] !== 'function')\n        throw 'The bindings must be functions.';\n      else\n        graph.attach(k, name, bindings[k]);\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method adds a node to the graph. The node must be an object, with a\n   * string under the key \"id\". Except for this, it is possible to add any\n   * other attribute, that will be preserved all along the manipulations.\n   *\n   * If the graph option \"clone\" has a truthy value, the node will be cloned\n   * when added to the graph. Also, if the graph option \"immutable\" has a\n   * truthy value, its id will be defined as immutable.\n   *\n   * @param  {object} node The node to add.\n   * @return {object}      The graph instance.\n   */\n  graph.addMethod('addNode', function(node) {\n    // Check that the node is an object and has an id:\n    if (Object(node) !== node || arguments.length !== 1)\n      throw 'addNode: Wrong arguments.';\n\n    if (typeof node.id !== 'string' && typeof node.id !== 'number')\n      throw 'The node must have a string or number id.';\n\n    if (this.nodesIndex[node.id])\n      throw 'The node \"' + node.id + '\" already exists.';\n\n    var k,\n        id = node.id,\n        validNode = Object.create(null);\n\n    // Check the \"clone\" option:\n    if (this.settings('clone')) {\n      for (k in node)\n        if (k !== 'id')\n          validNode[k] = node[k];\n    } else\n      validNode = node;\n\n    // Check the \"immutable\" option:\n    if (this.settings('immutable'))\n      Object.defineProperty(validNode, 'id', {\n        value: id,\n        enumerable: true\n      });\n    else\n      validNode.id = id;\n\n    // Add empty containers for edges indexes:\n    this.inNeighborsIndex[id] = Object.create(null);\n    this.outNeighborsIndex[id] = Object.create(null);\n    this.allNeighborsIndex[id] = Object.create(null);\n\n    this.inNeighborsCount[id] = 0;\n    this.outNeighborsCount[id] = 0;\n    this.allNeighborsCount[id] = 0;\n\n    // Add the node to indexes:\n    this.nodesArray.push(validNode);\n    this.nodesIndex[validNode.id] = validNode;\n\n    // Return the current instance:\n    return this;\n  });\n\n  /**\n   * This method adds an edge to the graph. The edge must be an object, with a\n   * string under the key \"id\", and strings under the keys \"source\" and\n   * \"target\" that design existing nodes. Except for this, it is possible to\n   * add any other attribute, that will be preserved all along the\n   * manipulations.\n   *\n   * If the graph option \"clone\" has a truthy value, the edge will be cloned\n   * when added to the graph. Also, if the graph option \"immutable\" has a\n   * truthy value, its id, source and target will be defined as immutable.\n   *\n   * @param  {object} edge The edge to add.\n   * @return {object}      The graph instance.\n   */\n  graph.addMethod('addEdge', function(edge) {\n    // Check that the edge is an object and has an id:\n    if (Object(edge) !== edge || arguments.length !== 1)\n      throw 'addEdge: Wrong arguments.';\n\n    if (typeof edge.id !== 'string' && typeof edge.id !== 'number')\n      throw 'The edge must have a string or number id.';\n\n    if ((typeof edge.source !== 'string' && typeof edge.source !== 'number') ||\n        !this.nodesIndex[edge.source])\n      throw 'The edge source must have an existing node id.';\n\n    if ((typeof edge.target !== 'string' && typeof edge.target !== 'number') ||\n        !this.nodesIndex[edge.target])\n      throw 'The edge target must have an existing node id.';\n\n    if (this.edgesIndex[edge.id])\n      throw 'The edge \"' + edge.id + '\" already exists.';\n\n    var k,\n        validEdge = Object.create(null);\n\n    // Check the \"clone\" option:\n    if (this.settings('clone')) {\n      for (k in edge)\n        if (k !== 'id' && k !== 'source' && k !== 'target')\n          validEdge[k] = edge[k];\n    } else\n      validEdge = edge;\n\n    // Check the \"immutable\" option:\n    if (this.settings('immutable')) {\n      Object.defineProperty(validEdge, 'id', {\n        value: edge.id,\n        enumerable: true\n      });\n\n      Object.defineProperty(validEdge, 'source', {\n        value: edge.source,\n        enumerable: true\n      });\n\n      Object.defineProperty(validEdge, 'target', {\n        value: edge.target,\n        enumerable: true\n      });\n    } else {\n      validEdge.id = edge.id;\n      validEdge.source = edge.source;\n      validEdge.target = edge.target;\n    }\n\n    // Add the edge to indexes:\n    this.edgesArray.push(validEdge);\n    this.edgesIndex[validEdge.id] = validEdge;\n\n    if (!this.inNeighborsIndex[validEdge.target][validEdge.source])\n      this.inNeighborsIndex[validEdge.target][validEdge.source] =\n        Object.create(null);\n    this.inNeighborsIndex[validEdge.target][validEdge.source][validEdge.id] =\n      validEdge;\n\n    if (!this.outNeighborsIndex[validEdge.source][validEdge.target])\n      this.outNeighborsIndex[validEdge.source][validEdge.target] =\n        Object.create(null);\n    this.outNeighborsIndex[validEdge.source][validEdge.target][validEdge.id] =\n      validEdge;\n\n    if (!this.allNeighborsIndex[validEdge.source][validEdge.target])\n      this.allNeighborsIndex[validEdge.source][validEdge.target] =\n        Object.create(null);\n    this.allNeighborsIndex[validEdge.source][validEdge.target][validEdge.id] =\n      validEdge;\n\n    if (validEdge.target !== validEdge.source) {\n      if (!this.allNeighborsIndex[validEdge.target][validEdge.source])\n        this.allNeighborsIndex[validEdge.target][validEdge.source] =\n          Object.create(null);\n      this.allNeighborsIndex[validEdge.target][validEdge.source][validEdge.id] =\n        validEdge;\n    }\n\n    // Keep counts up to date:\n    this.inNeighborsCount[validEdge.target]++;\n    this.outNeighborsCount[validEdge.source]++;\n    this.allNeighborsCount[validEdge.target]++;\n    this.allNeighborsCount[validEdge.source]++;\n\n    return this;\n  });\n\n  /**\n   * This method drops a node from the graph. It also removes each edge that is\n   * bound to it, through the dropEdge method. An error is thrown if the node\n   * does not exist.\n   *\n   * @param  {string} id The node id.\n   * @return {object}    The graph instance.\n   */\n  graph.addMethod('dropNode', function(id) {\n    // Check that the arguments are valid:\n    if ((typeof id !== 'string' && typeof id !== 'number') ||\n        arguments.length !== 1)\n      throw 'dropNode: Wrong arguments.';\n\n    if (!this.nodesIndex[id])\n      throw 'The node \"' + id + '\" does not exist.';\n\n    var i, k, l;\n\n    // Remove the node from indexes:\n    delete this.nodesIndex[id];\n    for (i = 0, l = this.nodesArray.length; i < l; i++)\n      if (this.nodesArray[i].id === id) {\n        this.nodesArray.splice(i, 1);\n        break;\n      }\n\n    // Remove related edges:\n    for (i = this.edgesArray.length - 1; i >= 0; i--)\n      if (this.edgesArray[i].source === id || this.edgesArray[i].target === id)\n        this.dropEdge(this.edgesArray[i].id);\n\n    // Remove related edge indexes:\n    delete this.inNeighborsIndex[id];\n    delete this.outNeighborsIndex[id];\n    delete this.allNeighborsIndex[id];\n\n    delete this.inNeighborsCount[id];\n    delete this.outNeighborsCount[id];\n    delete this.allNeighborsCount[id];\n\n    for (k in this.nodesIndex) {\n      delete this.inNeighborsIndex[k][id];\n      delete this.outNeighborsIndex[k][id];\n      delete this.allNeighborsIndex[k][id];\n    }\n\n    return this;\n  });\n\n  /**\n   * This method drops an edge from the graph. An error is thrown if the edge\n   * does not exist.\n   *\n   * @param  {string} id The edge id.\n   * @return {object}    The graph instance.\n   */\n  graph.addMethod('dropEdge', function(id) {\n    // Check that the arguments are valid:\n    if ((typeof id !== 'string' && typeof id !== 'number') ||\n        arguments.length !== 1)\n      throw 'dropEdge: Wrong arguments.';\n\n    if (!this.edgesIndex[id])\n      throw 'The edge \"' + id + '\" does not exist.';\n\n    var i, l, edge;\n\n    // Remove the edge from indexes:\n    edge = this.edgesIndex[id];\n    delete this.edgesIndex[id];\n    for (i = 0, l = this.edgesArray.length; i < l; i++)\n      if (this.edgesArray[i].id === id) {\n        this.edgesArray.splice(i, 1);\n        break;\n      }\n\n    delete this.inNeighborsIndex[edge.target][edge.source][edge.id];\n    if (!Object.keys(this.inNeighborsIndex[edge.target][edge.source]).length)\n      delete this.inNeighborsIndex[edge.target][edge.source];\n\n    delete this.outNeighborsIndex[edge.source][edge.target][edge.id];\n    if (!Object.keys(this.outNeighborsIndex[edge.source][edge.target]).length)\n      delete this.outNeighborsIndex[edge.source][edge.target];\n\n    delete this.allNeighborsIndex[edge.source][edge.target][edge.id];\n    if (!Object.keys(this.allNeighborsIndex[edge.source][edge.target]).length)\n      delete this.allNeighborsIndex[edge.source][edge.target];\n\n    if (edge.target !== edge.source) {\n      delete this.allNeighborsIndex[edge.target][edge.source][edge.id];\n      if (!Object.keys(this.allNeighborsIndex[edge.target][edge.source]).length)\n        delete this.allNeighborsIndex[edge.target][edge.source];\n    }\n\n    this.inNeighborsCount[edge.target]--;\n    this.outNeighborsCount[edge.source]--;\n    this.allNeighborsCount[edge.source]--;\n    this.allNeighborsCount[edge.target]--;\n\n    return this;\n  });\n\n  /**\n   * This method destroys the current instance. It basically empties each index\n   * and methods attached to the graph.\n   */\n  graph.addMethod('kill', function() {\n    // Delete arrays:\n    this.nodesArray.length = 0;\n    this.edgesArray.length = 0;\n    delete this.nodesArray;\n    delete this.edgesArray;\n\n    // Delete indexes:\n    delete this.nodesIndex;\n    delete this.edgesIndex;\n    delete this.inNeighborsIndex;\n    delete this.outNeighborsIndex;\n    delete this.allNeighborsIndex;\n    delete this.inNeighborsCount;\n    delete this.outNeighborsCount;\n    delete this.allNeighborsCount;\n  });\n\n  /**\n   * This method empties the nodes and edges arrays, as well as the different\n   * indexes.\n   *\n   * @return {object} The graph instance.\n   */\n  graph.addMethod('clear', function() {\n    this.nodesArray.length = 0;\n    this.edgesArray.length = 0;\n\n    // Due to GC issues, I prefer not to create new object. These objects are\n    // only available from the methods and attached functions, but still, it is\n    // better to prevent ghost references to unrelevant data...\n    __emptyObject(this.nodesIndex);\n    __emptyObject(this.edgesIndex);\n    __emptyObject(this.nodesIndex);\n    __emptyObject(this.inNeighborsIndex);\n    __emptyObject(this.outNeighborsIndex);\n    __emptyObject(this.allNeighborsIndex);\n    __emptyObject(this.inNeighborsCount);\n    __emptyObject(this.outNeighborsCount);\n    __emptyObject(this.allNeighborsCount);\n\n    return this;\n  });\n\n  /**\n   * This method reads an object and adds the nodes and edges, through the\n   * proper methods \"addNode\" and \"addEdge\".\n   *\n   * Here is an example:\n   *\n   *  > var myGraph = new graph();\n   *  > myGraph.read({\n   *  >   nodes: [\n   *  >     { id: 'n0' },\n   *  >     { id: 'n1' }\n   *  >   ],\n   *  >   edges: [\n   *  >     {\n   *  >       id: 'e0',\n   *  >       source: 'n0',\n   *  >       target: 'n1'\n   *  >     }\n   *  >   ]\n   *  > });\n   *  >\n   *  > console.log(\n   *  >   myGraph.nodes().length,\n   *  >   myGraph.edges().length\n   *  > ); // outputs 2 1\n   *\n   * @param  {object} g The graph object.\n   * @return {object}   The graph instance.\n   */\n  graph.addMethod('read', function(g) {\n    var i,\n        a,\n        l;\n\n    a = g.nodes || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.addNode(a[i]);\n\n    a = g.edges || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.addEdge(a[i]);\n\n    return this;\n  });\n\n  /**\n   * This methods returns one or several nodes, depending on how it is called.\n   *\n   * To get the array of nodes, call \"nodes\" without argument. To get a\n   * specific node, call it with the id of the node. The get multiple node,\n   * call it with an array of ids, and it will return the array of nodes, in\n   * the same order.\n   *\n   * @param  {?(string|array)} v Eventually one id, an array of ids.\n   * @return {object|array}      The related node or array of nodes.\n   */\n  graph.addMethod('nodes', function(v) {\n    // Clone the array of nodes and return it:\n    if (!arguments.length)\n      return this.nodesArray.slice(0);\n\n    // Return the related node:\n    if (arguments.length === 1 &&\n        (typeof v === 'string' || typeof v === 'number'))\n      return this.nodesIndex[v];\n\n    // Return an array of the related node:\n    if (\n      arguments.length === 1 &&\n      Object.prototype.toString.call(v) === '[object Array]'\n    ) {\n      var i,\n          l,\n          a = [];\n\n      for (i = 0, l = v.length; i < l; i++)\n        if (typeof v[i] === 'string' || typeof v[i] === 'number')\n          a.push(this.nodesIndex[v[i]]);\n        else\n          throw 'nodes: Wrong arguments.';\n\n      return a;\n    }\n\n    throw 'nodes: Wrong arguments.';\n  });\n\n  /**\n   * This methods returns the degree of one or several nodes, depending on how\n   * it is called. It is also possible to get incoming or outcoming degrees\n   * instead by specifying 'in' or 'out' as a second argument.\n   *\n   * @param  {string|array} v     One id, an array of ids.\n   * @param  {?string}      which Which degree is required. Values are 'in',\n   *                              'out', and by default the normal degree.\n   * @return {number|array}       The related degree or array of degrees.\n   */\n  graph.addMethod('degree', function(v, which) {\n    // Check which degree is required:\n    which = {\n      'in': this.inNeighborsCount,\n      'out': this.outNeighborsCount\n    }[which || ''] || this.allNeighborsCount;\n\n    // Return the related node:\n    if (typeof v === 'string' || typeof v === 'number')\n      return which[v];\n\n    // Return an array of the related node:\n    if (Object.prototype.toString.call(v) === '[object Array]') {\n      var i,\n          l,\n          a = [];\n\n      for (i = 0, l = v.length; i < l; i++)\n        if (typeof v[i] === 'string' || typeof v[i] === 'number')\n          a.push(which[v[i]]);\n        else\n          throw 'degree: Wrong arguments.';\n\n      return a;\n    }\n\n    throw 'degree: Wrong arguments.';\n  });\n\n  /**\n   * This methods returns one or several edges, depending on how it is called.\n   *\n   * To get the array of edges, call \"edges\" without argument. To get a\n   * specific edge, call it with the id of the edge. The get multiple edge,\n   * call it with an array of ids, and it will return the array of edges, in\n   * the same order.\n   *\n   * @param  {?(string|array)} v Eventually one id, an array of ids.\n   * @return {object|array}      The related edge or array of edges.\n   */\n  graph.addMethod('edges', function(v) {\n    // Clone the array of edges and return it:\n    if (!arguments.length)\n      return this.edgesArray.slice(0);\n\n    // Return the related edge:\n    if (arguments.length === 1 &&\n        (typeof v === 'string' || typeof v === 'number'))\n      return this.edgesIndex[v];\n\n    // Return an array of the related edge:\n    if (\n      arguments.length === 1 &&\n      Object.prototype.toString.call(v) === '[object Array]'\n    ) {\n      var i,\n          l,\n          a = [];\n\n      for (i = 0, l = v.length; i < l; i++)\n        if (typeof v[i] === 'string' || typeof v[i] === 'number')\n          a.push(this.edgesIndex[v[i]]);\n        else\n          throw 'edges: Wrong arguments.';\n\n      return a;\n    }\n\n    throw 'edges: Wrong arguments.';\n  });\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof sigma !== 'undefined') {\n    sigma.classes = sigma.classes || Object.create(null);\n    sigma.classes.graph = graph;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = graph;\n    exports.graph = graph;\n  } else\n    this.graph = graph;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 41:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * Sigma Quadtree Module\n   * =====================\n   *\n   * Author: Guillaume Plique (Yomguithereal)\n   * Version: 0.2\n   */\n\n\n\n  /**\n   * Quad Geometric Operations\n   * -------------------------\n   *\n   * A useful batch of geometric operations used by the quadtree.\n   */\n\n  var _geom = {\n\n    /**\n     * Transforms a graph node with x, y and size into an\n     * axis-aligned square.\n     *\n     * @param  {object} A graph node with at least a point (x, y) and a size.\n     * @return {object} A square: two points (x1, y1), (x2, y2) and height.\n     */\n    pointToSquare: function(n) {\n      return {\n        x1: n.x - n.size,\n        y1: n.y - n.size,\n        x2: n.x + n.size,\n        y2: n.y - n.size,\n        height: n.size * 2\n      };\n    },\n\n    /**\n     * Checks whether a rectangle is axis-aligned.\n     *\n     * @param  {object}  A rectangle defined by two points\n     *                   (x1, y1) and (x2, y2).\n     * @return {boolean} True if the rectangle is axis-aligned.\n     */\n    isAxisAligned: function(r) {\n      return r.x1 === r.x2 || r.y1 === r.y2;\n    },\n\n    /**\n     * Compute top points of an axis-aligned rectangle. This is useful in\n     * cases when the rectangle has been rotated (left, right or bottom up) and\n     * later operations need to know the top points.\n     *\n     * @param  {object} An axis-aligned rectangle defined by two points\n     *                  (x1, y1), (x2, y2) and height.\n     * @return {object} A rectangle: two points (x1, y1), (x2, y2) and height.\n     */\n    axisAlignedTopPoints: function(r) {\n\n      // Basic\n      if (r.y1 === r.y2 && r.x1 < r.x2)\n        return r;\n\n      // Rotated to right\n      if (r.x1 === r.x2 && r.y2 > r.y1)\n        return {\n          x1: r.x1 - r.height, y1: r.y1,\n          x2: r.x1, y2: r.y1,\n          height: r.height\n        };\n\n      // Rotated to left\n      if (r.x1 === r.x2 && r.y2 < r.y1)\n        return {\n          x1: r.x1, y1: r.y2,\n          x2: r.x2 + r.height, y2: r.y2,\n          height: r.height\n        };\n\n      // Bottom's up\n      return {\n        x1: r.x2, y1: r.y1 - r.height,\n        x2: r.x1, y2: r.y1 - r.height,\n        height: r.height\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower left corner from its top points.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerLeftCoor: function(r) {\n      var width = (\n        Math.sqrt(\n          Math.pow(r.x2 - r.x1, 2) +\n          Math.pow(r.y2 - r.y1, 2)\n        )\n      );\n\n      return {\n        x: r.x1 - (r.y2 - r.y1) * r.height / width,\n        y: r.y1 + (r.x2 - r.x1) * r.height / width\n      };\n    },\n\n    /**\n     * Get coordinates of a rectangle's lower right corner from its top points\n     * and its lower left corner.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @param  {object} A corner's coordinates (x, y).\n     * @return {object} Coordinates of the corner (x, y).\n     */\n    lowerRightCoor: function(r, llc) {\n      return {\n        x: llc.x - r.x1 + r.x2,\n        y: llc.y - r.y1 + r.y2\n      };\n    },\n\n    /**\n     * Get the coordinates of all the corners of a rectangle from its top point.\n     *\n     * @param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n     * @return {array}  An array of the four corners' coordinates (x, y).\n     */\n    rectangleCorners: function(r) {\n      var llc = this.lowerLeftCoor(r),\n          lrc = this.lowerRightCoor(r, llc);\n\n      return [\n        {x: r.x1, y: r.y1},\n        {x: r.x2, y: r.y2},\n        {x: llc.x, y: llc.y},\n        {x: lrc.x, y: lrc.y}\n      ];\n    },\n\n    /**\n     * Split a square defined by its boundaries into four.\n     *\n     * @param  {object} Boundaries of the square (x, y, width, height).\n     * @return {array}  An array containing the four new squares, themselves\n     *                  defined by an array of their four corners (x, y).\n     */\n    splitSquare: function(b) {\n      return [\n        [\n          {x: b.x, y: b.y},\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y},\n          {x: b.x + b.width, y: b.y},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2}\n        ],\n        [\n          {x: b.x, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x, y: b.y + b.height},\n          {x: b.x + b.width / 2, y: b.y + b.height}\n        ],\n        [\n          {x: b.x + b.width / 2, y: b.y + b.height / 2},\n          {x: b.x + b.width, y: b.y + b.height / 2},\n          {x: b.x + b.width / 2, y: b.y + b.height},\n          {x: b.x + b.width, y: b.y + b.height}\n        ]\n      ];\n    },\n\n    /**\n     * Compute the four axis between corners of rectangle A and corners of\n     * rectangle B. This is needed later to check an eventual collision.\n     *\n     * @param  {array} An array of rectangle A's four corners (x, y).\n     * @param  {array} An array of rectangle B's four corners (x, y).\n     * @return {array} An array of four axis defined by their coordinates (x,y).\n     */\n    axis: function(c1, c2) {\n      return [\n        {x: c1[1].x - c1[0].x, y: c1[1].y - c1[0].y},\n        {x: c1[1].x - c1[3].x, y: c1[1].y - c1[3].y},\n        {x: c2[0].x - c2[2].x, y: c2[0].y - c2[2].y},\n        {x: c2[0].x - c2[1].x, y: c2[0].y - c2[1].y}\n      ];\n    },\n\n    /**\n     * Project a rectangle's corner on an axis.\n     *\n     * @param  {object} Coordinates of a corner (x, y).\n     * @param  {object} Coordinates of an axis (x, y).\n     * @return {object} The projection defined by coordinates (x, y).\n     */\n    projection: function(c, a) {\n      var l = (\n        (c.x * a.x + c.y * a.y) /\n        (Math.pow(a.x, 2) + Math.pow(a.y, 2))\n      );\n\n      return {\n        x: l * a.x,\n        y: l * a.y\n      };\n    },\n\n    /**\n     * Check whether two rectangles collide on one particular axis.\n     *\n     * @param  {object}   An axis' coordinates (x, y).\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide on the axis.\n     */\n    axisCollision: function(a, c1, c2) {\n      var sc1 = [],\n          sc2 = [];\n\n      for (var ci = 0; ci < 4; ci++) {\n        var p1 = this.projection(c1[ci], a),\n            p2 = this.projection(c2[ci], a);\n\n        sc1.push(p1.x * a.x + p1.y * a.y);\n        sc2.push(p2.x * a.x + p2.y * a.y);\n      }\n\n      var maxc1 = Math.max.apply(Math, sc1),\n          maxc2 = Math.max.apply(Math, sc2),\n          minc1 = Math.min.apply(Math, sc1),\n          minc2 = Math.min.apply(Math, sc2);\n\n      return (minc2 <= maxc1 && maxc2 >= minc1);\n    },\n\n    /**\n     * Check whether two rectangles collide on each one of their four axis. If\n     * all axis collide, then the two rectangles do collide on the plane.\n     *\n     * @param  {array}    Rectangle A's corners.\n     * @param  {array}    Rectangle B's corners.\n     * @return {boolean}  True if the rectangles collide.\n     */\n    collision: function(c1, c2) {\n      var axis = this.axis(c1, c2),\n          col = true;\n\n      for (var i = 0; i < 4; i++)\n        col = col && this.axisCollision(axis[i], c1, c2);\n\n      return col;\n    }\n  };\n\n\n  /**\n   * Quad Functions\n   * ------------\n   *\n   * The Quadtree functions themselves.\n   * For each of those functions, we consider that in a splitted quad, the\n   * index of each node is the following:\n   * 0: top left\n   * 1: top right\n   * 2: bottom left\n   * 3: bottom right\n   *\n   * Moreover, the hereafter quad's philosophy is to consider that if an element\n   * collides with more than one nodes, this element belongs to each of the\n   * nodes it collides with where other would let it lie on a higher node.\n   */\n\n  /**\n   * Get the index of the node containing the point in the quad\n   *\n   * @param  {object}  point      A point defined by coordinates (x, y).\n   * @param  {object}  quadBounds Boundaries of the quad (x, y, width, heigth).\n   * @return {integer}            The index of the node containing the point.\n   */\n  function _quadIndex(point, quadBounds) {\n    var xmp = quadBounds.x + quadBounds.width / 2,\n        ymp = quadBounds.y + quadBounds.height / 2,\n        top = (point.y < ymp),\n        left = (point.x < xmp);\n\n    if (top) {\n      if (left)\n        return 0;\n      else\n        return 1;\n    }\n    else {\n      if (left)\n        return 2;\n      else\n        return 3;\n    }\n  }\n\n  /**\n   * Get a list of indexes of nodes containing an axis-aligned rectangle\n   *\n   * @param  {object}  rectangle   A rectangle defined by two points (x1, y1),\n   *                               (x2, y2) and height.\n   * @param  {array}   quadCorners An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadIndexes(rectangle, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if ((rectangle.x2 >= quadCorners[i][0].x) &&\n          (rectangle.x1 <= quadCorners[i][1].x) &&\n          (rectangle.y1 + rectangle.height >= quadCorners[i][0].y) &&\n          (rectangle.y1 <= quadCorners[i][2].y))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Get a list of indexes of nodes containing a non-axis-aligned rectangle\n   *\n   * @param  {array}  corners      An array containing each corner of the\n   *                               rectangle defined by its coordinates (x, y).\n   * @param  {array}  quadCorners  An array of the quad nodes' corners.\n   * @return {array}               An array of indexes containing one to\n   *                               four integers.\n   */\n  function _quadCollision(corners, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if (_geom.collision(corners, quadCorners[i]))\n        indexes.push(i);\n\n    return indexes;\n  }\n\n  /**\n   * Subdivide a quad by creating a node at a precise index. The function does\n   * not generate all four nodes not to potentially create unused nodes.\n   *\n   * @param  {integer}  index The index of the node to create.\n   * @param  {object}   quad  The quad object to subdivide.\n   * @return {object}         A new quad representing the node created.\n   */\n  function _quadSubdivide(index, quad) {\n    var next = quad.level + 1,\n        subw = Math.round(quad.bounds.width / 2),\n        subh = Math.round(quad.bounds.height / 2),\n        qx = Math.round(quad.bounds.x),\n        qy = Math.round(quad.bounds.y),\n        x,\n        y;\n\n    switch (index) {\n      case 0:\n        x = qx;\n        y = qy;\n        break;\n      case 1:\n        x = qx + subw;\n        y = qy;\n        break;\n      case 2:\n        x = qx;\n        y = qy + subh;\n        break;\n      case 3:\n        x = qx + subw;\n        y = qy + subh;\n        break;\n    }\n\n    return _quadTree(\n      {x: x, y: y, width: subw, height: subh},\n      next,\n      quad.maxElements,\n      quad.maxLevel\n    );\n  }\n\n  /**\n   * Recursively insert an element into the quadtree. Only points\n   * with size, i.e. axis-aligned squares, may be inserted with this\n   * method.\n   *\n   * @param  {object}  el         The element to insert in the quadtree.\n   * @param  {object}  sizedPoint A sized point defined by two top points\n   *                              (x1, y1), (x2, y2) and height.\n   * @param  {object}  quad       The quad in which to insert the element.\n   * @return {undefined}          The function does not return anything.\n   */\n  function _quadInsert(el, sizedPoint, quad) {\n    if (quad.level < quad.maxLevel) {\n\n      // Searching appropriate quads\n      var indexes = _quadIndexes(sizedPoint, quad.corners);\n\n      // Iterating\n      for (var i = 0, l = indexes.length; i < l; i++) {\n\n        // Subdividing if necessary\n        if (quad.nodes[indexes[i]] === undefined)\n          quad.nodes[indexes[i]] = _quadSubdivide(indexes[i], quad);\n\n        // Recursion\n        _quadInsert(el, sizedPoint, quad.nodes[indexes[i]]);\n      }\n    }\n    else {\n\n      // Pushing the element in a leaf node\n      quad.elements.push(el);\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements held by the node containing the\n   * searched point.\n   *\n   * @param  {object}  point The searched point (x, y).\n   * @param  {object}  quad  The searched quad.\n   * @return {array}         An array of elements contained in the relevant\n   *                         node.\n   */\n  function _quadRetrievePoint(point, quad) {\n    if (quad.level < quad.maxLevel) {\n      var index = _quadIndex(point, quad.bounds);\n\n      // If node does not exist we return an empty list\n      if (quad.nodes[index] !== undefined) {\n        return _quadRetrievePoint(point, quad.nodes[index]);\n      }\n      else {\n        return [];\n      }\n    }\n    else {\n      return quad.elements;\n    }\n  }\n\n  /**\n   * Recursively retrieve every elements contained within an rectangular area\n   * that may or may not be axis-aligned.\n   *\n   * @param  {object|array} rectData       The searched area defined either by\n   *                                       an array of four corners (x, y) in\n   *                                       the case of a non-axis-aligned\n   *                                       rectangle or an object with two top\n   *                                       points (x1, y1), (x2, y2) and height.\n   * @param  {object}       quad           The searched quad.\n   * @param  {function}     collisionFunc  The collision function used to search\n   *                                       for node indexes.\n   * @param  {array?}       els            The retrieved elements.\n   * @return {array}                       An array of elements contained in the\n   *                                       area.\n   */\n  function _quadRetrieveArea(rectData, quad, collisionFunc, els) {\n    els = els || {};\n\n    if (quad.level < quad.maxLevel) {\n      var indexes = collisionFunc(rectData, quad.corners);\n\n      for (var i = 0, l = indexes.length; i < l; i++)\n        if (quad.nodes[indexes[i]] !== undefined)\n          _quadRetrieveArea(\n            rectData,\n            quad.nodes[indexes[i]],\n            collisionFunc,\n            els\n          );\n    } else\n      for (var j = 0, m = quad.elements.length; j < m; j++)\n        if (els[quad.elements[j].id] === undefined)\n          els[quad.elements[j].id] = quad.elements[j];\n\n    return els;\n  }\n\n  /**\n   * Creates the quadtree object itself.\n   *\n   * @param  {object}   bounds       The boundaries of the quad defined by an\n   *                                 origin (x, y), width and heigth.\n   * @param  {integer}  level        The level of the quad in the tree.\n   * @param  {integer}  maxElements  The max number of element in a leaf node.\n   * @param  {integer}  maxLevel     The max recursion level of the tree.\n   * @return {object}                The quadtree object.\n   */\n  function _quadTree(bounds, level, maxElements, maxLevel) {\n    return {\n      level: level || 0,\n      bounds: bounds,\n      corners: _geom.splitSquare(bounds),\n      maxElements: maxElements || 20,\n      maxLevel: maxLevel || 4,\n      elements: [],\n      nodes: []\n    };\n  }\n\n\n  /**\n   * Sigma Quad Constructor\n   * ----------------------\n   *\n   * The quad API as exposed to sigma.\n   */\n\n  /**\n   * The quad core that will become the sigma interface with the quadtree.\n   *\n   * property {object} _tree  Property holding the quadtree object.\n   * property {object} _geom  Exposition of the _geom namespace for testing.\n   * property {object} _cache Cache for the area method.\n   */\n  var quad = function() {\n    this._geom = _geom;\n    this._tree = null;\n    this._cache = {\n      query: false,\n      result: false\n    };\n  };\n\n  /**\n   * Index a graph by inserting its nodes into the quadtree.\n   *\n   * @param  {array}  nodes   An array of nodes to index.\n   * @param  {object} params  An object of parameters with at least the quad\n   *                          bounds.\n   * @return {object}         The quadtree object.\n   *\n   * Parameters:\n   * ----------\n   * bounds:      {object}   boundaries of the quad defined by its origin (x, y)\n   *                         width and heigth.\n   * prefix:      {string?}  a prefix for node geometric attributes.\n   * maxElements: {integer?} the max number of elements in a leaf node.\n   * maxLevel:    {integer?} the max recursion level of the tree.\n   */\n  quad.prototype.index = function(nodes, params) {\n\n    // Enforcing presence of boundaries\n    if (!params.bounds)\n      throw 'sigma.classes.quad.index: bounds information not given.';\n\n    // Prefix\n    var prefix = params.prefix || '';\n\n    // Building the tree\n    this._tree = _quadTree(\n      params.bounds,\n      0,\n      params.maxElements,\n      params.maxLevel\n    );\n\n    // Inserting graph nodes into the tree\n    for (var i = 0, l = nodes.length; i < l; i++) {\n\n      // Inserting node\n      _quadInsert(\n        nodes[i],\n        _geom.pointToSquare({\n          x: nodes[i][prefix + 'x'],\n          y: nodes[i][prefix + 'y'],\n          size: nodes[i][prefix + 'size']\n        }),\n        this._tree\n      );\n    }\n\n    // Reset cache:\n    this._cache = {\n      query: false,\n      result: false\n    };\n\n    // remove?\n    return this._tree;\n  };\n\n  /**\n   * Retrieve every graph nodes held by the quadtree node containing the\n   * searched point.\n   *\n   * @param  {number} x of the point.\n   * @param  {number} y of the point.\n   * @return {array}  An array of nodes retrieved.\n   */\n  quad.prototype.point = function(x, y) {\n    return this._tree ?\n      _quadRetrievePoint({x: x, y: y}, this._tree) || [] :\n      [];\n  };\n\n  /**\n   * Retrieve every graph nodes within a rectangular area. The methods keep the\n   * last area queried in cache for optimization reason and will act differently\n   * for the same reason if the area is axis-aligned or not.\n   *\n   * @param  {object} A rectangle defined by two top points (x1, y1), (x2, y2)\n   *                  and height.\n   * @return {array}  An array of nodes retrieved.\n   */\n  quad.prototype.area = function(rect) {\n    var serialized = JSON.stringify(rect),\n        collisionFunc,\n        rectData;\n\n    // Returning cache?\n    if (this._cache.query === serialized)\n      return this._cache.result;\n\n    // Axis aligned ?\n    if (_geom.isAxisAligned(rect)) {\n      collisionFunc = _quadIndexes;\n      rectData = _geom.axisAlignedTopPoints(rect);\n    }\n    else {\n      collisionFunc = _quadCollision;\n      rectData = _geom.rectangleCorners(rect);\n    }\n\n    // Retrieving nodes\n    var nodes = this._tree ?\n      _quadRetrieveArea(\n        rectData,\n        this._tree,\n        collisionFunc\n      ) :\n      [];\n\n    // Object to array\n    var nodesArray = [];\n    for (var i in nodes)\n      nodesArray.push(nodes[i]);\n\n    // Caching\n    this._cache.query = serialized;\n    this._cache.result = nodesArray;\n\n    return nodesArray;\n  };\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined') {\n    this.sigma.classes = this.sigma.classes || {};\n    this.sigma.classes.quad = quad;\n  } else if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = quad;\n    exports.quad = quad;\n  } else\n    this.quad = quad;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 42:\n/***/ function(module, exports, __webpack_require__) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/**\n * conrad.js is a tiny JavaScript jobs scheduler,\n *\n * Version: 0.1.0\n * Sources: http://github.com/jacomyal/conrad.js\n * Doc:     http://github.com/jacomyal/conrad.js#readme\n *\n * License:\n * --------\n * Copyright © 2013 Alexis Jacomy, Sciences-Po médialab\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * The Software is provided \"as is\", without warranty of any kind, express or\n * implied, including but not limited to the warranties of merchantability,\n * fitness for a particular purpose and noninfringement. In no event shall the\n * authors or copyright holders be liable for any claim, damages or other\n * liability, whether in an action of contract, tort or otherwise, arising\n * from, out of or in connection with the software or the use or other dealings\n * in the Software.\n */\n(function(global) {\n  'use strict';\n\n  // Check that conrad.js has not been loaded yet:\n  if (global.conrad)\n    throw new Error('conrad already exists');\n\n\n  /**\n   * PRIVATE VARIABLES:\n   * ******************\n   */\n\n  /**\n   * A flag indicating whether conrad is running or not.\n   *\n   * @type {Number}\n   */\n  var _lastFrameTime;\n\n  /**\n   * A flag indicating whether conrad is running or not.\n   *\n   * @type {Boolean}\n   */\n  var _isRunning = false;\n\n  /**\n   * The hash of registered jobs. Each job must at least have a unique ID\n   * under the key \"id\" and a function under the key \"job\". This hash\n   * contains each running job and each waiting job.\n   *\n   * @type {Object}\n   */\n  var _jobs = {};\n\n  /**\n   * The hash of currently running jobs.\n   *\n   * @type {Object}\n   */\n  var _runningJobs = {};\n\n  /**\n   * The array of currently running jobs, sorted by priority.\n   *\n   * @type {Array}\n   */\n  var _sortedByPriorityJobs = [];\n\n  /**\n   * The array of currently waiting jobs.\n   *\n   * @type {Object}\n   */\n  var _waitingJobs = {};\n\n  /**\n   * The array of finished jobs. They are stored in an array, since two jobs\n   * with the same \"id\" can happen at two different times.\n   *\n   * @type {Array}\n   */\n  var _doneJobs = [];\n\n  /**\n   * A dirty flag to keep conrad from starting: Indeed, when addJob() is called\n   * with several jobs, conrad must be started only at the end. This flag keeps\n   * me from duplicating the code that effectively adds a job.\n   *\n   * @type {Boolean}\n   */\n  var _noStart = false;\n\n  /**\n   * An hash containing some global settings about how conrad.js should\n   * behave.\n   *\n   * @type {Object}\n   */\n  var _parameters = {\n    frameDuration: 20,\n    history: true\n  };\n\n  /**\n   * This object contains every handlers bound to conrad events. It does not\n   * requirea any DOM implementation, since the events are all JavaScript.\n   *\n   * @type {Object}\n   */\n  var _handlers = Object.create(null);\n\n\n  /**\n   * PRIVATE FUNCTIONS:\n   * ******************\n   */\n\n  /**\n   * Will execute the handler everytime that the indicated event (or the\n   * indicated events) will be triggered.\n   *\n   * @param  {string|array|object} events  The name of the event (or the events\n   *                                       separated by spaces).\n   * @param  {function(Object)}    handler The handler to bind.\n   * @return {Object}                      Returns conrad.\n   */\n  function _bind(events, handler) {\n    var i,\n        i_end,\n        event,\n        eArray;\n\n    if (!arguments.length)\n      return;\n    else if (\n      arguments.length === 1 &&\n      Object(arguments[0]) === arguments[0]\n    )\n      for (events in arguments[0])\n        _bind(events, arguments[0][events]);\n    else if (arguments.length > 1) {\n      eArray =\n        Array.isArray(events) ?\n          events :\n          events.split(/ /);\n\n      for (i = 0, i_end = eArray.length; i !== i_end; i += 1) {\n        event = eArray[i];\n\n        if (!_handlers[event])\n          _handlers[event] = [];\n\n        // Using an object instead of directly the handler will make possible\n        // later to add flags\n        _handlers[event].push({\n          handler: handler\n        });\n      }\n    }\n  }\n\n  /**\n   * Removes the handler from a specified event (or specified events).\n   *\n   * @param  {?string}           events  The name of the event (or the events\n   *                                     separated by spaces). If undefined,\n   *                                     then all handlers are removed.\n   * @param  {?function(Object)} handler The handler to unbind. If undefined,\n   *                                     each handler bound to the event or the\n   *                                     events will be removed.\n   * @return {Object}            Returns conrad.\n   */\n  function _unbind(events, handler) {\n    var i,\n        i_end,\n        j,\n        j_end,\n        a,\n        event,\n        eArray = Array.isArray(events) ?\n                   events :\n                   events.split(/ /);\n\n    if (!arguments.length)\n      _handlers = Object.create(null);\n    else if (handler) {\n      for (i = 0, i_end = eArray.length; i !== i_end; i += 1) {\n        event = eArray[i];\n        if (_handlers[event]) {\n          a = [];\n          for (j = 0, j_end = _handlers[event].length; j !== j_end; j += 1)\n            if (_handlers[event][j].handler !== handler)\n              a.push(_handlers[event][j]);\n\n          _handlers[event] = a;\n        }\n\n        if (_handlers[event] && _handlers[event].length === 0)\n          delete _handlers[event];\n      }\n    } else\n      for (i = 0, i_end = eArray.length; i !== i_end; i += 1)\n        delete _handlers[eArray[i]];\n  }\n\n  /**\n   * Executes each handler bound to the event.\n   *\n   * @param  {string}  events The name of the event (or the events separated\n   *                          by spaces).\n   * @param  {?Object} data   The content of the event (optional).\n   * @return {Object}         Returns conrad.\n   */\n  function _dispatch(events, data) {\n    var i,\n        j,\n        i_end,\n        j_end,\n        event,\n        eventName,\n        eArray = Array.isArray(events) ?\n                   events :\n                   events.split(/ /);\n\n    data = data === undefined ? {} : data;\n\n    for (i = 0, i_end = eArray.length; i !== i_end; i += 1) {\n      eventName = eArray[i];\n\n      if (_handlers[eventName]) {\n        event = {\n          type: eventName,\n          data: data || {}\n        };\n\n        for (j = 0, j_end = _handlers[eventName].length; j !== j_end; j += 1)\n          try {\n            _handlers[eventName][j].handler(event);\n          } catch (e) {}\n      }\n    }\n  }\n\n  /**\n   * Executes the most prioritary job once, and deals with filling the stats\n   * (done, time, averageTime, currentTime, etc...).\n   *\n   * @return {?Object} Returns the job object if it has to be killed, null else.\n   */\n  function _executeFirstJob() {\n    var i,\n        l,\n        test,\n        kill,\n        pushed = false,\n        time = __dateNow(),\n        job = _sortedByPriorityJobs.shift();\n\n    // Execute the job and look at the result:\n    test = job.job();\n\n    // Deal with stats:\n    time = __dateNow() - time;\n    job.done++;\n    job.time += time;\n    job.currentTime += time;\n    job.weightTime = job.currentTime / (job.weight || 1);\n    job.averageTime = job.time / job.done;\n\n    // Check if the job has to be killed:\n    kill = job.count ? (job.count <= job.done) : !test;\n\n    // Reset priorities:\n    if (!kill) {\n      for (i = 0, l = _sortedByPriorityJobs.length; i < l; i++)\n        if (_sortedByPriorityJobs[i].weightTime > job.weightTime) {\n          _sortedByPriorityJobs.splice(i, 0, job);\n          pushed = true;\n          break;\n        }\n\n      if (!pushed)\n        _sortedByPriorityJobs.push(job);\n    }\n\n    return kill ? job : null;\n  }\n\n  /**\n   * Activates a job, by adding it to the _runningJobs object and the\n   * _sortedByPriorityJobs array. It also initializes its currentTime value.\n   *\n   * @param  {Object} job The job to activate.\n   */\n  function _activateJob(job) {\n    var l = _sortedByPriorityJobs.length;\n\n    // Add the job to the running jobs:\n    _runningJobs[job.id] = job;\n    job.status = 'running';\n\n    // Add the job to the priorities:\n    if (l) {\n      job.weightTime = _sortedByPriorityJobs[l - 1].weightTime;\n      job.currentTime = job.weightTime * (job.weight || 1);\n    }\n\n    // Initialize the job and dispatch:\n    job.startTime = __dateNow();\n    _dispatch('jobStarted', __clone(job));\n\n    _sortedByPriorityJobs.push(job);\n  }\n\n  /**\n   * The main loop of conrad.js:\n   *  . It executes job such that they all occupate the same processing time.\n   *  . It stops jobs that do not need to be executed anymore.\n   *  . It triggers callbacks when it is relevant.\n   *  . It starts waiting jobs when they need to be started.\n   *  . It injects frames to keep a constant frapes per second ratio.\n   *  . It stops itself when there are no more jobs to execute.\n   */\n  function _loop() {\n    var k,\n        o,\n        l,\n        job,\n        time,\n        deadJob;\n\n    // Deal with the newly added jobs (the _jobs object):\n    for (k in _jobs) {\n      job = _jobs[k];\n\n      if (job.after)\n        _waitingJobs[k] = job;\n      else\n        _activateJob(job);\n\n      delete _jobs[k];\n    }\n\n    // Set the _isRunning flag to false if there are no running job:\n    _isRunning = !!_sortedByPriorityJobs.length;\n\n    // Deal with the running jobs (the _runningJobs object):\n    while (\n      _sortedByPriorityJobs.length &&\n      __dateNow() - _lastFrameTime < _parameters.frameDuration\n    ) {\n      deadJob = _executeFirstJob();\n\n      // Deal with the case where the job has ended:\n      if (deadJob) {\n        _killJob(deadJob.id);\n\n        // Check for waiting jobs:\n        for (k in _waitingJobs)\n          if (_waitingJobs[k].after === deadJob.id) {\n            _activateJob(_waitingJobs[k]);\n            delete _waitingJobs[k];\n          }\n      }\n    }\n\n    // Check if conrad still has jobs to deal with, and kill it if not:\n    if (_isRunning) {\n      // Update the _lastFrameTime:\n      _lastFrameTime = __dateNow();\n\n      _dispatch('enterFrame');\n      setTimeout(_loop, 0);\n    } else\n      _dispatch('stop');\n  }\n\n  /**\n   * Adds one or more jobs, and starts the loop if no job was running before. A\n   * job is at least a unique string \"id\" and a function, and there are some\n   * parameters that you can specify for each job to modify the way conrad will\n   * execute it. If a job is added with the \"id\" of another job that is waiting\n   * or still running, an error will be thrown.\n   *\n   * When a job is added, it is referenced in the _jobs object, by its id.\n   * Then, if it has to be executed right now, it will be also referenced in\n   * the _runningJobs object. If it has to wait, then it will be added into the\n   * _waitingJobs object, until it can start.\n   *\n   * Keep reading this documentation to see how to call this method.\n   *\n   * @return {Object} Returns conrad.\n   *\n   * Adding one job:\n   * ***************\n   * Basically, a job is defined by its string id and a function (the job). It\n   * is also possible to add some parameters:\n   *\n   *  > conrad.addJob('myJobId', myJobFunction);\n   *  > conrad.addJob('myJobId', {\n   *  >   job: myJobFunction,\n   *  >   someParameter: someValue\n   *  > });\n   *  > conrad.addJob({\n   *  >   id: 'myJobId',\n   *  >   job: myJobFunction,\n   *  >   someParameter: someValue\n   *  > });\n   *\n   * Adding several jobs:\n   * ********************\n   * When adding several jobs at the same time, it is possible to specify\n   * parameters for each one individually or for all:\n   *\n   *  > conrad.addJob([\n   *  >   {\n   *  >     id: 'myJobId1',\n   *  >     job: myJobFunction1,\n   *  >     someParameter1: someValue1\n   *  >   },\n   *  >   {\n   *  >     id: 'myJobId2',\n   *  >     job: myJobFunction2,\n   *  >     someParameter2: someValue2\n   *  >   }\n   *  > ], {\n   *  >   someCommonParameter: someCommonValue\n   *  > });\n   *  > conrad.addJob({\n   *  >   myJobId1: {,\n   *  >     job: myJobFunction1,\n   *  >     someParameter1: someValue1\n   *  >   },\n   *  >   myJobId2: {,\n   *  >     job: myJobFunction2,\n   *  >     someParameter2: someValue2\n   *  >   }\n   *  > }, {\n   *  >   someCommonParameter: someCommonValue\n   *  > });\n   *  > conrad.addJob({\n   *  >   myJobId1: myJobFunction1,\n   *  >   myJobId2: myJobFunction2\n   *  > }, {\n   *  >   someCommonParameter: someCommonValue\n   *  > });\n   *\n   *  Recognized parameters:\n   *  **********************\n   *  Here is the exhaustive list of every accepted parameters:\n   *\n   *    {?Function} end      A callback to execute when the job is ended. It is\n   *                         not executed if the job is killed instead of ended\n   *                         \"naturally\".\n   *    {?Integer}  count    The number of time the job has to be executed.\n   *    {?Number}   weight   If specified, the job will be executed as it was\n   *                         added \"weight\" times.\n   *    {?String}   after    The id of another job (eventually not added yet).\n   *                         If specified, this job will start only when the\n   *                         specified \"after\" job is ended.\n   */\n  function _addJob(v1, v2) {\n    var i,\n        l,\n        o;\n\n    // Array of jobs:\n    if (Array.isArray(v1)) {\n      // Keep conrad to start until the last job is added:\n      _noStart = true;\n\n      for (i = 0, l = v1.length; i < l; i++)\n        _addJob(v1[i].id, __extend(v1[i], v2));\n\n      _noStart = false;\n      if (!_isRunning) {\n        // Update the _lastFrameTime:\n        _lastFrameTime = __dateNow();\n\n        _dispatch('start');\n        _loop();\n      }\n    } else if (typeof v1 === 'object') {\n      // One job (object):\n      if (typeof v1.id === 'string')\n        _addJob(v1.id, v1);\n\n      // Hash of jobs:\n      else {\n        // Keep conrad to start until the last job is added:\n        _noStart = true;\n\n        for (i in v1)\n          if (typeof v1[i] === 'function')\n            _addJob(i, __extend({\n              job: v1[i]\n            }, v2));\n          else\n            _addJob(i, __extend(v1[i], v2));\n\n        _noStart = false;\n        if (!_isRunning) {\n          // Update the _lastFrameTime:\n          _lastFrameTime = __dateNow();\n\n          _dispatch('start');\n          _loop();\n        }\n      }\n\n    // One job (string, *):\n    } else if (typeof v1 === 'string') {\n      if (_hasJob(v1))\n        throw new Error(\n          '[conrad.addJob] Job with id \"' + v1 + '\" already exists.'\n        );\n\n      // One job (string, function):\n      if (typeof v2 === 'function') {\n        o = {\n          id: v1,\n          done: 0,\n          time: 0,\n          status: 'waiting',\n          currentTime: 0,\n          averageTime: 0,\n          weightTime: 0,\n          job: v2\n        };\n\n      // One job (string, object):\n      } else if (typeof v2 === 'object') {\n        o = __extend(\n          {\n            id: v1,\n            done: 0,\n            time: 0,\n            status: 'waiting',\n            currentTime: 0,\n            averageTime: 0,\n            weightTime: 0\n          },\n          v2\n        );\n\n      // If none of those cases, throw an error:\n      } else\n        throw new Error('[conrad.addJob] Wrong arguments.');\n\n      // Effectively add the job:\n      _jobs[v1] = o;\n      _dispatch('jobAdded', __clone(o));\n\n      // Check if the loop has to be started:\n      if (!_isRunning && !_noStart) {\n        // Update the _lastFrameTime:\n        _lastFrameTime = __dateNow();\n\n        _dispatch('start');\n        _loop();\n      }\n\n    // If none of those cases, throw an error:\n    } else\n      throw new Error('[conrad.addJob] Wrong arguments.');\n\n    return this;\n  }\n\n  /**\n   * Kills one or more jobs, indicated by their ids. It is only possible to\n   * kill running jobs or waiting jobs. If you try to kill a job that does not\n   * exist or that is already killed, a warning will be thrown.\n   *\n   * @param  {Array|String} v1 A string job id or an array of job ids.\n   * @return {Object}       Returns conrad.\n   */\n  function _killJob(v1) {\n    var i,\n        l,\n        k,\n        a,\n        job,\n        found = false;\n\n    // Array of job ids:\n    if (Array.isArray(v1))\n      for (i = 0, l = v1.length; i < l; i++)\n        _killJob(v1[i]);\n\n    // One job's id:\n    else if (typeof v1 === 'string') {\n      a = [_runningJobs, _waitingJobs, _jobs];\n\n      // Remove the job from the hashes:\n      for (i = 0, l = a.length; i < l; i++)\n        if (v1 in a[i]) {\n          job = a[i][v1];\n\n          if (_parameters.history) {\n            job.status = 'done';\n            _doneJobs.push(job);\n          }\n\n          _dispatch('jobEnded', __clone(job));\n          delete a[i][v1];\n\n          if (typeof job.end === 'function')\n            job.end();\n\n          found = true;\n        }\n\n      // Remove the priorities array:\n      a = _sortedByPriorityJobs;\n      for (i = 0, l = a.length; i < l; i++)\n        if (a[i].id === v1) {\n          a.splice(i, 1);\n          break;\n        }\n\n      if (!found)\n        throw new Error('[conrad.killJob] Job \"' + v1 + '\" not found.');\n\n    // If none of those cases, throw an error:\n    } else\n      throw new Error('[conrad.killJob] Wrong arguments.');\n\n    return this;\n  }\n\n  /**\n   * Kills every running, waiting, and just added jobs.\n   *\n   * @return {Object} Returns conrad.\n   */\n  function _killAll() {\n    var k,\n        jobs = __extend(_jobs, _runningJobs, _waitingJobs);\n\n    // Take every jobs and push them into the _doneJobs object:\n    if (_parameters.history)\n      for (k in jobs) {\n        jobs[k].status = 'done';\n        _doneJobs.push(jobs[k]);\n\n        if (typeof jobs[k].end === 'function')\n          jobs[k].end();\n      }\n\n    // Reinitialize the different jobs lists:\n    _jobs = {};\n    _waitingJobs = {};\n    _runningJobs = {};\n    _sortedByPriorityJobs = [];\n\n    // In case some jobs are added right after the kill:\n    _isRunning = false;\n\n    return this;\n  }\n\n  /**\n   * Returns true if a job with the specified id is currently running or\n   * waiting, and false else.\n   *\n   * @param  {String}  id The id of the job.\n   * @return {?Object} Returns the job object if it exists.\n   */\n  function _hasJob(id) {\n    var job = _jobs[id] || _runningJobs[id] || _waitingJobs[id];\n    return job ? __extend(job) : null;\n  }\n\n  /**\n   * This method will set the setting specified by \"v1\" to the value specified\n   * by \"v2\" if both are given, and else return the current value of the\n   * settings \"v1\".\n   *\n   * @param  {String}   v1 The name of the property.\n   * @param  {?*}       v2 Eventually, a value to set to the specified\n   *                       property.\n   * @return {Object|*} Returns the specified settings value if \"v2\" is not\n   *                    given, and conrad else.\n   */\n  function _settings(v1, v2) {\n    var o;\n\n    if (typeof a1 === 'string' && arguments.length === 1)\n      return _parameters[a1];\n    else {\n      o = (typeof a1 === 'object' && arguments.length === 1) ?\n        a1 || {} :\n        {};\n      if (typeof a1 === 'string')\n        o[a1] = a2;\n\n      for (var k in o)\n        if (o[k] !== undefined)\n          _parameters[k] = o[k];\n        else\n          delete _parameters[k];\n\n      return this;\n    }\n  }\n\n  /**\n   * Returns true if conrad is currently running, and false else.\n   *\n   * @return {Boolean} Returns _isRunning.\n   */\n  function _getIsRunning() {\n    return _isRunning;\n  }\n\n  /**\n   * Unreference every job that is stored in the _doneJobs object. It will\n   * not be possible anymore to get stats about these jobs, but it will release\n   * the memory.\n   *\n   * @return {Object} Returns conrad.\n   */\n  function _clearHistory() {\n    _doneJobs = [];\n    return this;\n  }\n\n  /**\n   * Returns a snapshot of every data about jobs that wait to be started, are\n   * currently running or are done.\n   *\n   * It is possible to get only running, waiting or done jobs by giving\n   * \"running\", \"waiting\" or \"done\" as fist argument.\n   *\n   * It is also possible to get every job with a specified id by giving it as\n   * first argument. Also, using a RegExp instead of an id will return every\n   * jobs whose ids match the RegExp. And these two last use cases work as well\n   * by giving before \"running\", \"waiting\" or \"done\".\n   *\n   * @return {Array} The array of the matching jobs.\n   *\n   * Some call examples:\n   * *******************\n   *  > conrad.getStats('running')\n   *  > conrad.getStats('waiting')\n   *  > conrad.getStats('done')\n   *  > conrad.getStats('myJob')\n   *  > conrad.getStats(/test/)\n   *  > conrad.getStats('running', 'myRunningJob')\n   *  > conrad.getStats('running', /test/)\n   */\n  function _getStats(v1, v2) {\n    var a,\n        k,\n        i,\n        l,\n        stats,\n        pattern,\n        isPatternString;\n\n    if (!arguments.length) {\n      stats = [];\n\n      for (k in _jobs)\n        stats.push(_jobs[k]);\n\n      for (k in _waitingJobs)\n        stats.push(_waitingJobs[k]);\n\n      for (k in _runningJobs)\n        stats.push(_runningJobs[k]);\n\n      stats = stats.concat(_doneJobs);\n    }\n\n    if (typeof v1 === 'string')\n      switch (v1) {\n        case 'waiting':\n          stats = __objectValues(_waitingJobs);\n          break;\n        case 'running':\n          stats = __objectValues(_runningJobs);\n          break;\n        case 'done':\n          stats = _doneJobs;\n          break;\n        default:\n          pattern = v1;\n      }\n\n    if (v1 instanceof RegExp)\n      pattern = v1;\n\n    if (!pattern && (typeof v2 === 'string' || v2 instanceof RegExp))\n      pattern = v2;\n\n    // Filter jobs if a pattern is given:\n    if (pattern) {\n      isPatternString = typeof pattern === 'string';\n\n      if (stats instanceof Array) {\n        a = stats;\n      } else if (typeof stats === 'object') {\n        a = [];\n\n        for (k in stats)\n          a = a.concat(stats[k]);\n      } else {\n        a = [];\n\n        for (k in _jobs)\n          a.push(_jobs[k]);\n\n        for (k in _waitingJobs)\n          a.push(_waitingJobs[k]);\n\n        for (k in _runningJobs)\n          a.push(_runningJobs[k]);\n\n        a = a.concat(_doneJobs);\n      }\n\n      stats = [];\n      for (i = 0, l = a.length; i < l; i++)\n        if (isPatternString ? a[i].id === pattern : a[i].id.match(pattern))\n          stats.push(a[i]);\n    }\n\n    return __clone(stats);\n  }\n\n\n  /**\n   * TOOLS FUNCTIONS:\n   * ****************\n   */\n\n  /**\n   * This function takes any number of objects as arguments, copies from each\n   * of these objects each pair key/value into a new object, and finally\n   * returns this object.\n   *\n   * The arguments are parsed from the last one to the first one, such that\n   * when two objects have keys in common, the \"earliest\" object wins.\n   *\n   * Example:\n   * ********\n   *  > var o1 = {\n   *  >       a: 1,\n   *  >       b: 2,\n   *  >       c: '3'\n   *  >     },\n   *  >     o2 = {\n   *  >       c: '4',\n   *  >       d: [ 5 ]\n   *  >     };\n   *  > __extend(o1, o2);\n   *  > // Returns: {\n   *  > //   a: 1,\n   *  > //   b: 2,\n   *  > //   c: '3',\n   *  > //   d: [ 5 ]\n   *  > // };\n   *\n   * @param  {Object+} Any number of objects.\n   * @return {Object}  The merged object.\n   */\n  function __extend() {\n    var i,\n        k,\n        res = {},\n        l = arguments.length;\n\n    for (i = l - 1; i >= 0; i--)\n      for (k in arguments[i])\n        res[k] = arguments[i][k];\n\n    return res;\n  }\n\n  /**\n   * This function simply clones an object. This object must contain only\n   * objects, arrays and immutable values. Since it is not public, it does not\n   * deal with cyclic references, DOM elements and instantiated objects - so\n   * use it carefully.\n   *\n   * @param  {Object} The object to clone.\n   * @return {Object} The clone.\n   */\n  function __clone(item) {\n    var result, i, k, l;\n\n    if (!item)\n      return item;\n\n    if (Array.isArray(item)) {\n      result = [];\n      for (i = 0, l = item.length; i < l; i++)\n        result.push(__clone(item[i]));\n    } else if (typeof item === 'object') {\n      result = {};\n      for (i in item)\n        result[i] = __clone(item[i]);\n    } else\n      result = item;\n\n    return result;\n  }\n\n  /**\n   * Returns an array containing the values of an object.\n   *\n   * @param  {Object} The object.\n   * @return {Array}  The array of values.\n   */\n  function __objectValues(o) {\n    var k,\n        a = [];\n\n    for (k in o)\n      a.push(o[k]);\n\n    return a;\n  }\n\n  /**\n   * A short \"Date.now()\" polyfill.\n   *\n   * @return {Number} The current time (in ms).\n   */\n  function __dateNow() {\n    return Date.now ? Date.now() : new Date().getTime();\n  }\n\n  /**\n   * Polyfill for the Array.isArray function:\n   */\n  if (!Array.isArray)\n    Array.isArray = function(v) {\n      return Object.prototype.toString.call(v) === '[object Array]';\n    };\n\n\n  /**\n   * EXPORT PUBLIC API:\n   * ******************\n   */\n  var conrad = {\n    hasJob: _hasJob,\n    addJob: _addJob,\n    killJob: _killJob,\n    killAll: _killAll,\n    settings: _settings,\n    getStats: _getStats,\n    isRunning: _getIsRunning,\n    clearHistory: _clearHistory,\n\n    // Events management:\n    bind: _bind,\n    unbind: _unbind,\n\n    // Version:\n    version: '0.1.0'\n  };\n\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports)\n      exports = module.exports = conrad;\n    exports.conrad = conrad;\n  }\n  global.conrad = conrad;\n})(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 43:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.middlewares');\n\n  /**\n   * This middleware will just copy the graphic properties.\n   *\n   * @param {?string} readPrefix  The read prefix.\n   * @param {?string} writePrefix The write prefix.\n   */\n  sigma.middlewares.copy = function(readPrefix, writePrefix) {\n    var i,\n        l,\n        a;\n\n    if (writePrefix + '' === readPrefix + '')\n      return;\n\n    a = this.graph.nodes();\n    for (i = 0, l = a.length; i < l; i++) {\n      a[i][writePrefix + 'x'] = a[i][readPrefix + 'x'];\n      a[i][writePrefix + 'y'] = a[i][readPrefix + 'y'];\n      a[i][writePrefix + 'size'] = a[i][readPrefix + 'size'];\n    }\n\n    a = this.graph.edges();\n    for (i = 0, l = a.length; i < l; i++)\n      a[i][writePrefix + 'size'] = a[i][readPrefix + 'size'];\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 44:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.middlewares');\n  sigma.utils.pkg('sigma.utils');\n\n  /**\n   * This middleware will rescale the graph such that it takes an optimal space\n   * on the renderer.\n   *\n   * As each middleware, this function is executed in the scope of the sigma\n   * instance.\n   *\n   * @param {?string} readPrefix  The read prefix.\n   * @param {?string} writePrefix The write prefix.\n   * @param {object}  options     The parameters.\n   */\n  sigma.middlewares.rescale = function(readPrefix, writePrefix, options) {\n    var i,\n        l,\n        a,\n        b,\n        c,\n        d,\n        scale,\n        margin,\n        n = this.graph.nodes(),\n        e = this.graph.edges(),\n        settings = this.settings.embedObjects(options || {}),\n        bounds = settings('bounds') || sigma.utils.getBoundaries(\n          this.graph,\n          readPrefix,\n          true\n        ),\n        minX = bounds.minX,\n        minY = bounds.minY,\n        maxX = bounds.maxX,\n        maxY = bounds.maxY,\n        sizeMax = bounds.sizeMax,\n        weightMax = bounds.weightMax,\n        w = settings('width') || 1,\n        h = settings('height') || 1,\n        rescaleSettings = settings('autoRescale'),\n        validSettings = {\n          nodePosition: 1,\n          nodeSize: 1,\n          edgeSize: 1\n        };\n\n    /**\n     * What elements should we rescale?\n     */\n    if (!(rescaleSettings instanceof Array))\n      rescaleSettings = ['nodePosition', 'nodeSize', 'edgeSize'];\n\n    for (i = 0, l = rescaleSettings.length; i < l; i++)\n      if (!validSettings[rescaleSettings[i]])\n        throw new Error(\n          'The rescale setting \"' + rescaleSettings[i] + '\" is not recognized.'\n        );\n\n    var np = ~rescaleSettings.indexOf('nodePosition'),\n        ns = ~rescaleSettings.indexOf('nodeSize'),\n        es = ~rescaleSettings.indexOf('edgeSize');\n\n    /**\n     * First, we compute the scaling ratio, without considering the sizes\n     * of the nodes : Each node will have its center in the canvas, but might\n     * be partially out of it.\n     */\n    scale = settings('scalingMode') === 'outside' ?\n      Math.max(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      ) :\n      Math.min(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      );\n\n    /**\n     * Then, we correct that scaling ratio considering a margin, which is\n     * basically the size of the biggest node.\n     * This has to be done as a correction since to compare the size of the\n     * biggest node to the X and Y values, we have to first get an\n     * approximation of the scaling ratio.\n     **/\n    margin =\n      (\n        settings('rescaleIgnoreSize') ?\n          0 :\n          (settings('maxNodeSize') || sizeMax) / scale\n      ) +\n      (settings('sideMargin') || 0);\n    maxX += margin;\n    minX -= margin;\n    maxY += margin;\n    minY -= margin;\n\n    // Fix the scaling with the new extrema:\n    scale = settings('scalingMode') === 'outside' ?\n      Math.max(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      ) :\n      Math.min(\n        w / Math.max(maxX - minX, 1),\n        h / Math.max(maxY - minY, 1)\n      );\n\n    // Size homothetic parameters:\n    if (!settings('maxNodeSize') && !settings('minNodeSize')) {\n      a = 1;\n      b = 0;\n    } else if (settings('maxNodeSize') === settings('minNodeSize')) {\n      a = 0;\n      b = +settings('maxNodeSize');\n    } else {\n      a = (settings('maxNodeSize') - settings('minNodeSize')) / sizeMax;\n      b = +settings('minNodeSize');\n    }\n\n    if (!settings('maxEdgeSize') && !settings('minEdgeSize')) {\n      c = 1;\n      d = 0;\n    } else if (settings('maxEdgeSize') === settings('minEdgeSize')) {\n      c = 0;\n      d = +settings('minEdgeSize');\n    } else {\n      c = (settings('maxEdgeSize') - settings('minEdgeSize')) / weightMax;\n      d = +settings('minEdgeSize');\n    }\n\n    // Rescale the nodes and edges:\n    for (i = 0, l = e.length; i < l; i++)\n      e[i][writePrefix + 'size'] =\n        e[i][readPrefix + 'size'] * (es ? c : 1) + (es ? d : 0);\n\n    for (i = 0, l = n.length; i < l; i++) {\n      n[i][writePrefix + 'size'] =\n        n[i][readPrefix + 'size'] * (ns ? a : 1) + (ns ? b : 0);\n      n[i][writePrefix + 'x'] =\n        (n[i][readPrefix + 'x'] - (maxX + minX) / 2) * (np ? scale : 1);\n      n[i][writePrefix + 'y'] =\n        (n[i][readPrefix + 'y'] - (maxY + minY) / 2) * (np ? scale : 1);\n    }\n  };\n\n  sigma.utils.getBoundaries = function(graph, prefix, doEdges) {\n    var i,\n        l,\n        e = graph.edges(),\n        n = graph.nodes(),\n        weightMax = -Infinity,\n        sizeMax = -Infinity,\n        minX = Infinity,\n        minY = Infinity,\n        maxX = -Infinity,\n        maxY = -Infinity;\n\n    if (doEdges)\n      for (i = 0, l = e.length; i < l; i++)\n        weightMax = Math.max(e[i][prefix + 'size'], weightMax);\n\n    for (i = 0, l = n.length; i < l; i++) {\n      sizeMax = Math.max(n[i][prefix + 'size'], sizeMax);\n      maxX = Math.max(n[i][prefix + 'x'], maxX);\n      minX = Math.min(n[i][prefix + 'x'], minX);\n      maxY = Math.max(n[i][prefix + 'y'], maxY);\n      minY = Math.min(n[i][prefix + 'y'], minY);\n    }\n\n    weightMax = weightMax || 1;\n    sizeMax = sizeMax || 1;\n\n    return {\n      weightMax: weightMax,\n      sizeMax: sizeMax,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 45:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc.animation.running');\n\n  /**\n   * Generates a unique ID for the animation.\n   *\n   * @return {string} Returns the new ID.\n   */\n  var _getID = (function() {\n    var id = 0;\n    return function() {\n      return '' + (++id);\n    };\n  })();\n\n  /**\n   * This function animates a camera. It has to be called with the camera to\n   * animate, the values of the coordinates to reach and eventually some\n   * options. It returns a number id, that you can use to kill the animation,\n   * with the method sigma.misc.animation.kill(id).\n   *\n   * The available options are:\n   *\n   *   {?number}            duration   The duration of the animation.\n   *   {?function}          onNewFrame A callback to execute when the animation\n   *                                   enter a new frame.\n   *   {?function}          onComplete A callback to execute when the animation\n   *                                   is completed or killed.\n   *   {?(string|function)} easing     The name of a function from the package\n   *                                   sigma.utils.easings, or a custom easing\n   *                                   function.\n   *\n   * @param  {camera}  camera  The camera to animate.\n   * @param  {object}  target  The coordinates to reach.\n   * @param  {?object} options Eventually an object to specify some options to\n   *                           the function. The available options are\n   *                           presented in the description of the function.\n   * @return {number}          The animation id, to make it easy to kill\n   *                           through the method \"sigma.misc.animation.kill\".\n   */\n  sigma.misc.animation.camera = function(camera, val, options) {\n    if (\n      !(camera instanceof sigma.classes.camera) ||\n      typeof val !== 'object' ||\n      !val\n    )\n      throw 'animation.camera: Wrong arguments.';\n\n    if (\n      typeof val.x !== 'number' &&\n      typeof val.y !== 'number' &&\n      typeof val.ratio !== 'number' &&\n      typeof val.angle !== 'number'\n    )\n      throw 'There must be at least one valid coordinate in the given val.';\n\n    var fn,\n        id,\n        anim,\n        easing,\n        duration,\n        initialVal,\n        o = options || {},\n        start = sigma.utils.dateNow();\n\n    // Store initial values:\n    initialVal = {\n      x: camera.x,\n      y: camera.y,\n      ratio: camera.ratio,\n      angle: camera.angle\n    };\n\n    duration = o.duration;\n    easing = typeof o.easing !== 'function' ?\n      sigma.utils.easings[o.easing || 'quadraticInOut'] :\n      o.easing;\n\n    fn = function() {\n      var coef,\n          t = o.duration ? (sigma.utils.dateNow() - start) / o.duration : 1;\n\n      // If the animation is over:\n      if (t >= 1) {\n        camera.isAnimated = false;\n        camera.goTo({\n          x: val.x !== undefined ? val.x : initialVal.x,\n          y: val.y !== undefined ? val.y : initialVal.y,\n          ratio: val.ratio !== undefined ? val.ratio : initialVal.ratio,\n          angle: val.angle !== undefined ? val.angle : initialVal.angle\n        });\n\n        cancelAnimationFrame(id);\n        delete sigma.misc.animation.running[id];\n\n        // Check callbacks:\n        if (typeof o.onComplete === 'function')\n          o.onComplete();\n\n      // Else, let's keep going:\n      } else {\n        coef = easing(t);\n        camera.isAnimated = true;\n        camera.goTo({\n          x: val.x !== undefined ?\n            initialVal.x + (val.x - initialVal.x) * coef :\n            initialVal.x,\n          y: val.y !== undefined ?\n            initialVal.y + (val.y - initialVal.y) * coef :\n            initialVal.y,\n          ratio: val.ratio !== undefined ?\n            initialVal.ratio + (val.ratio - initialVal.ratio) * coef :\n            initialVal.ratio,\n          angle: val.angle !== undefined ?\n            initialVal.angle + (val.angle - initialVal.angle) * coef :\n            initialVal.angle\n        });\n\n        // Check callbacks:\n        if (typeof o.onNewFrame === 'function')\n          o.onNewFrame();\n\n        anim.frameId = requestAnimationFrame(fn);\n      }\n    };\n\n    id = _getID();\n    anim = {\n      frameId: requestAnimationFrame(fn),\n      target: camera,\n      type: 'camera',\n      options: o,\n      fn: fn\n    };\n    sigma.misc.animation.running[id] = anim;\n\n    return id;\n  };\n\n  /**\n   * Kills a running animation. It triggers the eventual onComplete callback.\n   *\n   * @param  {number} id  The id of the animation to kill.\n   * @return {object}     Returns the sigma.misc.animation package.\n   */\n  sigma.misc.animation.kill = function(id) {\n    if (arguments.length !== 1 || typeof id !== 'number')\n      throw 'animation.kill: Wrong arguments.';\n\n    var o = sigma.misc.animation.running[id];\n\n    if (o) {\n      cancelAnimationFrame(id);\n      delete sigma.misc.animation.running[o.frameId];\n\n      if (o.type === 'camera')\n        o.target.isAnimated = false;\n\n      // Check callbacks:\n      if (typeof (o.options || {}).onComplete === 'function')\n        o.options.onComplete();\n    }\n\n    return this;\n  };\n\n  /**\n   * Kills every running animations, or only the one with the specified type,\n   * if a string parameter is given.\n   *\n   * @param  {?(string|object)} filter A string to filter the animations to kill\n   *                                   on their type (example: \"camera\"), or an\n   *                                   object to filter on their target.\n   * @return {number}                  Returns the number of animations killed\n   *                                   that way.\n   */\n  sigma.misc.animation.killAll = function(filter) {\n    var o,\n        id,\n        count = 0,\n        type = typeof filter === 'string' ? filter : null,\n        target = typeof filter === 'object' ? filter : null,\n        running = sigma.misc.animation.running;\n\n    for (id in running)\n      if (\n        (!type || running[id].type === type) &&\n        (!target || running[id].target === target)\n      ) {\n        o = sigma.misc.animation.running[id];\n        cancelAnimationFrame(o.frameId);\n        delete sigma.misc.animation.running[id];\n\n        if (o.type === 'camera')\n          o.target.isAnimated = false;\n\n        // Increment counter:\n        count++;\n\n        // Check callbacks:\n        if (typeof (o.options || {}).onComplete === 'function')\n          o.options.onComplete();\n      }\n\n    return count;\n  };\n\n  /**\n   * Returns \"true\" if any animation that is currently still running matches\n   * the filter given to the function.\n   *\n   * @param  {string|object} filter A string to filter the animations to kill\n   *                                on their type (example: \"camera\"), or an\n   *                                object to filter on their target.\n   * @return {boolean}              Returns true if any running animation\n   *                                matches.\n   */\n  sigma.misc.animation.has = function(filter) {\n    var id,\n        type = typeof filter === 'string' ? filter : null,\n        target = typeof filter === 'object' ? filter : null,\n        running = sigma.misc.animation.running;\n\n    for (id in running)\n      if (\n        (!type || running[id].type === type) &&\n        (!target || running[id].target === target)\n      )\n        return true;\n\n    return false;\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 46:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc');\n\n  /**\n   * This helper will bind any DOM renderer (for instance svg)\n   * to its captors, to properly dispatch the good events to the sigma instance\n   * to manage clicking, hovering etc...\n   *\n   * It has to be called in the scope of the related renderer.\n   */\n  sigma.misc.bindDOMEvents = function(container) {\n    var self = this,\n        graph = this.graph;\n\n    // DOMElement abstraction\n    function Element(domElement) {\n\n      // Helpers\n      this.attr = function(attrName) {\n        return domElement.getAttributeNS(null, attrName);\n      };\n\n      // Properties\n      this.tag = domElement.tagName;\n      this.class = this.attr('class');\n      this.id = this.attr('id');\n\n      // Methods\n      this.isNode = function() {\n        return !!~this.class.indexOf(self.settings('classPrefix') + '-node');\n      };\n\n      this.isEdge = function() {\n        return !!~this.class.indexOf(self.settings('classPrefix') + '-edge');\n      };\n\n      this.isHover = function() {\n        return !!~this.class.indexOf(self.settings('classPrefix') + '-hover');\n      };\n    }\n\n    // Click\n    function click(e) {\n      if (!self.settings('eventsEnabled'))\n        return;\n\n      // Generic event\n      self.dispatchEvent('click', e);\n\n      // Are we on a node?\n      var element = new Element(e.target);\n\n      if (element.isNode())\n        self.dispatchEvent('clickNode', {\n          node: graph.nodes(element.attr('data-node-id'))\n        });\n      else\n        self.dispatchEvent('clickStage');\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    // Double click\n    function doubleClick(e) {\n      if (!self.settings('eventsEnabled'))\n        return;\n\n      // Generic event\n      self.dispatchEvent('doubleClick', e);\n\n      // Are we on a node?\n      var element = new Element(e.target);\n\n      if (element.isNode())\n        self.dispatchEvent('doubleClickNode', {\n          node: graph.nodes(element.attr('data-node-id'))\n        });\n      else\n        self.dispatchEvent('doubleClickStage');\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    // On over\n    function onOver(e) {\n      var target = e.toElement || e.target;\n\n      if (!self.settings('eventsEnabled') || !target)\n        return;\n\n      var el = new Element(target);\n\n      if (el.isNode()) {\n        self.dispatchEvent('overNode', {\n          node: graph.nodes(el.attr('data-node-id'))\n        });\n      }\n      else if (el.isEdge()) {\n        var edge = graph.edges(el.attr('data-edge-id'));\n        self.dispatchEvent('overEdge', {\n          edge: edge,\n          source: graph.nodes(edge.source),\n          target: graph.nodes(edge.target)\n        });\n      }\n    }\n\n    // On out\n    function onOut(e) {\n      var target = e.fromElement || e.originalTarget;\n\n      if (!self.settings('eventsEnabled'))\n        return;\n\n      var el = new Element(target);\n\n      if (el.isNode()) {\n        self.dispatchEvent('outNode', {\n          node: graph.nodes(el.attr('data-node-id'))\n        });\n      }\n      else if (el.isEdge()) {\n        var edge = graph.edges(el.attr('data-edge-id'));\n        self.dispatchEvent('outEdge', {\n          edge: edge,\n          source: graph.nodes(edge.source),\n          target: graph.nodes(edge.target)\n        });\n      }\n    }\n\n    // Registering Events:\n\n    // Click\n    container.addEventListener('click', click, false);\n    sigma.utils.doubleClick(container, 'click', doubleClick);\n\n    // Touch counterparts\n    container.addEventListener('touchstart', click, false);\n    sigma.utils.doubleClick(container, 'touchstart', doubleClick);\n\n    // Mouseover\n    container.addEventListener('mouseover', onOver, true);\n\n    // Mouseout\n    container.addEventListener('mouseout', onOut, true);\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 47:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc');\n\n  /**\n   * This helper will bind any no-DOM renderer (for instance canvas or WebGL)\n   * to its captors, to properly dispatch the good events to the sigma instance\n   * to manage clicking, hovering etc...\n   *\n   * It has to be called in the scope of the related renderer.\n   */\n  sigma.misc.bindEvents = function(prefix) {\n    var i,\n        l,\n        mX,\n        mY,\n        captor,\n        self = this;\n\n    function getNodes(e) {\n      if (e) {\n        mX = 'x' in e.data ? e.data.x : mX;\n        mY = 'y' in e.data ? e.data.y : mY;\n      }\n\n      var i,\n          j,\n          l,\n          n,\n          x,\n          y,\n          s,\n          inserted,\n          selected = [],\n          modifiedX = mX + self.width / 2,\n          modifiedY = mY + self.height / 2,\n          point = self.camera.cameraPosition(\n            mX,\n            mY\n          ),\n          nodes = self.camera.quadtree.point(\n            point.x,\n            point.y\n          );\n\n      if (nodes.length)\n        for (i = 0, l = nodes.length; i < l; i++) {\n          n = nodes[i];\n          x = n[prefix + 'x'];\n          y = n[prefix + 'y'];\n          s = n[prefix + 'size'];\n\n          if (\n            !n.hidden &&\n            modifiedX > x - s &&\n            modifiedX < x + s &&\n            modifiedY > y - s &&\n            modifiedY < y + s &&\n            Math.sqrt(\n              Math.pow(modifiedX - x, 2) +\n              Math.pow(modifiedY - y, 2)\n            ) < s\n          ) {\n            // Insert the node:\n            inserted = false;\n\n            for (j = 0; j < selected.length; j++)\n              if (n.size > selected[j].size) {\n                selected.splice(j, 0, n);\n                inserted = true;\n                break;\n              }\n\n            if (!inserted)\n              selected.push(n);\n          }\n        }\n\n      return selected;\n    }\n\n\n    function getEdges(e) {\n      if (!self.settings('enableEdgeHovering')) {\n        // No event if the setting is off:\n        return [];\n      }\n\n      var isCanvas = (\n        sigma.renderers.canvas && self instanceof sigma.renderers.canvas);\n\n      if (!isCanvas) {\n        // A quick hardcoded rule to prevent people from using this feature\n        // with the WebGL renderer (which is not good enough at the moment):\n        throw new Error(\n          'The edge events feature is not compatible with the WebGL renderer'\n        );\n      }\n\n      if (e) {\n        mX = 'x' in e.data ? e.data.x : mX;\n        mY = 'y' in e.data ? e.data.y : mY;\n      }\n\n      var i,\n          j,\n          l,\n          a,\n          edge,\n          s,\n          maxEpsilon = self.settings('edgeHoverPrecision'),\n          source,\n          target,\n          cp,\n          nodeIndex = {},\n          inserted,\n          selected = [],\n          modifiedX = mX + self.width / 2,\n          modifiedY = mY + self.height / 2,\n          point = self.camera.cameraPosition(\n            mX,\n            mY\n          ),\n          edges = [];\n\n      if (isCanvas) {\n        var nodesOnScreen = self.camera.quadtree.area(\n          self.camera.getRectangle(self.width, self.height)\n        );\n        for (a = nodesOnScreen, i = 0, l = a.length; i < l; i++)\n          nodeIndex[a[i].id] = a[i];\n      }\n\n      if (self.camera.edgequadtree !== undefined) {\n        edges = self.camera.edgequadtree.point(\n          point.x,\n          point.y\n        );\n      }\n\n      function insertEdge(selected, edge) {\n        inserted = false;\n\n        for (j = 0; j < selected.length; j++)\n          if (edge.size > selected[j].size) {\n            selected.splice(j, 0, edge);\n            inserted = true;\n            break;\n          }\n\n        if (!inserted)\n          selected.push(edge);\n      }\n\n      if (edges.length)\n        for (i = 0, l = edges.length; i < l; i++) {\n          edge = edges[i];\n          source = self.graph.nodes(edge.source);\n          target = self.graph.nodes(edge.target);\n          // (HACK) we can't get edge[prefix + 'size'] on WebGL renderer:\n          s = edge[prefix + 'size'] ||\n              edge['read_' + prefix + 'size'];\n\n          // First, let's identify which edges are drawn. To do this, we keep\n          // every edges that have at least one extremity displayed according to\n          // the quadtree and the \"hidden\" attribute. We also do not keep hidden\n          // edges.\n          // Then, let's check if the mouse is on the edge (we suppose that it\n          // is a line segment).\n\n          if (\n            !edge.hidden &&\n            !source.hidden && !target.hidden &&\n            (!isCanvas ||\n              (nodeIndex[edge.source] || nodeIndex[edge.target])) &&\n            sigma.utils.getDistance(\n              source[prefix + 'x'],\n              source[prefix + 'y'],\n              modifiedX,\n              modifiedY) > source[prefix + 'size'] &&\n            sigma.utils.getDistance(\n              target[prefix + 'x'],\n              target[prefix + 'y'],\n              modifiedX,\n              modifiedY) > target[prefix + 'size']\n          ) {\n            if (edge.type == 'curve' || edge.type == 'curvedArrow') {\n              if (source.id === target.id) {\n                cp = sigma.utils.getSelfLoopControlPoints(\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  source[prefix + 'size']\n                );\n                if (\n                  sigma.utils.isPointOnBezierCurve(\n                  modifiedX,\n                  modifiedY,\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  target[prefix + 'x'],\n                  target[prefix + 'y'],\n                  cp.x1,\n                  cp.y1,\n                  cp.x2,\n                  cp.y2,\n                  Math.max(s, maxEpsilon)\n                )) {\n                  insertEdge(selected, edge);\n                }\n              }\n              else {\n                cp = sigma.utils.getQuadraticControlPoint(\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  target[prefix + 'x'],\n                  target[prefix + 'y']);\n                if (\n                  sigma.utils.isPointOnQuadraticCurve(\n                  modifiedX,\n                  modifiedY,\n                  source[prefix + 'x'],\n                  source[prefix + 'y'],\n                  target[prefix + 'x'],\n                  target[prefix + 'y'],\n                  cp.x,\n                  cp.y,\n                  Math.max(s, maxEpsilon)\n                )) {\n                  insertEdge(selected, edge);\n                }\n              }\n            } else if (\n                sigma.utils.isPointOnSegment(\n                modifiedX,\n                modifiedY,\n                source[prefix + 'x'],\n                source[prefix + 'y'],\n                target[prefix + 'x'],\n                target[prefix + 'y'],\n                Math.max(s, maxEpsilon)\n              )) {\n              insertEdge(selected, edge);\n            }\n          }\n        }\n\n      return selected;\n    }\n\n\n    function bindCaptor(captor) {\n      var nodes,\n          edges,\n          overNodes = {},\n          overEdges = {};\n\n      function onClick(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        self.dispatchEvent('click', e.data);\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        if (nodes.length) {\n          self.dispatchEvent('clickNode', {\n            node: nodes[0],\n            captor: e.data\n          });\n          self.dispatchEvent('clickNodes', {\n            node: nodes,\n            captor: e.data\n          });\n        } else if (edges.length) {\n          self.dispatchEvent('clickEdge', {\n            edge: edges[0],\n            captor: e.data\n          });\n          self.dispatchEvent('clickEdges', {\n            edge: edges,\n            captor: e.data\n          });\n        } else\n          self.dispatchEvent('clickStage', {captor: e.data});\n      }\n\n      function onDoubleClick(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        self.dispatchEvent('doubleClick', e.data);\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        if (nodes.length) {\n          self.dispatchEvent('doubleClickNode', {\n            node: nodes[0],\n            captor: e.data\n          });\n          self.dispatchEvent('doubleClickNodes', {\n            node: nodes,\n            captor: e.data\n          });\n        } else if (edges.length) {\n          self.dispatchEvent('doubleClickEdge', {\n            edge: edges[0],\n            captor: e.data\n          });\n          self.dispatchEvent('doubleClickEdges', {\n            edge: edges,\n            captor: e.data\n          });\n        } else\n          self.dispatchEvent('doubleClickStage', {captor: e.data});\n      }\n\n      function onRightClick(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        self.dispatchEvent('rightClick', e.data);\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        if (nodes.length) {\n          self.dispatchEvent('rightClickNode', {\n            node: nodes[0],\n            captor: e.data\n          });\n          self.dispatchEvent('rightClickNodes', {\n            node: nodes,\n            captor: e.data\n          });\n        } else if (edges.length) {\n          self.dispatchEvent('rightClickEdge', {\n            edge: edges[0],\n            captor: e.data\n          });\n          self.dispatchEvent('rightClickEdges', {\n            edge: edges,\n            captor: e.data\n          });\n        } else\n          self.dispatchEvent('rightClickStage', {captor: e.data});\n      }\n\n      function onOut(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        var k,\n            i,\n            l,\n            le,\n            outNodes = [],\n            outEdges = [];\n\n        for (k in overNodes)\n          outNodes.push(overNodes[k]);\n\n        overNodes = {};\n        // Dispatch both single and multi events:\n        for (i = 0, l = outNodes.length; i < l; i++)\n          self.dispatchEvent('outNode', {\n            node: outNodes[i],\n            captor: e.data\n          });\n        if (outNodes.length)\n          self.dispatchEvent('outNodes', {\n            nodes: outNodes,\n            captor: e.data\n          });\n\n        overEdges = {};\n        // Dispatch both single and multi events:\n        for (i = 0, le = outEdges.length; i < le; i++)\n          self.dispatchEvent('outEdge', {\n            edge: outEdges[i],\n            captor: e.data\n          });\n        if (outEdges.length)\n          self.dispatchEvent('outEdges', {\n            edges: outEdges,\n            captor: e.data\n          });\n      }\n\n      function onMove(e) {\n        if (!self.settings('eventsEnabled'))\n          return;\n\n        nodes = getNodes(e);\n        edges = getEdges(e);\n\n        var i,\n            k,\n            node,\n            edge,\n            newOutNodes = [],\n            newOverNodes = [],\n            currentOverNodes = {},\n            l = nodes.length,\n            newOutEdges = [],\n            newOverEdges = [],\n            currentOverEdges = {},\n            le = edges.length;\n\n        // Check newly overred nodes:\n        for (i = 0; i < l; i++) {\n          node = nodes[i];\n          currentOverNodes[node.id] = node;\n          if (!overNodes[node.id]) {\n            newOverNodes.push(node);\n            overNodes[node.id] = node;\n          }\n        }\n\n        // Check no more overred nodes:\n        for (k in overNodes)\n          if (!currentOverNodes[k]) {\n            newOutNodes.push(overNodes[k]);\n            delete overNodes[k];\n          }\n\n        // Dispatch both single and multi events:\n        for (i = 0, l = newOverNodes.length; i < l; i++)\n          self.dispatchEvent('overNode', {\n            node: newOverNodes[i],\n            captor: e.data\n          });\n        for (i = 0, l = newOutNodes.length; i < l; i++)\n          self.dispatchEvent('outNode', {\n            node: newOutNodes[i],\n            captor: e.data\n          });\n        if (newOverNodes.length)\n          self.dispatchEvent('overNodes', {\n            nodes: newOverNodes,\n            captor: e.data\n          });\n        if (newOutNodes.length)\n          self.dispatchEvent('outNodes', {\n            nodes: newOutNodes,\n            captor: e.data\n          });\n\n        // Check newly overred edges:\n        for (i = 0; i < le; i++) {\n          edge = edges[i];\n          currentOverEdges[edge.id] = edge;\n          if (!overEdges[edge.id]) {\n            newOverEdges.push(edge);\n            overEdges[edge.id] = edge;\n          }\n        }\n\n        // Check no more overred edges:\n        for (k in overEdges)\n          if (!currentOverEdges[k]) {\n            newOutEdges.push(overEdges[k]);\n            delete overEdges[k];\n          }\n\n        // Dispatch both single and multi events:\n        for (i = 0, le = newOverEdges.length; i < le; i++)\n          self.dispatchEvent('overEdge', {\n            edge: newOverEdges[i],\n            captor: e.data\n          });\n        for (i = 0, le = newOutEdges.length; i < le; i++)\n          self.dispatchEvent('outEdge', {\n            edge: newOutEdges[i],\n            captor: e.data\n          });\n        if (newOverEdges.length)\n          self.dispatchEvent('overEdges', {\n            edges: newOverEdges,\n            captor: e.data\n          });\n        if (newOutEdges.length)\n          self.dispatchEvent('outEdges', {\n            edges: newOutEdges,\n            captor: e.data\n          });\n      }\n\n      // Bind events:\n      captor.bind('click', onClick);\n      captor.bind('mousedown', onMove);\n      captor.bind('mouseup', onMove);\n      captor.bind('mousemove', onMove);\n      captor.bind('mouseout', onOut);\n      captor.bind('doubleclick', onDoubleClick);\n      captor.bind('rightclick', onRightClick);\n      self.bind('render', onMove);\n    }\n\n    for (i = 0, l = this.captors.length; i < l; i++)\n      bindCaptor(this.captors[i]);\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 48:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.misc');\n\n  /**\n   * This method listens to \"overNode\", \"outNode\", \"overEdge\" and \"outEdge\"\n   * events from a renderer and renders the nodes differently on the top layer.\n   * The goal is to make any node label readable with the mouse, and to\n   * highlight hovered nodes and edges.\n   *\n   * It has to be called in the scope of the related renderer.\n   */\n  sigma.misc.drawHovers = function(prefix) {\n    var self = this,\n        hoveredNodes = {},\n        hoveredEdges = {};\n\n    this.bind('overNode', function(event) {\n      var node = event.data.node;\n      if (!node.hidden) {\n        hoveredNodes[node.id] = node;\n        draw();\n      }\n    });\n\n    this.bind('outNode', function(event) {\n      delete hoveredNodes[event.data.node.id];\n      draw();\n    });\n\n    this.bind('overEdge', function(event) {\n      var edge = event.data.edge;\n      if (!edge.hidden) {\n        hoveredEdges[edge.id] = edge;\n        draw();\n      }\n    });\n\n    this.bind('outEdge', function(event) {\n      delete hoveredEdges[event.data.edge.id];\n      draw();\n    });\n\n    this.bind('render', function(event) {\n      draw();\n    });\n\n    function draw() {\n\n      var k,\n          source,\n          target,\n          hoveredNode,\n          hoveredEdge,\n          c = self.contexts.hover.canvas,\n          defaultNodeType = self.settings('defaultNodeType'),\n          defaultEdgeType = self.settings('defaultEdgeType'),\n          nodeRenderers = sigma.canvas.hovers,\n          edgeRenderers = sigma.canvas.edgehovers,\n          extremitiesRenderers = sigma.canvas.extremities,\n          embedSettings = self.settings.embedObjects({\n            prefix: prefix\n          });\n\n      // Clear self.contexts.hover:\n      self.contexts.hover.clearRect(0, 0, c.width, c.height);\n\n      // Node render: single hover\n      if (\n        embedSettings('enableHovering') &&\n        embedSettings('singleHover') &&\n        Object.keys(hoveredNodes).length\n      ) {\n        hoveredNode = hoveredNodes[Object.keys(hoveredNodes)[0]];\n        (\n          nodeRenderers[hoveredNode.type] ||\n          nodeRenderers[defaultNodeType] ||\n          nodeRenderers.def\n        )(\n          hoveredNode,\n          self.contexts.hover,\n          embedSettings\n        );\n      }\n\n      // Node render: multiple hover\n      if (\n        embedSettings('enableHovering') &&\n        !embedSettings('singleHover')\n      )\n        for (k in hoveredNodes)\n          (\n            nodeRenderers[hoveredNodes[k].type] ||\n            nodeRenderers[defaultNodeType] ||\n            nodeRenderers.def\n          )(\n            hoveredNodes[k],\n            self.contexts.hover,\n            embedSettings\n          );\n\n      // Edge render: single hover\n      if (\n        embedSettings('enableEdgeHovering') &&\n        embedSettings('singleHover') &&\n        Object.keys(hoveredEdges).length\n      ) {\n        hoveredEdge = hoveredEdges[Object.keys(hoveredEdges)[0]];\n        source = self.graph.nodes(hoveredEdge.source);\n        target = self.graph.nodes(hoveredEdge.target);\n\n        if (! hoveredEdge.hidden) {\n          (\n            edgeRenderers[hoveredEdge.type] ||\n            edgeRenderers[defaultEdgeType] ||\n            edgeRenderers.def\n          ) (\n            hoveredEdge,\n            source,\n            target,\n            self.contexts.hover,\n            embedSettings\n          );\n\n          if (embedSettings('edgeHoverExtremities')) {\n            (\n              extremitiesRenderers[hoveredEdge.type] ||\n              extremitiesRenderers.def\n            )(\n              hoveredEdge,\n              source,\n              target,\n              self.contexts.hover,\n              embedSettings\n            );\n\n          } else {\n            // Avoid edges rendered over nodes:\n            (\n              sigma.canvas.nodes[source.type] ||\n              sigma.canvas.nodes.def\n            ) (\n              source,\n              self.contexts.hover,\n              embedSettings\n            );\n            (\n              sigma.canvas.nodes[target.type] ||\n              sigma.canvas.nodes.def\n            ) (\n              target,\n              self.contexts.hover,\n              embedSettings\n            );\n          }\n        }\n      }\n\n      // Edge render: multiple hover\n      if (\n        embedSettings('enableEdgeHovering') &&\n        !embedSettings('singleHover')\n      ) {\n        for (k in hoveredEdges) {\n          hoveredEdge = hoveredEdges[k];\n          source = self.graph.nodes(hoveredEdge.source);\n          target = self.graph.nodes(hoveredEdge.target);\n\n          if (!hoveredEdge.hidden) {\n            (\n              edgeRenderers[hoveredEdge.type] ||\n              edgeRenderers[defaultEdgeType] ||\n              edgeRenderers.def\n            ) (\n              hoveredEdge,\n              source,\n              target,\n              self.contexts.hover,\n              embedSettings\n            );\n\n            if (embedSettings('edgeHoverExtremities')) {\n              (\n                extremitiesRenderers[hoveredEdge.type] ||\n                extremitiesRenderers.def\n              )(\n                hoveredEdge,\n                source,\n                target,\n                self.contexts.hover,\n                embedSettings\n              );\n            } else {\n              // Avoid edges rendered over nodes:\n              (\n                sigma.canvas.nodes[source.type] ||\n                sigma.canvas.nodes.def\n              ) (\n                source,\n                self.contexts.hover,\n                embedSettings\n              );\n              (\n                sigma.canvas.nodes[target.type] ||\n                sigma.canvas.nodes.def\n              ) (\n                target,\n                self.contexts.hover,\n                embedSettings\n              );\n            }\n          }\n        }\n      }\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 52:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.def =\n    function(edge, source, target, context, settings) {\n      var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 56:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * The default edge renderer. It renders the edge as a simple line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.def = function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 57:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.extremities');\n\n  /**\n   * The default renderer for hovered edge extremities. It renders the edge\n   * extremities as hovered.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.extremities.def =\n    function(edge, source, target, context, settings) {\n    // Source Node:\n    (\n      sigma.canvas.hovers[source.type] ||\n      sigma.canvas.hovers.def\n    ) (\n      source, context, settings\n    );\n\n    // Target Node:\n    (\n      sigma.canvas.hovers[target.type] ||\n      sigma.canvas.hovers.def\n    ) (\n      target, context, settings\n    );\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 58:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.hovers');\n\n  /**\n   * This hover renderer will basically display the label with a background.\n   *\n   * @param  {object}                   node     The node object.\n   * @param  {CanvasRenderingContext2D} context  The canvas context.\n   * @param  {configurable}             settings The settings function.\n   */\n  sigma.canvas.hovers.def = function(node, context, settings) {\n    var x,\n        y,\n        w,\n        h,\n        e,\n        fontStyle = settings('hoverFontStyle') || settings('fontStyle'),\n        prefix = settings('prefix') || '',\n        size = node[prefix + 'size'],\n        fontSize = (settings('labelSize') === 'fixed') ?\n          settings('defaultLabelSize') :\n          settings('labelSizeRatio') * size;\n\n    // Label background:\n    context.font = (fontStyle ? fontStyle + ' ' : '') +\n      fontSize + 'px ' + (settings('hoverFont') || settings('font'));\n\n    context.beginPath();\n    context.fillStyle = settings('labelHoverBGColor') === 'node' ?\n      (node.color || settings('defaultNodeColor')) :\n      settings('defaultHoverLabelBGColor');\n\n    if (node.label && settings('labelHoverShadow')) {\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.shadowBlur = 8;\n      context.shadowColor = settings('labelHoverShadowColor');\n    }\n\n    if (node.label && typeof node.label === 'string') {\n      x = Math.round(node[prefix + 'x'] - fontSize / 2 - 2);\n      y = Math.round(node[prefix + 'y'] - fontSize / 2 - 2);\n      w = Math.round(\n        context.measureText(node.label).width + fontSize / 2 + size + 7\n      );\n      h = Math.round(fontSize + 4);\n      e = Math.round(fontSize / 2 + 2);\n\n      context.moveTo(x, y + e);\n      context.arcTo(x, y, x + e, y, e);\n      context.lineTo(x + w, y);\n      context.lineTo(x + w, y + h);\n      context.lineTo(x + e, y + h);\n      context.arcTo(x, y + h, x, y + h - e, e);\n      context.lineTo(x, y + e);\n\n      context.closePath();\n      context.fill();\n\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.shadowBlur = 0;\n    }\n\n    // Node border:\n    if (settings('borderSize') > 0) {\n      context.beginPath();\n      context.fillStyle = settings('nodeBorderColor') === 'node' ?\n        (node.color || settings('defaultNodeColor')) :\n        settings('defaultNodeBorderColor');\n      context.arc(\n        node[prefix + 'x'],\n        node[prefix + 'y'],\n        size + settings('borderSize'),\n        0,\n        Math.PI * 2,\n        true\n      );\n      context.closePath();\n      context.fill();\n    }\n\n    // Node:\n    var nodeRenderer = sigma.canvas.nodes[node.type] || sigma.canvas.nodes.def;\n    nodeRenderer(node, context, settings);\n\n    // Display the label:\n    if (node.label && typeof node.label === 'string') {\n      context.fillStyle = (settings('labelHoverColor') === 'node') ?\n        (node.color || settings('defaultNodeColor')) :\n        settings('defaultLabelHoverColor');\n\n      context.fillText(\n        node.label,\n        Math.round(node[prefix + 'x'] + size + 3),\n        Math.round(node[prefix + 'y'] + fontSize / 3)\n      );\n    }\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 59:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.labels');\n\n  /**\n   * This label renderer will just display the label on the right of the node.\n   *\n   * @param  {object}                   node     The node object.\n   * @param  {CanvasRenderingContext2D} context  The canvas context.\n   * @param  {configurable}             settings The settings function.\n   */\n  sigma.canvas.labels.def = function(node, context, settings) {\n    var fontSize,\n        prefix = settings('prefix') || '',\n        size = node[prefix + 'size'];\n\n    if (size < settings('labelThreshold'))\n      return;\n\n    if (!node.label || typeof node.label !== 'string')\n      return;\n\n    fontSize = (settings('labelSize') === 'fixed') ?\n      settings('defaultLabelSize') :\n      settings('labelSizeRatio') * size;\n\n    context.font = (settings('fontStyle') ? settings('fontStyle') + ' ' : '') +\n      fontSize + 'px ' + settings('font');\n    context.fillStyle = (settings('labelColor') === 'node') ?\n      (node.color || settings('defaultNodeColor')) :\n      settings('defaultLabelColor');\n\n    context.fillText(\n      node.label,\n      Math.round(node[prefix + 'x'] + size + 3),\n      Math.round(node[prefix + 'y'] + fontSize / 3)\n    );\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 60:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.nodes');\n\n  /**\n   * The default node renderer. It renders the node as a simple disc.\n   *\n   * @param  {object}                   node     The node object.\n   * @param  {CanvasRenderingContext2D} context  The canvas context.\n   * @param  {configurable}             settings The settings function.\n   */\n  sigma.canvas.nodes.def = function(node, context, settings) {\n    var prefix = settings('prefix') || '';\n\n    context.fillStyle = node.color || settings('defaultNodeColor');\n    context.beginPath();\n    context.arc(\n      node[prefix + 'x'],\n      node[prefix + 'y'],\n      node[prefix + 'size'],\n      0,\n      Math.PI * 2,\n      true\n    );\n\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 61:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  if (typeof conrad === 'undefined')\n    throw 'conrad is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.renderers');\n\n  /**\n   * This function is the constructor of the canvas sigma's renderer.\n   *\n   * @param  {sigma.classes.graph}            graph    The graph to render.\n   * @param  {sigma.classes.camera}           camera   The camera.\n   * @param  {configurable}           settings The sigma instance settings\n   *                                           function.\n   * @param  {object}                 object   The options object.\n   * @return {sigma.renderers.canvas}          The renderer instance.\n   */\n  sigma.renderers.canvas = function(graph, camera, settings, options) {\n    if (typeof options !== 'object')\n      throw 'sigma.renderers.canvas: Wrong arguments.';\n\n    if (!(options.container instanceof HTMLElement))\n      throw 'Container not found.';\n\n    var k,\n        i,\n        l,\n        a,\n        fn,\n        self = this;\n\n    sigma.classes.dispatcher.extend(this);\n\n    // Initialize main attributes:\n    Object.defineProperty(this, 'conradId', {\n      value: sigma.utils.id()\n    });\n    this.graph = graph;\n    this.camera = camera;\n    this.contexts = {};\n    this.domElements = {};\n    this.options = options;\n    this.container = this.options.container;\n    this.settings = (\n        typeof options.settings === 'object' &&\n        options.settings\n      ) ?\n        settings.embedObjects(options.settings) :\n        settings;\n\n    // Node indexes:\n    this.nodesOnScreen = [];\n    this.edgesOnScreen = [];\n\n    // Conrad related attributes:\n    this.jobs = {};\n\n    // Find the prefix:\n    this.options.prefix = 'renderer' + this.conradId + ':';\n\n    // Initialize the DOM elements:\n    if (\n      !this.settings('batchEdgesDrawing')\n    ) {\n      this.initDOM('canvas', 'scene');\n      this.contexts.edges = this.contexts.scene;\n      this.contexts.nodes = this.contexts.scene;\n      this.contexts.labels = this.contexts.scene;\n    } else {\n      this.initDOM('canvas', 'edges');\n      this.initDOM('canvas', 'scene');\n      this.contexts.nodes = this.contexts.scene;\n      this.contexts.labels = this.contexts.scene;\n    }\n\n    this.initDOM('canvas', 'mouse');\n    this.contexts.hover = this.contexts.mouse;\n\n    // Initialize captors:\n    this.captors = [];\n    a = this.options.captors || [sigma.captors.mouse, sigma.captors.touch];\n    for (i = 0, l = a.length; i < l; i++) {\n      fn = typeof a[i] === 'function' ? a[i] : sigma.captors[a[i]];\n      this.captors.push(\n        new fn(\n          this.domElements.mouse,\n          this.camera,\n          this.settings\n        )\n      );\n    }\n\n    // Deal with sigma events:\n    sigma.misc.bindEvents.call(this, this.options.prefix);\n    sigma.misc.drawHovers.call(this, this.options.prefix);\n\n    this.resize(false);\n  };\n\n\n\n\n  /**\n   * This method renders the graph on the canvases.\n   *\n   * @param  {?object}                options Eventually an object of options.\n   * @return {sigma.renderers.canvas}         Returns the instance itself.\n   */\n  sigma.renderers.canvas.prototype.render = function(options) {\n    options = options || {};\n\n    var a,\n        i,\n        k,\n        l,\n        o,\n        id,\n        end,\n        job,\n        start,\n        edges,\n        renderers,\n        rendererType,\n        batchSize,\n        tempGCO,\n        index = {},\n        graph = this.graph,\n        nodes = this.graph.nodes,\n        prefix = this.options.prefix || '',\n        drawEdges = this.settings(options, 'drawEdges'),\n        drawNodes = this.settings(options, 'drawNodes'),\n        drawLabels = this.settings(options, 'drawLabels'),\n        drawEdgeLabels = this.settings(options, 'drawEdgeLabels'),\n        embedSettings = this.settings.embedObjects(options, {\n          prefix: this.options.prefix\n        });\n\n    // Call the resize function:\n    this.resize(false);\n\n    // Check the 'hideEdgesOnMove' setting:\n    if (this.settings(options, 'hideEdgesOnMove'))\n      if (this.camera.isAnimated || this.camera.isMoving)\n        drawEdges = false;\n\n    // Apply the camera's view:\n    this.camera.applyView(\n      undefined,\n      this.options.prefix,\n      {\n        width: this.width,\n        height: this.height\n      }\n    );\n\n    // Clear canvases:\n    this.clear();\n\n    // Kill running jobs:\n    for (k in this.jobs)\n      if (conrad.hasJob(k))\n        conrad.killJob(k);\n\n    // Find which nodes are on screen:\n    this.edgesOnScreen = [];\n    this.nodesOnScreen = this.camera.quadtree.area(\n      this.camera.getRectangle(this.width, this.height)\n    );\n\n    for (a = this.nodesOnScreen, i = 0, l = a.length; i < l; i++)\n      index[a[i].id] = a[i];\n\n    // Draw edges:\n    // - If settings('batchEdgesDrawing') is true, the edges are displayed per\n    //   batches. If not, they are drawn in one frame.\n    if (drawEdges) {\n      // First, let's identify which edges to draw. To do this, we just keep\n      // every edges that have at least one extremity displayed according to\n      // the quadtree and the \"hidden\" attribute. We also do not keep hidden\n      // edges.\n      for (a = graph.edges(), i = 0, l = a.length; i < l; i++) {\n        o = a[i];\n        if (\n          (index[o.source] || index[o.target]) &&\n          (!o.hidden && !nodes(o.source).hidden && !nodes(o.target).hidden)\n        )\n          this.edgesOnScreen.push(o);\n      }\n\n      // If the \"batchEdgesDrawing\" settings is true, edges are batched:\n      if (this.settings(options, 'batchEdgesDrawing')) {\n        id = 'edges_' + this.conradId;\n        batchSize = embedSettings('canvasEdgesBatchSize');\n\n        edges = this.edgesOnScreen;\n        l = edges.length;\n\n        start = 0;\n        end = Math.min(edges.length, start + batchSize);\n\n        job = function() {\n          tempGCO = this.contexts.edges.globalCompositeOperation;\n          this.contexts.edges.globalCompositeOperation = 'destination-over';\n\n          renderers = sigma.canvas.edges;\n          for (i = start; i < end; i++) {\n            o = edges[i];\n            (renderers[\n              o.type || this.settings(options, 'defaultEdgeType')\n            ] || renderers.def)(\n              o,\n              graph.nodes(o.source),\n              graph.nodes(o.target),\n              this.contexts.edges,\n              embedSettings\n            );\n          }\n\n          // Draw edge labels:\n          if (drawEdgeLabels) {\n            renderers = sigma.canvas.edges.labels;\n            for (i = start; i < end; i++) {\n              o = edges[i];\n              if (!o.hidden)\n                (renderers[\n                  o.type || this.settings(options, 'defaultEdgeType')\n                ] || renderers.def)(\n                  o,\n                  graph.nodes(o.source),\n                  graph.nodes(o.target),\n                  this.contexts.labels,\n                  embedSettings\n                );\n            }\n          }\n\n          // Restore original globalCompositeOperation:\n          this.contexts.edges.globalCompositeOperation = tempGCO;\n\n          // Catch job's end:\n          if (end === edges.length) {\n            delete this.jobs[id];\n            return false;\n          }\n\n          start = end + 1;\n          end = Math.min(edges.length, start + batchSize);\n          return true;\n        };\n\n        this.jobs[id] = job;\n        conrad.addJob(id, job.bind(this));\n\n      // If not, they are drawn in one frame:\n      } else {\n        renderers = sigma.canvas.edges;\n        for (a = this.edgesOnScreen, i = 0, l = a.length; i < l; i++) {\n          o = a[i];\n          (renderers[\n            o.type || this.settings(options, 'defaultEdgeType')\n          ] || renderers.def)(\n            o,\n            graph.nodes(o.source),\n            graph.nodes(o.target),\n            this.contexts.edges,\n            embedSettings\n          );\n        }\n\n        // Draw edge labels:\n        // - No batching\n        if (drawEdgeLabels) {\n          renderers = sigma.canvas.edges.labels;\n          for (a = this.edgesOnScreen, i = 0, l = a.length; i < l; i++)\n            if (!a[i].hidden)\n              (renderers[\n                a[i].type || this.settings(options, 'defaultEdgeType')\n              ] || renderers.def)(\n                a[i],\n                graph.nodes(a[i].source),\n                graph.nodes(a[i].target),\n                this.contexts.labels,\n                embedSettings\n              );\n        }\n      }\n    }\n\n    // Draw nodes:\n    // - No batching\n    if (drawNodes) {\n      renderers = sigma.canvas.nodes;\n      for (a = this.nodesOnScreen, i = 0, l = a.length; i < l; i++)\n        if (!a[i].hidden)\n          (renderers[\n            a[i].type || this.settings(options, 'defaultNodeType')\n          ] || renderers.def)(\n            a[i],\n            this.contexts.nodes,\n            embedSettings\n          );\n    }\n\n    // Draw labels:\n    // - No batching\n    if (drawLabels) {\n      renderers = sigma.canvas.labels;\n      for (a = this.nodesOnScreen, i = 0, l = a.length; i < l; i++)\n        if (!a[i].hidden)\n          (renderers[\n            a[i].type || this.settings(options, 'defaultNodeType')\n          ] || renderers.def)(\n            a[i],\n            this.contexts.labels,\n            embedSettings\n          );\n    }\n\n    this.dispatchEvent('render');\n\n    return this;\n  };\n\n  /**\n   * This method creates a DOM element of the specified type, switches its\n   * position to \"absolute\", references it to the domElements attribute, and\n   * finally appends it to the container.\n   *\n   * @param  {string} tag The label tag.\n   * @param  {string} id  The id of the element (to store it in \"domElements\").\n   */\n  sigma.renderers.canvas.prototype.initDOM = function(tag, id) {\n    var dom = document.createElement(tag);\n\n    dom.style.position = 'absolute';\n    dom.setAttribute('class', 'sigma-' + id);\n\n    this.domElements[id] = dom;\n    this.container.appendChild(dom);\n\n    if (tag.toLowerCase() === 'canvas')\n      this.contexts[id] = dom.getContext('2d');\n  };\n\n  /**\n   * This method resizes each DOM elements in the container and stores the new\n   * dimensions. Then, it renders the graph.\n   *\n   * @param  {?number}                width  The new width of the container.\n   * @param  {?number}                height The new height of the container.\n   * @return {sigma.renderers.canvas}        Returns the instance itself.\n   */\n  sigma.renderers.canvas.prototype.resize = function(w, h) {\n    var k,\n        oldWidth = this.width,\n        oldHeight = this.height,\n        pixelRatio = sigma.utils.getPixelRatio();\n\n    if (w !== undefined && h !== undefined) {\n      this.width = w;\n      this.height = h;\n    } else {\n      this.width = this.container.offsetWidth;\n      this.height = this.container.offsetHeight;\n\n      w = this.width;\n      h = this.height;\n    }\n\n    if (oldWidth !== this.width || oldHeight !== this.height) {\n      for (k in this.domElements) {\n        this.domElements[k].style.width = w + 'px';\n        this.domElements[k].style.height = h + 'px';\n\n        if (this.domElements[k].tagName.toLowerCase() === 'canvas') {\n          this.domElements[k].setAttribute('width', (w * pixelRatio) + 'px');\n          this.domElements[k].setAttribute('height', (h * pixelRatio) + 'px');\n\n          if (pixelRatio !== 1)\n            this.contexts[k].scale(pixelRatio, pixelRatio);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * This method clears each canvas.\n   *\n   * @return {sigma.renderers.canvas} Returns the instance itself.\n   */\n  sigma.renderers.canvas.prototype.clear = function() {\n    for (var k in this.contexts) {\n      this.contexts[k].clearRect(0, 0, this.width, this.height);\n    }\n\n    return this;\n  };\n\n  /**\n   * This method kills contexts and other attributes.\n   */\n  sigma.renderers.canvas.prototype.kill = function() {\n    var k,\n        captor;\n\n    // Kill captors:\n    while ((captor = this.captors.pop()))\n      captor.kill();\n    delete this.captors;\n\n    // Kill contexts:\n    for (k in this.domElements) {\n      this.domElements[k].parentNode.removeChild(this.domElements[k]);\n      delete this.domElements[k];\n      delete this.contexts[k];\n    }\n    delete this.domElements;\n    delete this.contexts;\n  };\n\n\n\n\n  /**\n   * The labels, nodes and edges renderers are stored in the three following\n   * objects. When an element is drawn, its type will be checked and if a\n   * renderer with the same name exists, it will be used. If not found, the\n   * default renderer will be used instead.\n   *\n   * They are stored in different files, in the \"./canvas\" folder.\n   */\n  sigma.utils.pkg('sigma.canvas.nodes');\n  sigma.utils.pkg('sigma.canvas.edges');\n  sigma.utils.pkg('sigma.canvas.labels');\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 69:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  var __instances = {};\n\n  /**\n   * This is the sigma instances constructor. One instance of sigma represent\n   * one graph. It is possible to represent this grapĥ with several renderers\n   * at the same time. By default, the default renderer (WebGL + Canvas\n   * polyfill) will be used as the only renderer, with the container specified\n   * in the configuration.\n   *\n   * @param  {?*}    conf The configuration of the instance. There are a lot of\n   *                      different recognized forms to instantiate sigma, check\n   *                      example files, documentation in this file and unit\n   *                      tests to know more.\n   * @return {sigma}      The fresh new sigma instance.\n   *\n   * Instanciating sigma:\n   * ********************\n   * If no parameter is given to the constructor, the instance will be created\n   * without any renderer or camera. It will just instantiate the graph, and\n   * other modules will have to be instantiated through the public methods,\n   * like \"addRenderer\" etc:\n   *\n   *  > s0 = new sigma();\n   *  > s0.addRenderer({\n   *  >   type: 'canvas',\n   *  >   container: 'my-container-id'\n   *  > });\n   *\n   * In most of the cases, sigma will simply be used with the default renderer.\n   * Then, since the only required parameter is the DOM container, there are\n   * some simpler way to call the constructor. The four following calls do the\n   * exact same things:\n   *\n   *  > s1 = new sigma('my-container-id');\n   *  > s2 = new sigma(document.getElementById('my-container-id'));\n   *  > s3 = new sigma({\n   *  >   container: document.getElementById('my-container-id')\n   *  > });\n   *  > s4 = new sigma({\n   *  >   renderers: [{\n   *  >     container: document.getElementById('my-container-id')\n   *  >   }]\n   *  > });\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters, when calling the\n   * constructor with to top level configuration object (fourth case in the\n   * previous examples):\n   *\n   *   {?string} id        The id of the instance. It will be generated\n   *                       automatically if not specified.\n   *   {?array}  renderers An array containing objects describing renderers.\n   *   {?object} graph     An object containing an array of nodes and an array\n   *                       of edges, to avoid having to add them by hand later.\n   *   {?object} settings  An object containing instance specific settings that\n   *                       will override the default ones defined in the object\n   *                       sigma.settings.\n   */\n  var sigma = function(conf) {\n    // Local variables:\n    // ****************\n    var i,\n        l,\n        a,\n        c,\n        o,\n        id;\n\n    sigma.classes.dispatcher.extend(this);\n\n    // Private attributes:\n    // *******************\n    var _self = this,\n        _conf = conf || {};\n\n    // Little shortcut:\n    // ****************\n    // The configuration is supposed to have a list of the configuration\n    // objects for each renderer.\n    //  - If there are no configuration at all, then nothing is done.\n    //  - If there are no renderer list, the given configuration object will be\n    //    considered as describing the first and only renderer.\n    //  - If there are no renderer list nor \"container\" object, it will be\n    //    considered as the container itself (a DOM element).\n    //  - If the argument passed to sigma() is a string, it will be considered\n    //    as the ID of the DOM container.\n    if (\n      typeof _conf === 'string' ||\n      _conf instanceof HTMLElement\n    )\n      _conf = {\n        renderers: [_conf]\n      };\n    else if (Object.prototype.toString.call(_conf) === '[object Array]')\n      _conf = {\n        renderers: _conf\n      };\n\n    // Also check \"renderer\" and \"container\" keys:\n    o = _conf.renderers || _conf.renderer || _conf.container;\n    if (!_conf.renderers || _conf.renderers.length === 0)\n      if (\n        typeof o === 'string' ||\n        o instanceof HTMLElement ||\n        (typeof o === 'object' && 'container' in o)\n      )\n        _conf.renderers = [o];\n\n    // Recense the instance:\n    if (_conf.id) {\n      if (__instances[_conf.id])\n        throw 'sigma: Instance \"' + _conf.id + '\" already exists.';\n      Object.defineProperty(this, 'id', {\n        value: _conf.id\n      });\n    } else {\n      id = 0;\n      while (__instances[id])\n        id++;\n      Object.defineProperty(this, 'id', {\n        value: '' + id\n      });\n    }\n    __instances[this.id] = this;\n\n    // Initialize settings function:\n    this.settings = new sigma.classes.configurable(\n      sigma.settings,\n      _conf.settings || {}\n    );\n\n    // Initialize locked attributes:\n    Object.defineProperty(this, 'graph', {\n      value: new sigma.classes.graph(this.settings),\n      configurable: true\n    });\n    Object.defineProperty(this, 'middlewares', {\n      value: [],\n      configurable: true\n    });\n    Object.defineProperty(this, 'cameras', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'renderers', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'renderersPerCamera', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'cameraFrames', {\n      value: {},\n      configurable: true\n    });\n    Object.defineProperty(this, 'camera', {\n      get: function() {\n        return this.cameras[0];\n      }\n    });\n    Object.defineProperty(this, 'events', {\n      value: [\n        'click',\n        'rightClick',\n        'clickStage',\n        'doubleClickStage',\n        'rightClickStage',\n        'clickNode',\n        'clickNodes',\n        'doubleClickNode',\n        'doubleClickNodes',\n        'rightClickNode',\n        'rightClickNodes',\n        'overNode',\n        'overNodes',\n        'outNode',\n        'outNodes',\n        'downNode',\n        'downNodes',\n        'upNode',\n        'upNodes'\n      ],\n      configurable: true\n    });\n\n    // Add a custom handler, to redispatch events from renderers:\n    this._handler = (function(e) {\n      var k,\n          data = {};\n\n      for (k in e.data)\n        data[k] = e.data[k];\n\n      data.renderer = e.target;\n      this.dispatchEvent(e.type, data);\n    }).bind(this);\n\n    // Initialize renderers:\n    a = _conf.renderers || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.addRenderer(a[i]);\n\n    // Initialize middlewares:\n    a = _conf.middlewares || [];\n    for (i = 0, l = a.length; i < l; i++)\n      this.middlewares.push(\n        typeof a[i] === 'string' ?\n          sigma.middlewares[a[i]] :\n          a[i]\n      );\n\n    // Check if there is already a graph to fill in:\n    if (typeof _conf.graph === 'object' && _conf.graph) {\n      this.graph.read(_conf.graph);\n\n      // If a graph is given to the to the instance, the \"refresh\" method is\n      // directly called:\n      this.refresh();\n    }\n\n    // Deal with resize:\n    window.addEventListener('resize', function() {\n      if (_self.settings)\n        _self.refresh();\n    });\n  };\n\n\n\n\n  /**\n   * This methods will instantiate and reference a new camera. If no id is\n   * specified, then an automatic id will be generated.\n   *\n   * @param  {?string}              id Eventually the camera id.\n   * @return {sigma.classes.camera}    The fresh new camera instance.\n   */\n  sigma.prototype.addCamera = function(id) {\n    var self = this,\n        camera;\n\n    if (!arguments.length) {\n      id = 0;\n      while (this.cameras['' + id])\n        id++;\n      id = '' + id;\n    }\n\n    if (this.cameras[id])\n      throw 'sigma.addCamera: The camera \"' + id + '\" already exists.';\n\n    camera = new sigma.classes.camera(id, this.graph, this.settings);\n    this.cameras[id] = camera;\n\n    // Add a quadtree to the camera:\n    camera.quadtree = new sigma.classes.quad();\n\n    // Add an edgequadtree to the camera:\n    if (sigma.classes.edgequad !== undefined) {\n      camera.edgequadtree = new sigma.classes.edgequad();\n    }\n\n    camera.bind('coordinatesUpdated', function(e) {\n      self.renderCamera(camera, camera.isAnimated);\n    });\n\n    this.renderersPerCamera[id] = [];\n\n    return camera;\n  };\n\n  /**\n   * This method kills a camera, and every renderer attached to it.\n   *\n   * @param  {string|camera} v The camera to kill or its ID.\n   * @return {sigma}           Returns the instance.\n   */\n  sigma.prototype.killCamera = function(v) {\n    v = typeof v === 'string' ? this.cameras[v] : v;\n\n    if (!v)\n      throw 'sigma.killCamera: The camera is undefined.';\n\n    var i,\n        l,\n        a = this.renderersPerCamera[v.id];\n\n    for (l = a.length, i = l - 1; i >= 0; i--)\n      this.killRenderer(a[i]);\n\n    delete this.renderersPerCamera[v.id];\n    delete this.cameraFrames[v.id];\n    delete this.cameras[v.id];\n\n    if (v.kill)\n      v.kill();\n\n    return this;\n  };\n\n  /**\n   * This methods will instantiate and reference a new renderer. The \"type\"\n   * argument can be the constructor or its name in the \"sigma.renderers\"\n   * package. If no type is specified, then \"sigma.renderers.def\" will be used.\n   * If no id is specified, then an automatic id will be generated.\n   *\n   * @param  {?object}  options Eventually some options to give to the renderer\n   *                            constructor.\n   * @return {renderer}         The fresh new renderer instance.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the \"options\"\n   * object:\n   *\n   *   {?string}            id     Eventually the renderer id.\n   *   {?(function|string)} type   Eventually the renderer constructor or its\n   *                               name in the \"sigma.renderers\" package.\n   *   {?(camera|string)}   camera Eventually the renderer camera or its\n   *                               id.\n   */\n  sigma.prototype.addRenderer = function(options) {\n    var id,\n        fn,\n        camera,\n        renderer,\n        o = options || {};\n\n    // Polymorphism:\n    if (typeof o === 'string')\n      o = {\n        container: document.getElementById(o)\n      };\n    else if (o instanceof HTMLElement)\n      o = {\n        container: o\n      };\n\n    // If the container still is a string, we get it by id\n    if (typeof o.container === 'string')\n      o.container = document.getElementById(o.container);\n\n    // Reference the new renderer:\n    if (!('id' in o)) {\n      id = 0;\n      while (this.renderers['' + id])\n        id++;\n      id = '' + id;\n    } else\n      id = o.id;\n\n    if (this.renderers[id])\n      throw 'sigma.addRenderer: The renderer \"' + id + '\" already exists.';\n\n    // Find the good constructor:\n    fn = typeof o.type === 'function' ? o.type : sigma.renderers[o.type];\n    fn = fn || sigma.renderers.def;\n\n    // Find the good camera:\n    camera = 'camera' in o ?\n      (\n        o.camera instanceof sigma.classes.camera ?\n          o.camera :\n          this.cameras[o.camera] || this.addCamera(o.camera)\n      ) :\n      this.addCamera();\n\n    if (this.cameras[camera.id] !== camera)\n      throw 'sigma.addRenderer: The camera is not properly referenced.';\n\n    // Instantiate:\n    renderer = new fn(this.graph, camera, this.settings, o);\n    this.renderers[id] = renderer;\n    Object.defineProperty(renderer, 'id', {\n      value: id\n    });\n\n    // Bind events:\n    if (renderer.bind)\n      renderer.bind(\n        [\n          'click',\n          'rightClick',\n          'clickStage',\n          'doubleClickStage',\n          'rightClickStage',\n          'clickNode',\n          'clickNodes',\n          'clickEdge',\n          'clickEdges',\n          'doubleClickNode',\n          'doubleClickNodes',\n          'doubleClickEdge',\n          'doubleClickEdges',\n          'rightClickNode',\n          'rightClickNodes',\n          'rightClickEdge',\n          'rightClickEdges',\n          'overNode',\n          'overNodes',\n          'overEdge',\n          'overEdges',\n          'outNode',\n          'outNodes',\n          'outEdge',\n          'outEdges',\n          'downNode',\n          'downNodes',\n          'downEdge',\n          'downEdges',\n          'upNode',\n          'upNodes',\n          'upEdge',\n          'upEdges'\n        ],\n        this._handler\n      );\n\n    // Reference the renderer by its camera:\n    this.renderersPerCamera[camera.id].push(renderer);\n\n    return renderer;\n  };\n\n  /**\n   * This method kills a renderer.\n   *\n   * @param  {string|renderer} v The renderer to kill or its ID.\n   * @return {sigma}             Returns the instance.\n   */\n  sigma.prototype.killRenderer = function(v) {\n    v = typeof v === 'string' ? this.renderers[v] : v;\n\n    if (!v)\n      throw 'sigma.killRenderer: The renderer is undefined.';\n\n    var a = this.renderersPerCamera[v.camera.id],\n        i = a.indexOf(v);\n\n    if (i >= 0)\n      a.splice(i, 1);\n\n    if (v.kill)\n      v.kill();\n\n    delete this.renderers[v.id];\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method calls the \"render\" method of each renderer, with the same\n   * arguments than the \"render\" method, but will also check if the renderer\n   * has a \"process\" method, and call it if it exists.\n   *\n   * It is useful for quadtrees or WebGL processing, for instance.\n   *\n   * @param  {?object}  options Eventually some options to give to the refresh\n   *                            method.\n   * @return {sigma}            Returns the instance itself.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the \"options\"\n   * object:\n   *\n   *   {?boolean} skipIndexation A flag specifying wether or not the refresh\n   *                             function should reindex the graph in the\n   *                             quadtrees or not (default: false).\n   */\n  sigma.prototype.refresh = function(options) {\n    var i,\n        l,\n        k,\n        a,\n        c,\n        bounds,\n        prefix = 0;\n\n    options = options || {};\n\n    // Call each middleware:\n    a = this.middlewares || [];\n    for (i = 0, l = a.length; i < l; i++)\n      a[i].call(\n        this,\n        (i === 0) ? '' : 'tmp' + prefix + ':',\n        (i === l - 1) ? 'ready:' : ('tmp' + (++prefix) + ':')\n      );\n\n    // Then, for each camera, call the \"rescale\" middleware, unless the\n    // settings specify not to:\n    for (k in this.cameras) {\n      c = this.cameras[k];\n      if (\n        c.settings('autoRescale') &&\n        this.renderersPerCamera[c.id] &&\n        this.renderersPerCamera[c.id].length\n      )\n        sigma.middlewares.rescale.call(\n          this,\n          a.length ? 'ready:' : '',\n          c.readPrefix,\n          {\n            width: this.renderersPerCamera[c.id][0].width,\n            height: this.renderersPerCamera[c.id][0].height\n          }\n        );\n      else\n        sigma.middlewares.copy.call(\n          this,\n          a.length ? 'ready:' : '',\n          c.readPrefix\n        );\n\n      if (!options.skipIndexation) {\n        // Find graph boundaries:\n        bounds = sigma.utils.getBoundaries(\n          this.graph,\n          c.readPrefix\n        );\n\n        // Refresh quadtree:\n        c.quadtree.index(this.graph.nodes(), {\n          prefix: c.readPrefix,\n          bounds: {\n            x: bounds.minX,\n            y: bounds.minY,\n            width: bounds.maxX - bounds.minX,\n            height: bounds.maxY - bounds.minY\n          }\n        });\n\n        // Refresh edgequadtree:\n        if (\n          c.edgequadtree !== undefined &&\n          c.settings('drawEdges') &&\n          c.settings('enableEdgeHovering')\n        ) {\n          c.edgequadtree.index(this.graph, {\n            prefix: c.readPrefix,\n            bounds: {\n              x: bounds.minX,\n              y: bounds.minY,\n              width: bounds.maxX - bounds.minX,\n              height: bounds.maxY - bounds.minY\n            }\n          });\n        }\n      }\n    }\n\n    // Call each renderer:\n    a = Object.keys(this.renderers);\n    for (i = 0, l = a.length; i < l; i++)\n      if (this.renderers[a[i]].process) {\n        if (this.settings('skipErrors'))\n          try {\n            this.renderers[a[i]].process();\n          } catch (e) {\n            console.log(\n              'Warning: The renderer \"' + a[i] + '\" crashed on \".process()\"'\n            );\n          }\n        else\n          this.renderers[a[i]].process();\n      }\n\n    this.render();\n\n    return this;\n  };\n\n  /**\n   * This method calls the \"render\" method of each renderer.\n   *\n   * @return {sigma} Returns the instance itself.\n   */\n  sigma.prototype.render = function() {\n    var i,\n        l,\n        a,\n        prefix = 0;\n\n    // Call each renderer:\n    a = Object.keys(this.renderers);\n    for (i = 0, l = a.length; i < l; i++)\n      if (this.settings('skipErrors'))\n        try {\n          this.renderers[a[i]].render();\n        } catch (e) {\n          if (this.settings('verbose'))\n            console.log(\n              'Warning: The renderer \"' + a[i] + '\" crashed on \".render()\"'\n            );\n        }\n      else\n        this.renderers[a[i]].render();\n\n    return this;\n  };\n\n  /**\n   * This method calls the \"render\" method of each renderer that is bound to\n   * the specified camera. To improve the performances, if this method is\n   * called too often, the number of effective renderings is limitated to one\n   * per frame, unless you are using the \"force\" flag.\n   *\n   * @param  {sigma.classes.camera} camera The camera to render.\n   * @param  {?boolean}             force  If true, will render the camera\n   *                                       directly.\n   * @return {sigma}                       Returns the instance itself.\n   */\n  sigma.prototype.renderCamera = function(camera, force) {\n    var i,\n        l,\n        a,\n        self = this;\n\n    if (force) {\n      a = this.renderersPerCamera[camera.id];\n      for (i = 0, l = a.length; i < l; i++)\n        if (this.settings('skipErrors'))\n          try {\n            a[i].render();\n          } catch (e) {\n            if (this.settings('verbose'))\n              console.log(\n                'Warning: The renderer \"' + a[i].id + '\" crashed on \".render()\"'\n              );\n          }\n        else\n          a[i].render();\n    } else {\n      if (!this.cameraFrames[camera.id]) {\n        a = this.renderersPerCamera[camera.id];\n        for (i = 0, l = a.length; i < l; i++)\n          if (this.settings('skipErrors'))\n            try {\n              a[i].render();\n            } catch (e) {\n              if (this.settings('verbose'))\n                console.log(\n                  'Warning: The renderer \"' +\n                    a[i].id +\n                    '\" crashed on \".render()\"'\n                );\n            }\n          else\n            a[i].render();\n\n        this.cameraFrames[camera.id] = requestAnimationFrame(function() {\n          delete self.cameraFrames[camera.id];\n        });\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * This method calls the \"kill\" method of each module and destroys any\n   * reference from the instance.\n   */\n  sigma.prototype.kill = function() {\n    var k;\n\n    // Dispatching event\n    this.dispatchEvent('kill');\n\n    // Kill graph:\n    this.graph.kill();\n\n    // Kill middlewares:\n    delete this.middlewares;\n\n    // Kill each renderer:\n    for (k in this.renderers)\n      this.killRenderer(this.renderers[k]);\n\n    // Kill each camera:\n    for (k in this.cameras)\n      this.killCamera(this.cameras[k]);\n\n    delete this.renderers;\n    delete this.cameras;\n\n    // Kill everything else:\n    for (k in this)\n      if (this.hasOwnProperty(k))\n        delete this[k];\n\n    delete __instances[this.id];\n  };\n\n\n\n\n  /**\n   * Returns a clone of the instances object or a specific running instance.\n   *\n   * @param  {?string} id Eventually an instance ID.\n   * @return {object}     The related instance or a clone of the instances\n   *                      object.\n   */\n  sigma.instances = function(id) {\n    return arguments.length ?\n      __instances[id] :\n      sigma.utils.extend({}, __instances);\n  };\n\n\n\n  /**\n   * The current version of sigma:\n   */\n  sigma.version = '1.2.0';\n\n\n\n\n  /**\n   * EXPORT:\n   * *******\n   */\n  if (typeof this.sigma !== 'undefined')\n    throw 'An object called sigma is already in the global scope.';\n\n  this.sigma = sigma;\n\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 70:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Packages initialization:\n  sigma.utils.pkg('sigma.settings');\n\n  var settings = {\n    /**\n     * GRAPH SETTINGS:\n     * ***************\n     */\n    // {boolean} Indicates if the data have to be cloned in methods to add\n    //           nodes or edges.\n    clone: true,\n    // {boolean} Indicates if nodes \"id\" values and edges \"id\", \"source\" and\n    //           \"target\" values must be set as immutable.\n    immutable: true,\n    // {boolean} Indicates if sigma can log its errors and warnings.\n    verbose: false,\n\n\n    /**\n     * RENDERERS SETTINGS:\n     * *******************\n     */\n    // {string}\n    classPrefix: 'sigma',\n    // {string}\n    defaultNodeType: 'def',\n    // {string}\n    defaultEdgeType: 'def',\n    // {string}\n    defaultLabelColor: '#000',\n    // {string}\n    defaultEdgeColor: '#000',\n    // {string}\n    defaultNodeColor: '#000',\n    // {string}\n    defaultLabelSize: 14,\n    // {string} Indicates how to choose the edges color. Available values:\n    //          \"source\", \"target\", \"default\"\n    edgeColor: 'source',\n    // {number} Defines the minimal edge's arrow display size.\n    minArrowSize: 0,\n    // {string}\n    font: 'arial',\n    // {string} Example: 'bold'\n    fontStyle: '',\n    // {string} Indicates how to choose the labels color. Available values:\n    //          \"node\", \"default\"\n    labelColor: 'default',\n    // {string} Indicates how to choose the labels size. Available values:\n    //          \"fixed\", \"proportional\"\n    labelSize: 'fixed',\n    // {string} The ratio between the font size of the label and the node size.\n    labelSizeRatio: 1,\n    // {number} The minimum size a node must have to see its label displayed.\n    labelThreshold: 8,\n    // {number} The oversampling factor used in WebGL renderer.\n    webglOversamplingRatio: 2,\n    // {number} The size of the border of hovered nodes.\n    borderSize: 0,\n    // {number} The default hovered node border's color.\n    defaultNodeBorderColor: '#000',\n    // {number} The hovered node's label font. If not specified, will heritate\n    //          the \"font\" value.\n    hoverFont: '',\n    // {boolean} If true, then only one node can be hovered at a time.\n    singleHover: true,\n    // {string} Example: 'bold'\n    hoverFontStyle: '',\n    // {string} Indicates how to choose the hovered nodes shadow color.\n    //          Available values: \"node\", \"default\"\n    labelHoverShadow: 'default',\n    // {string}\n    labelHoverShadowColor: '#000',\n    // {string} Indicates how to choose the hovered nodes color.\n    //          Available values: \"node\", \"default\"\n    nodeHoverColor: 'node',\n    // {string}\n    defaultNodeHoverColor: '#000',\n    // {string} Indicates how to choose the hovered nodes background color.\n    //          Available values: \"node\", \"default\"\n    labelHoverBGColor: 'default',\n    // {string}\n    defaultHoverLabelBGColor: '#fff',\n    // {string} Indicates how to choose the hovered labels color.\n    //          Available values: \"node\", \"default\"\n    labelHoverColor: 'default',\n    // {string}\n    defaultLabelHoverColor: '#000',\n    // {string} Indicates how to choose the edges hover color. Available values:\n    //          \"edge\", \"default\"\n    edgeHoverColor: 'edge',\n    // {number} The size multiplicator of hovered edges.\n    edgeHoverSizeRatio: 1,\n    // {string}\n    defaultEdgeHoverColor: '#000',\n    // {boolean} Indicates if the edge extremities must be hovered when the\n    //           edge is hovered.\n    edgeHoverExtremities: false,\n    // {booleans} The different drawing modes:\n    //           false: Layered not displayed.\n    //           true: Layered displayed.\n    drawEdges: true,\n    drawNodes: true,\n    drawLabels: true,\n    drawEdgeLabels: false,\n    // {boolean} Indicates if the edges must be drawn in several frames or in\n    //           one frame, as the nodes and labels are drawn.\n    batchEdgesDrawing: false,\n    // {boolean} Indicates if the edges must be hidden during dragging and\n    //           animations.\n    hideEdgesOnMove: false,\n    // {numbers} The different batch sizes, when elements are displayed in\n    //           several frames.\n    canvasEdgesBatchSize: 500,\n    webglEdgesBatchSize: 1000,\n\n\n\n\n    /**\n     * RESCALE SETTINGS:\n     * *****************\n     */\n    // {string} Indicates of to scale the graph relatively to its container.\n    //          Available values: \"inside\", \"outside\"\n    scalingMode: 'inside',\n    // {number} The margin to keep around the graph.\n    sideMargin: 0,\n    // {number} Determine the size of the smallest and the biggest node / edges\n    //          on the screen. This mapping makes easier to display the graph,\n    //          avoiding too big nodes that take half of the screen, or too\n    //          small ones that are not readable. If the two parameters are\n    //          equals, then the minimal display size will be 0. And if they\n    //          are both equal to 0, then there is no mapping, and the radius\n    //          of the nodes will be their size.\n    minEdgeSize: 0.5,\n    maxEdgeSize: 1,\n    minNodeSize: 1,\n    maxNodeSize: 8,\n\n\n\n\n    /**\n     * CAPTORS SETTINGS:\n     * *****************\n     */\n    // {boolean}\n    touchEnabled: true,\n    // {boolean}\n    mouseEnabled: true,\n    // {boolean}\n    mouseWheelEnabled: true,\n    // {boolean}\n    doubleClickEnabled: true,\n    // {boolean} Defines whether the custom events such as \"clickNode\" can be\n    //           used.\n    eventsEnabled: true,\n    // {number} Defines by how much multiplicating the zooming level when the\n    //          user zooms with the mouse-wheel.\n    zoomingRatio: 1.7,\n    // {number} Defines by how much multiplicating the zooming level when the\n    //          user zooms by double clicking.\n    doubleClickZoomingRatio: 2.2,\n    // {number} The minimum zooming level.\n    zoomMin: 0.0625,\n    // {number} The maximum zooming level.\n    zoomMax: 2,\n    // {number} The duration of animations following a mouse scrolling.\n    mouseZoomDuration: 200,\n    // {number} The duration of animations following a mouse double click.\n    doubleClickZoomDuration: 200,\n    // {number} The duration of animations following a mouse dropping.\n    mouseInertiaDuration: 200,\n    // {number} The inertia power (mouse captor).\n    mouseInertiaRatio: 3,\n    // {number} The duration of animations following a touch dropping.\n    touchInertiaDuration: 200,\n    // {number} The inertia power (touch captor).\n    touchInertiaRatio: 3,\n    // {number} The maximum time between two clicks to make it a double click.\n    doubleClickTimeout: 300,\n    // {number} The maximum time between two taps to make it a double tap.\n    doubleTapTimeout: 300,\n    // {number} The maximum time of dragging to trigger intertia.\n    dragTimeout: 200,\n\n\n\n\n    /**\n     * GLOBAL SETTINGS:\n     * ****************\n     */\n    // {boolean} Determines whether the instance has to refresh itself\n    //           automatically when a \"resize\" event is dispatched from the\n    //           window object.\n    autoResize: true,\n    // {boolean} Determines whether the \"rescale\" middleware has to be called\n    //           automatically for each camera on refresh.\n    autoRescale: true,\n    // {boolean} If set to false, the camera method \"goTo\" will basically do\n    //           nothing.\n    enableCamera: true,\n    // {boolean} If set to false, the nodes cannot be hovered.\n    enableHovering: true,\n    // {boolean} If set to true, the edges can be hovered.\n    enableEdgeHovering: false,\n    // {number} The size of the area around the edges to activate hovering.\n    edgeHoverPrecision: 5,\n    // {boolean} If set to true, the rescale middleware will ignore node sizes\n    //           to determine the graphs boundings.\n    rescaleIgnoreSize: false,\n    // {boolean} Determines if the core has to try to catch errors on\n    //           rendering.\n    skipErrors: false,\n\n\n\n\n    /**\n     * CAMERA SETTINGS:\n     * ****************\n     */\n    // {number} The power degrees applied to the nodes/edges size relatively to\n    //          the zooming level. Basically:\n    //           > onScreenR = Math.pow(zoom, nodesPowRatio) * R\n    //           > onScreenT = Math.pow(zoom, edgesPowRatio) * T\n    nodesPowRatio: 0.5,\n    edgesPowRatio: 0.5,\n\n\n\n\n    /**\n     * ANIMATIONS SETTINGS:\n     * ********************\n     */\n    // {number} The default animation time.\n    animationsTime: 200\n  };\n\n  // Export the previously designed settings:\n  sigma.settings = sigma.utils.extend(sigma.settings || {}, settings);\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 71:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(global) {\n  'use strict';\n\n  /**\n   * http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n   * requestAnimationFrame polyfill by Erik Möller.\n   * fixes from Paul Irish and Tino Zijdel\n   * MIT license\n   */\n  var x,\n      lastTime = 0,\n      vendors = ['ms', 'moz', 'webkit', 'o'];\n\n  for (x = 0; x < vendors.length && !global.requestAnimationFrame; x++) {\n    global.requestAnimationFrame =\n      global[vendors[x] + 'RequestAnimationFrame'];\n    global.cancelAnimationFrame =\n      global[vendors[x] + 'CancelAnimationFrame'] ||\n      global[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!global.requestAnimationFrame)\n    global.requestAnimationFrame = function(callback, element) {\n      var currTime = new Date().getTime(),\n          timeToCall = Math.max(0, 16 - (currTime - lastTime)),\n          id = global.setTimeout(\n            function() {\n              callback(currTime + timeToCall);\n            },\n            timeToCall\n          );\n\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n  if (!global.cancelAnimationFrame)\n    global.cancelAnimationFrame = function(id) {\n      clearTimeout(id);\n    };\n\n  /**\n   * Function.prototype.bind polyfill found on MDN.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\n   * Public domain\n   */\n  if (!Function.prototype.bind)\n    Function.prototype.bind = function(oThis) {\n      if (typeof this !== 'function')\n        // Closest thing possible to the ECMAScript 5 internal IsCallable\n        // function:\n        throw new TypeError(\n          'Function.prototype.bind - what is trying to be bound is not callable'\n        );\n\n      var aArgs = Array.prototype.slice.call(arguments, 1),\n          fToBind = this,\n          fNOP,\n          fBound;\n\n      fNOP = function() {};\n      fBound = function() {\n        return fToBind.apply(\n          this instanceof fNOP && oThis ?\n            this :\n            oThis,\n          aArgs.concat(Array.prototype.slice.call(arguments))\n        );\n      };\n\n      fNOP.prototype = this.prototype;\n      fBound.prototype = new fNOP();\n\n      return fBound;\n    };\n})(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 72:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  var _root = this;\n\n  // Initialize packages:\n  sigma.utils = sigma.utils || {};\n\n  /**\n   * MISC UTILS:\n   */\n  /**\n   * This function takes any number of objects as arguments, copies from each\n   * of these objects each pair key/value into a new object, and finally\n   * returns this object.\n   *\n   * The arguments are parsed from the last one to the first one, such that\n   * when several objects have keys in common, the \"earliest\" object wins.\n   *\n   * Example:\n   * ********\n   *  > var o1 = {\n   *  >       a: 1,\n   *  >       b: 2,\n   *  >       c: '3'\n   *  >     },\n   *  >     o2 = {\n   *  >       c: '4',\n   *  >       d: [ 5 ]\n   *  >     };\n   *  > sigma.utils.extend(o1, o2);\n   *  > // Returns: {\n   *  > //   a: 1,\n   *  > //   b: 2,\n   *  > //   c: '3',\n   *  > //   d: [ 5 ]\n   *  > // };\n   *\n   * @param  {object+} Any number of objects.\n   * @return {object}  The merged object.\n   */\n  sigma.utils.extend = function() {\n    var i,\n        k,\n        res = {},\n        l = arguments.length;\n\n    for (i = l - 1; i >= 0; i--)\n      for (k in arguments[i])\n        res[k] = arguments[i][k];\n\n    return res;\n  };\n\n  /**\n   * A short \"Date.now()\" polyfill.\n   *\n   * @return {Number} The current time (in ms).\n   */\n  sigma.utils.dateNow = function() {\n    return Date.now ? Date.now() : new Date().getTime();\n  };\n\n  /**\n   * Takes a package name as parameter and checks at each lebel if it exists,\n   * and if it does not, creates it.\n   *\n   * Example:\n   * ********\n   *  > sigma.utils.pkg('a.b.c');\n   *  > a.b.c;\n   *  > // Object {};\n   *  >\n   *  > sigma.utils.pkg('a.b.d');\n   *  > a.b;\n   *  > // Object { c: {}, d: {} };\n   *\n   * @param  {string} pkgName The name of the package to create/find.\n   * @return {object}         The related package.\n   */\n  sigma.utils.pkg = function(pkgName) {\n    return (pkgName || '').split('.').reduce(function(context, objName) {\n      return (objName in context) ?\n        context[objName] :\n        (context[objName] = {});\n    }, _root);\n  };\n\n  /**\n   * Returns a unique incremental number ID.\n   *\n   * Example:\n   * ********\n   *  > sigma.utils.id();\n   *  > // 1;\n   *  >\n   *  > sigma.utils.id();\n   *  > // 2;\n   *  >\n   *  > sigma.utils.id();\n   *  > // 3;\n   *\n   * @param  {string} pkgName The name of the package to create/find.\n   * @return {object}         The related package.\n   */\n  sigma.utils.id = (function() {\n    var i = 0;\n    return function() {\n      return ++i;\n    };\n  })();\n\n  /**\n   * This function takes an hexa color (for instance \"#ffcc00\" or \"#fc0\") or a\n   * rgb / rgba color (like \"rgb(255,255,12)\" or \"rgba(255,255,12,1)\") and\n   * returns an integer equal to \"r * 255 * 255 + g * 255 + b\", to gain some\n   * memory in the data given to WebGL shaders.\n   *\n   * Note that the function actually caches its results for better performance.\n   *\n   * @param  {string} val The hexa or rgba color.\n   * @return {number}     The number value.\n   */\n  var floatColorCache = {};\n\n  sigma.utils.floatColor = function(val) {\n\n    // Is the color already computed?\n    if (floatColorCache[val])\n      return floatColorCache[val];\n\n    var original = val,\n        r = 0,\n        g = 0,\n        b = 0;\n\n    if (val[0] === '#') {\n      val = val.slice(1);\n\n      if (val.length === 3) {\n        r = parseInt(val.charAt(0) + val.charAt(0), 16);\n        g = parseInt(val.charAt(1) + val.charAt(1), 16);\n        b = parseInt(val.charAt(2) + val.charAt(2), 16);\n      }\n      else {\n        r = parseInt(val.charAt(0) + val.charAt(1), 16);\n        g = parseInt(val.charAt(2) + val.charAt(3), 16);\n        b = parseInt(val.charAt(4) + val.charAt(5), 16);\n      }\n    } else if (val.match(/^ *rgba? *\\(/)) {\n      val = val.match(\n        /^ *rgba? *\\( *([0-9]*) *, *([0-9]*) *, *([0-9]*) *(,.*)?\\) *$/\n      );\n      r = +val[1];\n      g = +val[2];\n      b = +val[3];\n    }\n\n    var color = (\n      r * 256 * 256 +\n      g * 256 +\n      b\n    );\n\n    // Caching the color\n    floatColorCache[original] = color;\n\n    return color;\n  };\n\n    /**\n   * Perform a zoom into a camera, with or without animation, to the\n   * coordinates indicated using a specified ratio.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the animation\n   * object:\n   *\n   *   {?number} duration     An amount of time that means the duration of the\n   *                          animation. If this parameter doesn't exist the\n   *                          zoom will be performed without animation.\n   *   {?function} onComplete A function to perform it after the animation. It\n   *                          will be performed even if there is no duration.\n   *\n   * @param {camera}     The camera where perform the zoom.\n   * @param {x}          The X coordiantion where the zoom goes.\n   * @param {y}          The Y coordiantion where the zoom goes.\n   * @param {ratio}      The ratio to apply it to the current camera ratio.\n   * @param {?animation} A dictionary with options for a possible animation.\n   */\n  sigma.utils.zoomTo = function(camera, x, y, ratio, animation) {\n    var settings = camera.settings,\n        count,\n        newRatio,\n        animationSettings,\n        coordinates;\n\n    // Create the newRatio dealing with min / max:\n    newRatio = Math.max(\n      settings('zoomMin'),\n      Math.min(\n        settings('zoomMax'),\n        camera.ratio * ratio\n      )\n    );\n\n    // Check that the new ratio is different from the initial one:\n    if (newRatio !== camera.ratio) {\n      // Create the coordinates variable:\n      ratio = newRatio / camera.ratio;\n      coordinates = {\n        x: x * (1 - ratio) + camera.x,\n        y: y * (1 - ratio) + camera.y,\n        ratio: newRatio\n      };\n\n      if (animation && animation.duration) {\n        // Complete the animation setings:\n        count = sigma.misc.animation.killAll(camera);\n        animation = sigma.utils.extend(\n          animation,\n          {\n            easing: count ? 'quadraticOut' : 'quadraticInOut'\n          }\n        );\n\n        sigma.misc.animation.camera(camera, coordinates, animation);\n      } else {\n        camera.goTo(coordinates);\n        if (animation && animation.onComplete)\n          animation.onComplete();\n      }\n    }\n  };\n\n  /**\n   * Return the control point coordinates for a quadratic bezier curve.\n   *\n   * @param  {number} x1  The X coordinate of the start point.\n   * @param  {number} y1  The Y coordinate of the start point.\n   * @param  {number} x2  The X coordinate of the end point.\n   * @param  {number} y2  The Y coordinate of the end point.\n   * @return {x,y}        The control point coordinates.\n   */\n  sigma.utils.getQuadraticControlPoint = function(x1, y1, x2, y2) {\n    return {\n      x: (x1 + x2) / 2 + (y2 - y1) / 4,\n      y: (y1 + y2) / 2 + (x1 - x2) / 4\n    };\n  };\n\n  /**\n    * Compute the coordinates of the point positioned\n    * at length t in the quadratic bezier curve.\n    *\n    * @param  {number} t  In [0,1] the step percentage to reach\n    *                     the point in the curve from the context point.\n    * @param  {number} x1 The X coordinate of the context point.\n    * @param  {number} y1 The Y coordinate of the context point.\n    * @param  {number} x2 The X coordinate of the ending point.\n    * @param  {number} y2 The Y coordinate of the ending point.\n    * @param  {number} xi The X coordinate of the control point.\n    * @param  {number} yi The Y coordinate of the control point.\n    * @return {object}    {x,y}.\n  */\n  sigma.utils.getPointOnQuadraticCurve = function(t, x1, y1, x2, y2, xi, yi) {\n    // http://stackoverflow.com/a/5634528\n    return {\n      x: Math.pow(1 - t, 2) * x1 + 2 * (1 - t) * t * xi + Math.pow(t, 2) * x2,\n      y: Math.pow(1 - t, 2) * y1 + 2 * (1 - t) * t * yi + Math.pow(t, 2) * y2\n    };\n  };\n\n  /**\n    * Compute the coordinates of the point positioned\n    * at length t in the cubic bezier curve.\n    *\n    * @param  {number} t  In [0,1] the step percentage to reach\n    *                     the point in the curve from the context point.\n    * @param  {number} x1 The X coordinate of the context point.\n    * @param  {number} y1 The Y coordinate of the context point.\n    * @param  {number} x2 The X coordinate of the end point.\n    * @param  {number} y2 The Y coordinate of the end point.\n    * @param  {number} cx The X coordinate of the first control point.\n    * @param  {number} cy The Y coordinate of the first control point.\n    * @param  {number} dx The X coordinate of the second control point.\n    * @param  {number} dy The Y coordinate of the second control point.\n    * @return {object}    {x,y} The point at t.\n  */\n  sigma.utils.getPointOnBezierCurve =\n    function(t, x1, y1, x2, y2, cx, cy, dx, dy) {\n    // http://stackoverflow.com/a/15397596\n    // Blending functions:\n    var B0_t = Math.pow(1 - t, 3),\n        B1_t = 3 * t * Math.pow(1 - t, 2),\n        B2_t = 3 * Math.pow(t, 2) * (1 - t),\n        B3_t = Math.pow(t, 3);\n\n    return {\n      x: (B0_t * x1) + (B1_t * cx) + (B2_t * dx) + (B3_t * x2),\n      y: (B0_t * y1) + (B1_t * cy) + (B2_t * dy) + (B3_t * y2)\n    };\n  };\n\n  /**\n   * Return the coordinates of the two control points for a self loop (i.e.\n   * where the start point is also the end point) computed as a cubic bezier\n   * curve.\n   *\n   * @param  {number} x    The X coordinate of the node.\n   * @param  {number} y    The Y coordinate of the node.\n   * @param  {number} size The node size.\n   * @return {x1,y1,x2,y2} The coordinates of the two control points.\n   */\n  sigma.utils.getSelfLoopControlPoints = function(x , y, size) {\n    return {\n      x1: x - size * 7,\n      y1: y,\n      x2: x,\n      y2: y + size * 7\n    };\n  };\n\n  /**\n   * Return the euclidian distance between two points of a plane\n   * with an orthonormal basis.\n   *\n   * @param  {number} x1  The X coordinate of the first point.\n   * @param  {number} y1  The Y coordinate of the first point.\n   * @param  {number} x2  The X coordinate of the second point.\n   * @param  {number} y2  The Y coordinate of the second point.\n   * @return {number}     The euclidian distance.\n   */\n  sigma.utils.getDistance = function(x0, y0, x1, y1) {\n    return Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n  };\n\n  /**\n   * Return the coordinates of the intersection points of two circles.\n   *\n   * @param  {number} x0  The X coordinate of center location of the first\n   *                      circle.\n   * @param  {number} y0  The Y coordinate of center location of the first\n   *                      circle.\n   * @param  {number} r0  The radius of the first circle.\n   * @param  {number} x1  The X coordinate of center location of the second\n   *                      circle.\n   * @param  {number} y1  The Y coordinate of center location of the second\n   *                      circle.\n   * @param  {number} r1  The radius of the second circle.\n   * @return {xi,yi}      The coordinates of the intersection points.\n   */\n  sigma.utils.getCircleIntersection = function(x0, y0, r0, x1, y1, r1) {\n    // http://stackoverflow.com/a/12219802\n    var a, dx, dy, d, h, rx, ry, x2, y2;\n\n    // dx and dy are the vertical and horizontal distances between the circle\n    // centers:\n    dx = x1 - x0;\n    dy = y1 - y0;\n\n    // Determine the straight-line distance between the centers:\n    d = Math.sqrt((dy * dy) + (dx * dx));\n\n    // Check for solvability:\n    if (d > (r0 + r1)) {\n        // No solution. circles do not intersect.\n        return false;\n    }\n    if (d < Math.abs(r0 - r1)) {\n        // No solution. one circle is contained in the other.\n        return false;\n    }\n\n    //'point 2' is the point where the line through the circle intersection\n    // points crosses the line between the circle centers.\n\n    // Determine the distance from point 0 to point 2:\n    a = ((r0 * r0) - (r1 * r1) + (d * d)) / (2.0 * d);\n\n    // Determine the coordinates of point 2:\n    x2 = x0 + (dx * a / d);\n    y2 = y0 + (dy * a / d);\n\n    // Determine the distance from point 2 to either of the intersection\n    // points:\n    h = Math.sqrt((r0 * r0) - (a * a));\n\n    // Determine the offsets of the intersection points from point 2:\n    rx = -dy * (h / d);\n    ry = dx * (h / d);\n\n    // Determine the absolute intersection points:\n    var xi = x2 + rx;\n    var xi_prime = x2 - rx;\n    var yi = y2 + ry;\n    var yi_prime = y2 - ry;\n\n    return {xi: xi, xi_prime: xi_prime, yi: yi, yi_prime: yi_prime};\n  };\n\n  /**\n    * Check if a point is on a line segment.\n    *\n    * @param  {number} x       The X coordinate of the point to check.\n    * @param  {number} y       The Y coordinate of the point to check.\n    * @param  {number} x1      The X coordinate of the line start point.\n    * @param  {number} y1      The Y coordinate of the line start point.\n    * @param  {number} x2      The X coordinate of the line end point.\n    * @param  {number} y2      The Y coordinate of the line end point.\n    * @param  {number} epsilon The precision (consider the line thickness).\n    * @return {boolean}        True if point is \"close to\" the line\n    *                          segment, false otherwise.\n  */\n  sigma.utils.isPointOnSegment = function(x, y, x1, y1, x2, y2, epsilon) {\n    // http://stackoverflow.com/a/328122\n    var crossProduct = Math.abs((y - y1) * (x2 - x1) - (x - x1) * (y2 - y1)),\n        d = sigma.utils.getDistance(x1, y1, x2, y2),\n        nCrossProduct = crossProduct / d; // normalized cross product\n\n    return (nCrossProduct < epsilon &&\n     Math.min(x1, x2) <= x && x <= Math.max(x1, x2) &&\n     Math.min(y1, y2) <= y && y <= Math.max(y1, y2));\n  };\n\n  /**\n    * Check if a point is on a quadratic bezier curve segment with a thickness.\n    *\n    * @param  {number} x       The X coordinate of the point to check.\n    * @param  {number} y       The Y coordinate of the point to check.\n    * @param  {number} x1      The X coordinate of the curve start point.\n    * @param  {number} y1      The Y coordinate of the curve start point.\n    * @param  {number} x2      The X coordinate of the curve end point.\n    * @param  {number} y2      The Y coordinate of the curve end point.\n    * @param  {number} cpx     The X coordinate of the curve control point.\n    * @param  {number} cpy     The Y coordinate of the curve control point.\n    * @param  {number} epsilon The precision (consider the line thickness).\n    * @return {boolean}        True if (x,y) is on the curve segment,\n    *                          false otherwise.\n  */\n  sigma.utils.isPointOnQuadraticCurve =\n    function(x, y, x1, y1, x2, y2, cpx, cpy, epsilon) {\n    // Fails if the point is too far from the extremities of the segment,\n    // preventing for more costly computation:\n    var dP1P2 = sigma.utils.getDistance(x1, y1, x2, y2);\n    if (Math.abs(x - x1) > dP1P2 || Math.abs(y - y1) > dP1P2) {\n      return false;\n    }\n\n    var dP1 = sigma.utils.getDistance(x, y, x1, y1),\n        dP2 = sigma.utils.getDistance(x, y, x2, y2),\n        t = 0.5,\n        r = (dP1 < dP2) ? -0.01 : 0.01,\n        rThreshold = 0.001,\n        i = 100,\n        pt = sigma.utils.getPointOnQuadraticCurve(t, x1, y1, x2, y2, cpx, cpy),\n        dt = sigma.utils.getDistance(x, y, pt.x, pt.y),\n        old_dt;\n\n    // This algorithm minimizes the distance from the point to the curve. It\n    // find the optimal t value where t=0 is the start point and t=1 is the end\n    // point of the curve, starting from t=0.5.\n    // It terminates because it runs a maximum of i interations.\n    while (i-- > 0 &&\n      t >= 0 && t <= 1 &&\n      (dt > epsilon) &&\n      (r > rThreshold || r < -rThreshold)) {\n      old_dt = dt;\n      pt = sigma.utils.getPointOnQuadraticCurve(t, x1, y1, x2, y2, cpx, cpy);\n      dt = sigma.utils.getDistance(x, y, pt.x, pt.y);\n\n      if (dt > old_dt) {\n        // not the right direction:\n        // halfstep in the opposite direction\n        r = -r / 2;\n        t += r;\n      }\n      else if (t + r < 0 || t + r > 1) {\n        // oops, we've gone too far:\n        // revert with a halfstep\n        r = r / 2;\n        dt = old_dt;\n      }\n      else {\n        // progress:\n        t += r;\n      }\n    }\n\n    return dt < epsilon;\n  };\n\n\n  /**\n    * Check if a point is on a cubic bezier curve segment with a thickness.\n    *\n    * @param  {number} x       The X coordinate of the point to check.\n    * @param  {number} y       The Y coordinate of the point to check.\n    * @param  {number} x1      The X coordinate of the curve start point.\n    * @param  {number} y1      The Y coordinate of the curve start point.\n    * @param  {number} x2      The X coordinate of the curve end point.\n    * @param  {number} y2      The Y coordinate of the curve end point.\n    * @param  {number} cpx1    The X coordinate of the 1st curve control point.\n    * @param  {number} cpy1    The Y coordinate of the 1st curve control point.\n    * @param  {number} cpx2    The X coordinate of the 2nd curve control point.\n    * @param  {number} cpy2    The Y coordinate of the 2nd curve control point.\n    * @param  {number} epsilon The precision (consider the line thickness).\n    * @return {boolean}        True if (x,y) is on the curve segment,\n    *                          false otherwise.\n  */\n  sigma.utils.isPointOnBezierCurve =\n    function(x, y, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2, epsilon) {\n    // Fails if the point is too far from the extremities of the segment,\n    // preventing for more costly computation:\n    var dP1CP1 = sigma.utils.getDistance(x1, y1, cpx1, cpy1);\n    if (Math.abs(x - x1) > dP1CP1 || Math.abs(y - y1) > dP1CP1) {\n      return false;\n    }\n\n    var dP1 = sigma.utils.getDistance(x, y, x1, y1),\n        dP2 = sigma.utils.getDistance(x, y, x2, y2),\n        t = 0.5,\n        r = (dP1 < dP2) ? -0.01 : 0.01,\n        rThreshold = 0.001,\n        i = 100,\n        pt = sigma.utils.getPointOnBezierCurve(\n          t, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2),\n        dt = sigma.utils.getDistance(x, y, pt.x, pt.y),\n        old_dt;\n\n    // This algorithm minimizes the distance from the point to the curve. It\n    // find the optimal t value where t=0 is the start point and t=1 is the end\n    // point of the curve, starting from t=0.5.\n    // It terminates because it runs a maximum of i interations.\n    while (i-- > 0 &&\n      t >= 0 && t <= 1 &&\n      (dt > epsilon) &&\n      (r > rThreshold || r < -rThreshold)) {\n      old_dt = dt;\n      pt = sigma.utils.getPointOnBezierCurve(\n        t, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2);\n      dt = sigma.utils.getDistance(x, y, pt.x, pt.y);\n\n      if (dt > old_dt) {\n        // not the right direction:\n        // halfstep in the opposite direction\n        r = -r / 2;\n        t += r;\n      }\n      else if (t + r < 0 || t + r > 1) {\n        // oops, we've gone too far:\n        // revert with a halfstep\n        r = r / 2;\n        dt = old_dt;\n      }\n      else {\n        // progress:\n        t += r;\n      }\n    }\n\n    return dt < epsilon;\n  };\n\n\n  /**\n   * ************\n   * EVENTS UTILS:\n   * ************\n   */\n  /**\n   * Here are some useful functions to unify extraction of the information we\n   * need with mouse events and touch events, from different browsers:\n   */\n\n  /**\n   * Extract the local X position from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The local X value of the mouse.\n   */\n  sigma.utils.getX = function(e) {\n    return (\n      (e.offsetX !== undefined && e.offsetX) ||\n      (e.layerX !== undefined && e.layerX) ||\n      (e.clientX !== undefined && e.clientX)\n    );\n  };\n\n  /**\n   * Extract the local Y position from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The local Y value of the mouse.\n   */\n  sigma.utils.getY = function(e) {\n    return (\n      (e.offsetY !== undefined && e.offsetY) ||\n      (e.layerY !== undefined && e.layerY) ||\n      (e.clientY !== undefined && e.clientY)\n    );\n  };\n\n  /**\n   * The pixel ratio of the screen. Taking zoom into account\n   *\n   * @return {number}        Pixel ratio of the screen\n   */\n  sigma.utils.getPixelRatio = function() {\n    var ratio = 1;\n    if (window.screen.deviceXDPI !== undefined &&\n         window.screen.logicalXDPI !== undefined &&\n         window.screen.deviceXDPI > window.screen.logicalXDPI) {\n        ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    }\n    else if (window.devicePixelRatio !== undefined) {\n        ratio = window.devicePixelRatio;\n    }\n    return ratio;\n  };\n\n  /**\n   * Extract the width from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The width of the event's target.\n   */\n  sigma.utils.getWidth = function(e) {\n    var w = (!e.target.ownerSVGElement) ?\n              e.target.width :\n              e.target.ownerSVGElement.width;\n\n    return (\n      (typeof w === 'number' && w) ||\n      (w !== undefined && w.baseVal !== undefined && w.baseVal.value)\n    );\n  };\n\n  /**\n   * Extract the center from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {object}   The center of the event's target.\n   */\n  sigma.utils.getCenter = function(e) {\n    var ratio = e.target.namespaceURI.indexOf('svg') !== -1 ? 1 :\n        sigma.utils.getPixelRatio();\n    return {\n      x: sigma.utils.getWidth(e) / (2 * ratio),\n      y: sigma.utils.getHeight(e) / (2 * ratio)\n    };\n  };\n\n  /**\n   * Convert mouse coords to sigma coords\n   *\n   * @param  {event}   e A mouse or touch event.\n   * @param  {number?} x The x coord to convert\n   * @param  {number?} x The y coord to convert\n   *\n   * @return {object}    The standardized event\n   */\n  sigma.utils.mouseCoords = function(e, x, y) {\n    x = x || sigma.utils.getX(e);\n    y = y || sigma.utils.getY(e);\n    return {\n        x: x - sigma.utils.getCenter(e).x,\n        y: y - sigma.utils.getCenter(e).y,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey,\n        shiftKey: e.shiftKey\n    };\n  };\n\n  /**\n   * Extract the height from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The height of the event's target.\n   */\n  sigma.utils.getHeight = function(e) {\n    var h = (!e.target.ownerSVGElement) ?\n              e.target.height :\n              e.target.ownerSVGElement.height;\n\n    return (\n      (typeof h === 'number' && h) ||\n      (h !== undefined && h.baseVal !== undefined && h.baseVal.value)\n    );\n  };\n\n  /**\n   * Extract the wheel delta from a mouse or touch event.\n   *\n   * @param  {event}  e A mouse or touch event.\n   * @return {number}   The wheel delta of the mouse.\n   */\n  sigma.utils.getDelta = function(e) {\n    return (\n      (e.wheelDelta !== undefined && e.wheelDelta) ||\n      (e.detail !== undefined && -e.detail)\n    );\n  };\n\n  /**\n   * Returns the offset of a DOM element.\n   *\n   * @param  {DOMElement} dom The element to retrieve the position.\n   * @return {object}         The offset of the DOM element (top, left).\n   */\n  sigma.utils.getOffset = function(dom) {\n    var left = 0,\n        top = 0;\n\n    while (dom) {\n      top = top + parseInt(dom.offsetTop);\n      left = left + parseInt(dom.offsetLeft);\n      dom = dom.offsetParent;\n    }\n\n    return {\n      top: top,\n      left: left\n    };\n  };\n\n  /**\n   * Simulates a \"double click\" event.\n   *\n   * @param  {HTMLElement} target   The event target.\n   * @param  {string}      type     The event type.\n   * @param  {function}    callback The callback to execute.\n   */\n  sigma.utils.doubleClick = function(target, type, callback) {\n    var clicks = 0,\n        self = this,\n        handlers;\n\n    target._doubleClickHandler = target._doubleClickHandler || {};\n    target._doubleClickHandler[type] = target._doubleClickHandler[type] || [];\n    handlers = target._doubleClickHandler[type];\n\n    handlers.push(function(e) {\n      clicks++;\n\n      if (clicks === 2) {\n        clicks = 0;\n        return callback(e);\n      } else if (clicks === 1) {\n        setTimeout(function() {\n          clicks = 0;\n        }, sigma.settings.doubleClickTimeout);\n      }\n    });\n\n    target.addEventListener(type, handlers[handlers.length - 1], false);\n  };\n\n  /**\n   * Unbind simulated \"double click\" events.\n   *\n   * @param  {HTMLElement} target   The event target.\n   * @param  {string}      type     The event type.\n   */\n  sigma.utils.unbindDoubleClick = function(target, type) {\n    var handler,\n        handlers = (target._doubleClickHandler || {})[type] || [];\n\n    while ((handler = handlers.pop())) {\n      target.removeEventListener(type, handler);\n    }\n\n    delete (target._doubleClickHandler || {})[type];\n  };\n\n\n\n\n  /**\n   * Here are just some of the most basic easing functions, used for the\n   * animated camera \"goTo\" calls.\n   *\n   * If you need some more easings functions, don't hesitate to add them to\n   * sigma.utils.easings. But I will not add some more here or merge PRs\n   * containing, because I do not want sigma sources full of overkill and never\n   * used stuff...\n   */\n  sigma.utils.easings = sigma.utils.easings || {};\n  sigma.utils.easings.linearNone = function(k) {\n    return k;\n  };\n  sigma.utils.easings.quadraticIn = function(k) {\n    return k * k;\n  };\n  sigma.utils.easings.quadraticOut = function(k) {\n    return k * (2 - k);\n  };\n  sigma.utils.easings.quadraticInOut = function(k) {\n    if ((k *= 2) < 1)\n      return 0.5 * k * k;\n    return - 0.5 * (--k * (k - 2) - 1);\n  };\n  sigma.utils.easings.cubicIn = function(k) {\n    return k * k * k;\n  };\n  sigma.utils.easings.cubicOut = function(k) {\n    return --k * k * k + 1;\n  };\n  sigma.utils.easings.cubicInOut = function(k) {\n    if ((k *= 2) < 1)\n      return 0.5 * k * k * k;\n    return 0.5 * ((k -= 2) * k * k + 2);\n  };\n\n\n\n\n  /**\n   * ************\n   * WEBGL UTILS:\n   * ************\n   */\n  /**\n   * Loads a WebGL shader and returns it.\n   *\n   * @param  {WebGLContext}           gl           The WebGLContext to use.\n   * @param  {string}                 shaderSource The shader source.\n   * @param  {number}                 shaderType   The type of shader.\n   * @param  {function(string): void} error        Callback for errors.\n   * @return {WebGLShader}                         The created shader.\n   */\n  sigma.utils.loadShader = function(gl, shaderSource, shaderType, error) {\n    var compiled,\n        shader = gl.createShader(shaderType);\n\n    // Load the shader source\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check the compile status\n    compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    // If something went wrong:\n    if (!compiled) {\n      if (error) {\n        error(\n          'Error compiling shader \"' + shader + '\":' +\n          gl.getShaderInfoLog(shader)\n        );\n      }\n\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  };\n\n  /**\n   * Creates a program, attaches shaders, binds attrib locations, links the\n   * program and calls useProgram.\n   *\n   * @param  {Array.<WebGLShader>}    shaders   The shaders to attach.\n   * @param  {Array.<string>}         attribs   The attribs names.\n   * @param  {Array.<number>}         locations The locations for the attribs.\n   * @param  {function(string): void} error     Callback for errors.\n   * @return {WebGLProgram}                     The created program.\n   */\n  sigma.utils.loadProgram = function(gl, shaders, attribs, loc, error) {\n    var i,\n        linked,\n        program = gl.createProgram();\n\n    for (i = 0; i < shaders.length; ++i)\n      gl.attachShader(program, shaders[i]);\n\n    if (attribs)\n      for (i = 0; i < attribs.length; ++i)\n        gl.bindAttribLocation(\n          program,\n          locations ? locations[i] : i,\n          opt_attribs[i]\n        );\n\n    gl.linkProgram(program);\n\n    // Check the link status\n    linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n      if (error)\n        error('Error in program linking: ' + gl.getProgramInfoLog(program));\n\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    return program;\n  };\n\n\n\n\n  /**\n   * *********\n   * MATRICES:\n   * *********\n   * The following utils are just here to help generating the transformation\n   * matrices for the WebGL renderers.\n   */\n  sigma.utils.pkg('sigma.utils.matrices');\n\n  /**\n   * The returns a 3x3 translation matrix.\n   *\n   * @param  {number} dx The X translation.\n   * @param  {number} dy The Y translation.\n   * @return {array}     Returns the matrix.\n   */\n  sigma.utils.matrices.translation = function(dx, dy) {\n    return [\n      1, 0, 0,\n      0, 1, 0,\n      dx, dy, 1\n    ];\n  };\n\n  /**\n   * The returns a 3x3 or 2x2 rotation matrix.\n   *\n   * @param  {number}  angle The rotation angle.\n   * @param  {boolean} m2    If true, the function will return a 2x2 matrix.\n   * @return {array}         Returns the matrix.\n   */\n  sigma.utils.matrices.rotation = function(angle, m2) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n\n    return m2 ? [\n      cos, -sin,\n      sin, cos\n    ] : [\n      cos, -sin, 0,\n      sin, cos, 0,\n      0, 0, 1\n    ];\n  };\n\n  /**\n   * The returns a 3x3 or 2x2 homothetic transformation matrix.\n   *\n   * @param  {number}  ratio The scaling ratio.\n   * @param  {boolean} m2    If true, the function will return a 2x2 matrix.\n   * @return {array}         Returns the matrix.\n   */\n  sigma.utils.matrices.scale = function(ratio, m2) {\n    return m2 ? [\n      ratio, 0,\n      0, ratio\n    ] : [\n      ratio, 0, 0,\n      0, ratio, 0,\n      0, 0, 1\n    ];\n  };\n\n  /**\n   * The returns a 3x3 or 2x2 homothetic transformation matrix.\n   *\n   * @param  {array}   a  The first matrix.\n   * @param  {array}   b  The second matrix.\n   * @param  {boolean} m2 If true, the function will assume both matrices are\n   *                      2x2.\n   * @return {array}      Returns the matrix.\n   */\n  sigma.utils.matrices.multiply = function(a, b, m2) {\n    var l = m2 ? 2 : 3,\n        a00 = a[0 * l + 0],\n        a01 = a[0 * l + 1],\n        a02 = a[0 * l + 2],\n        a10 = a[1 * l + 0],\n        a11 = a[1 * l + 1],\n        a12 = a[1 * l + 2],\n        a20 = a[2 * l + 0],\n        a21 = a[2 * l + 1],\n        a22 = a[2 * l + 2],\n        b00 = b[0 * l + 0],\n        b01 = b[0 * l + 1],\n        b02 = b[0 * l + 2],\n        b10 = b[1 * l + 0],\n        b11 = b[1 * l + 1],\n        b12 = b[1 * l + 2],\n        b20 = b[2 * l + 0],\n        b21 = b[2 * l + 1],\n        b22 = b[2 * l + 2];\n\n    return m2 ? [\n      a00 * b00 + a01 * b10,\n      a00 * b01 + a01 * b11,\n      a10 * b00 + a11 * b10,\n      a10 * b01 + a11 * b11\n    ] : [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/main.js\n// module id = 3\n// module chunks = 0","// @flow\n\nconst palette = [\"#5DA5DA\",\"#60BD68\",\"#B2912F\",\"#F15854\",\"#DECF3F\",\"#FAA43A\",\"#B276B2\",\"#F17CB0\",\"#4D4D4D\"]\n\n/*\n\tDefault node and edge transformation for NeoCypher,\n\tclass has 2 functions: node() and edge() which transform data from Neo4j format into Sigma.\n\n\tAlso it iterates colors assignments from palette based on node.label and edge.type.\n*/\n\nclass NeoGraphItemsProducers {\n\t_currentColor: number;\n\t_colorsMap: Object;\n\tconstructor() {\n\t\t\tthis._currentColor = 0\n\t\t\tthis._colorsMap = {}\n\t}\n\tnode(node: Neo4j$Node): Sigma$Node {\n\t\treturn {\n\t\t\tid : node.id,\n\t\t\tlabel : node.properties.name,\n\t\t\tx : Math.random(),\n\t\t\ty : Math.random(),\n\t\t\tsize : 1,\n\t\t\tcolor : this.colorsMap(node.labels[0]),\n\t\t\tneo4j_labels : node.labels,\n\t\t\tneo4j_data : node.properties\n\t\t}\n\t}\n\tedge(edge: Neo4j$Edge): Sigma$Edge {\n\t\treturn {\n\t\t\tid : edge.id,\n\t\t\tlabel : edge.type,\n\t\t\tsource : edge.startNode,\n\t\t\ttarget : edge.endNode,\n\t\t\tcolor : this.colorsMap(edge.type),\n\t\t\tneo4j_type : edge.type,\n\t\t\tneo4j_data : edge.properties\n\t\t}\n\t}\n\tcolorsMap(label: ?string): string {\n\t\tlet color = this._colorsMap[label];\n\t\tif(!color) {\n\t\t\tcolor = palette[this._currentColor++ % palette.length]\n\t\t\tthis._colorsMap[label] = color\n\t\t}\n\t\treturn color\n\t}\n}\n\nexport default NeoGraphItemsProducers;\n\n\n\n// WEBPACK FOOTER //\n// ./src/NeoGraphItemsProducers.js","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 120);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 120:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.parsers');\n  sigma.utils.pkg('sigma.utils');\n\n  /**\n   * Just an XmlHttpRequest polyfill for different IE versions.\n   *\n   * @return {*} The XHR like object.\n   */\n  sigma.utils.xhr = function() {\n    if (window.XMLHttpRequest)\n      return new XMLHttpRequest();\n\n    var names,\n        i;\n\n    if (window.ActiveXObject) {\n      names = [\n        'Msxml2.XMLHTTP.6.0',\n        'Msxml2.XMLHTTP.3.0',\n        'Msxml2.XMLHTTP',\n        'Microsoft.XMLHTTP'\n      ];\n\n      for (i in names)\n        try {\n          return new ActiveXObject(names[i]);\n        } catch (e) {}\n    }\n\n    return null;\n  };\n\n  /**\n   * This function loads a JSON file and creates a new sigma instance or\n   * updates the graph of a given instance. It is possible to give a callback\n   * that will be executed at the end of the process.\n   *\n   * @param  {string}       url      The URL of the JSON file.\n   * @param  {object|sigma} sig      A sigma configuration object or a sigma\n   *                                 instance.\n   * @param  {?function}    callback Eventually a callback to execute after\n   *                                 having parsed the file. It will be called\n   *                                 with the related sigma instance as\n   *                                 parameter.\n   */\n  sigma.parsers.json = function(url, sig, callback) {\n    var graph,\n        xhr = sigma.utils.xhr();\n\n    if (!xhr)\n      throw 'XMLHttpRequest not supported, cannot load the file.';\n\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        graph = JSON.parse(xhr.responseText);\n\n        // Update the instance's graph:\n        if (sig instanceof sigma) {\n          sig.graph.clear();\n          sig.graph.read(graph);\n\n        // ...or instantiate sigma if needed:\n        } else if (typeof sig === 'object') {\n          sig.graph = graph;\n          sig = new sigma(sig);\n\n        // ...or it's finally the callback:\n        } else if (typeof sig === 'function') {\n          callback = sig;\n          sig = null;\n        }\n\n        // Call the callback if specified:\n        if (callback)\n          callback(sig || graph);\n      }\n    };\n    xhr.send();\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/parsers.json.js\n// module id = 5\n// module chunks = 0","// @flow\n\nimport React from 'react'\nimport '../sigma/edges'\n\ntype Props = {\n\tdefault?: Sigma$Edge$Shapes,\n\tsigma?: Sigma\n};\n\n/**\n\nEdgeShapes component, interface for customEdgeShapes sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\nNote! this Component requires \"canvas\" renderer to work.\n\nTo assign a shape renderer to an edge, simply set edge.type='shape-name' e.g. edge.type='dotted'.\n```\n<Sigma renderer=\"canvas\" graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n\t<EdgeShapes default=\"dotted\"/>\n</Sigma>\n```\n\nSupported shapes\n```\ntype Sigma$Edge$Shapes = \"line\" | \"arrow\" | \"curve\" | \"curvedArrow\" | \"dashed\" | \"dotted\" | \"parallel\" | \"tapered\";\n```\n\nSee [plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customEdgeShapes)\nfor more datails on implementation.\n\n@param {string} default  set default sigma edge to be applied to edges where type is not set\n\n**/\n\nclass EdgeShapes extends React.Component {\n\tprops: Props;\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tif(this.props.sigma && this.props.default)\n\t\t\tthis.props.sigma.settings({defaultEdgeType:this.props.default})\n\t}\n\n\trender = () => null\n}\n\nexport default EdgeShapes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/EdgeShapes.js","// @flow\n\nimport React from 'react'\nimport '../sigma/plugins.filter'\n\ntype Props = {\n\tnodesBy?: Nodes$Filter,\n\tneighborsOf?: string,\n\tsigma?: Sigma\n};\n\n/**\n\nFilter component, interface for filter sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nFilter is hiding all nodes which do not apply to the provided nodesBy criteria.\n\n@param {Nodes$Filter} nodesBy   will hide nodes where filter returns false\n\ntype Nodes$Filter = (node: Sigma$Node) => boolean;\n\n\n**/\n\nclass Filter extends React.Component {\n\tprops: Props;\n\tfilter: Object;\n\n\tcomponentDidMount() {\n\t\tthis.filter = new sigma.plugins.filter(this.props.sigma)\n\t\tthis._apply(this.props)\n\t}\n\n\t// TODO: will it work in composition with ForceAtlas for instance?\n\t//It should hide nodes before rendering of subplugins, therefore used in componentWillUpdate.. is it right?\n\tcomponentWillUpdate(props: Props) {\n\t\tif(props.nodesBy!==this.props.nodesBy || props.neighborsOf!==this.props.neighborsOf)\n\t\t\tthis._apply(props)\n\t}\n\n\t// TODO: Composition is not working yet!!\n\trender = () => null\n\n\t_apply(props: Props) {\n\t\tthis.filter.undo([\"neighborsOf\", \"nodesBy\"])\n\t\tif(props.neighborsOf) {\n\t\t\tthis.filter.neighborsOf(props.neighborsOf, \"neighborsOf\")\n\t\t}\n\t\tif(props.nodesBy)\n\t\t\tthis.filter.nodesBy(props.nodesBy, \"nodesBy\")\n\t\tthis.filter.apply()\n\t\tif(this.props.sigma)\n\t\t\tthis.props.sigma.refresh();\n\t}\n}\n\nexport default Filter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/Filter.js","// @flow\n\nimport React from 'react'\nimport '../sigma/layout.forceAtlas2'\n\ntype State = {\n\trunning: boolean,\n\ttimer?: number,\n\tdrawEdges?: ?boolean\n};\n\ntype Props = {\n\tworker: boolean,\n\tbarnesHutOptimize?: boolean,\n\tbarnesHutTheta?: number,\n\tadjustSizes?: boolean,\n\titerationsPerRender?: number,\n\tlinLogMode: boolean,\n\toutboundAttractionDistribution?: boolean,\n\tedgeWeightInfluence?: number,\n\tscalingRatio?: number,\n\tstrongGravityMode?: boolean,\n\tslowDown?: number,\n\tgravity?: number,\n\ttimeout?: number,\n\tsigma?: sigma\n};\n\ntype DefaultProps = {\n\tworker: boolean,\n\tlinLogMode: boolean\n};\n\n/**\n\nForceAtlas2 component, starts ForceAtlas2 sigma plugin once component is mounted.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted while graph is unavailable. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nIt accepts all the parameters of ForceAtlas2 described on its github page:\n@param {boolean} [worker=true]           Use a web worker to run calculations in separate thread\n@param {boolean} barnesHutOptimize  Use the algorithm's Barnes-Hut to improve repulsion's scalability\n\t\t\t\t\t\t\t\t\tThis is useful for large graph but harmful to small ones.\n@param {number} barnesHutTheta\n@param {boolean} adjustSizes\n@param {number} iterationsPerRender\n@param {boolean} [linLogMode=true]\n@param {boolean} outboundAttractionDistribution\n@param {number} edgeWeightInfluence\n@param {number} scalingRatio\n@param {boolean} strongGravityMode\n@param {number} gravity\n@param {number} slowDown\n@param {number} timeout   how long algorythm should run. default=graph.nodes().length * 10\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.layout.forceAtlas2)\n\n**/\n\n\nclass ForceAtlas2 extends React.Component {\n\tstate: State;\n\tprops: Props;\n\tstatic defaultProps: DefaultProps = {\n\t\tworker: true,\n\t\tlinLogMode: true\n\t}\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tthis.state = {running:false}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._refreshGraph()\n\t}\n\n\tcomponentDidUpdate(prevProps: Props, prevState: State) {\n\t\tlet s = this.props.sigma\n\t\tif(prevState.running && !this.state.running && s) {\n\t\t\t\ts.stopForceAtlas2()\n\t\t\t\ts.settings({drawEdges:prevState.drawEdges===false ? false : true})\n\t\t\t\ts.refresh();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif(this.props.sigma) this.props.sigma.killForceAtlas2()\n\t\tif(this.state.timer) clearTimeout(this.state.timer)\n\t}\n\n  //TODO: Add composition of child components after timeout\n\trender = () => null\n\n\n\t_refreshGraph() {\n\t\tlet s = this.props.sigma\n\t\tif(!sigma || !s) return\n\n\t\tlet drawEdges = s.settings(\"drawEdges\")\n\t\tif(s.graph.edges().length > 1000)\n\t\t\t\ts.settings({drawEdges: false})\n\n\t\ts.startForceAtlas2(this._stripOptions(this.props));\n\t\t// TODO: convert running status to state\n\t\tlet timer = setTimeout(() => {\n\t\t\t\t\tthis.setState({running:false, timer:undefined})\n\t\t\t\t}, this.props.timeout || s.graph.nodes().length*8 );\n\t\tthis.setState({running:true, timer, drawEdges})\n\t}\n\n\t//strip force atlas options from component props\n\t_stripOptions(props: Props): Props {\n\t\treturn Object.assign({}, props, {sigma: undefined})\n\t}\n\n}\n\nexport default ForceAtlas2;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ForceAtlas2.js","// @flow\n\nimport React from 'react'\nimport '../sigma/parsers.gexf'\nimport { embedProps } from './tools'\n\ntype State = {\n    loaded: boolean\n};\ntype Props = {\n\tpath: string,\n    onGraphLoaded?: () => void,\n    children?: mixed,\n    sigma?: Sigma\n};\n\n\n/**\n\nLoadGEXF component, interface for parsers.json sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} path   path to the GEXF file\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\n\nclass LoadGEXF extends React.PureComponent {\n    state: State;\n\tprops: Props;\n    onLoad: () => void;\n\n    constructor(props: Props) {\n        super(props)\n        this.state = {loaded:false}\n        this.onLoad = this._onLoad.bind(this)\n    }\n\n\tcomponentDidMount() {\n\t\tthis._load(this.props.path)\n\t}\n\n\tcomponentWillReceiveProps(props: Props) {\n\t\t// reload only if path changes\n\t\tif(this.props.path !== props.path) {\n            this.setState({loaded:false})\n\t\t\tthis._load(props.path)\n        }\n\t}\n\n\trender() {\n        if(!this.state.loaded)\n            return null\n        return <div>{ embedProps(this.props.children, {sigma: this.props.sigma}) }</div>\n    }\n\n\n    _load(url: string) {\n        sigma.parsers.gexf(\n                this.props.path ,\n                this.props.sigma ,\n                this.onLoad\n        )\n    }\n\n    _onLoad() {\n        if(this.props.sigma)\n            this.props.sigma.refresh()\n        this.setState({loaded:true})\n        if(this.props.onGraphLoaded)\n            return this.props.onGraphLoaded()\n    }\n\n}\n\nexport default LoadGEXF;\n\n\n\n// WEBPACK FOOTER //\n// ./src/LoadGEXF.js","// @flow\n\nimport React from 'react'\nimport '../sigma/main.js'\nimport '../sigma/parsers.json.js'\nimport { embedProps } from './tools'\n\ntype State = {\n  loaded: boolean\n};\ntype Props = {\n\tpath: string,\n  onGraphLoaded?: () => void,\n  children?: mixed,\n  sigma?: Sigma\n};\n\n\n// TODO: make a superclass for loaders??\n\n/**\n\nLoadJSON component, interface for parsers.json sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} path   path to the JSON file\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\n\nclass LoadJSON extends React.PureComponent {\n  state: State;\n\tprops: Props;\n  onLoad: () => void;\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {loaded:false}\n    this.onLoad = this._onLoad.bind(this)\n  }\n\n\tcomponentDidMount() {\n\t\tthis._load(this.props.path)\n\t}\n\n\tcomponentWillReceiveProps(props: Props) {\n\t\t// reload only if path changes\n\t\tif(this.props.path !== props.path) {\n      this.setState({loaded:false})\n\t\t\tthis._load(props.path)\n    }\n\t}\n\n\trender() {\n    if(!this.state.loaded)\n      return null\n    return <div>{ embedProps(this.props.children, {sigma: this.props.sigma}) }</div>\n  }\n\n\n  _load(url: string) {\n    sigma.parsers.json(\n      this.props.path ,\n      this.props.sigma ,\n      this.onLoad\n    )\n  }\n\n  _onLoad() {\n    if(this.props.sigma)\n      this.props.sigma.refresh()\n    this.setState({loaded:true})\n    if(this.props.onGraphLoaded)\n      return this.props.onGraphLoaded()\n  }\n}\n\nexport default LoadJSON;\n\n\n\n// WEBPACK FOOTER //\n// ./src/LoadJSON.js","// @flow\n\nimport React from 'react'\nimport '../sigma/plugins.animate'\nimport '../sigma/layout.noverlap'\nimport ReactSigmaLayoutPlugin from './ReactSigmaLayoutPlugin'\n\ntype State = {\n\trunning: boolean\n};\ntype Props = {\n\tnodes?: Array<Sigma$Node>,\n\tnodeMargin?: number,\n\tscaleNodes?: number,\n\tgridSize?: number,\n\tpermittedExpansion?: number,\n\tspeed?: number,\n\tmaxIterations?: number,\n\teasing?: Sigma$Easing,\n\tduration?: number,\n\tsigma?: sigma\n};\n\n/**\n\nNOverlap component, starts noverlap sigma plugin once component is mounted.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted while graph is unavailable. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\n@param {number} [nodeMargin=5]    additional minimum space to apply around each and every node\n@param {number} [scaleNodes=1.2]  multiplier,  larger nodes will have more space around\n@param {number} [gridSize=20]   number of rows and columns to use when dividing the nodes up into cell\n@param {number} [permittedExpansion=1.1]  maximum ratio to apply to the bounding box\n@param {number} speed     larger value increases the speed at the cost of precision\n@param {number} maxIterations  iterations to run the algorithm for before stopping it\n@param {number} easing     camera easing type for camera transition\n@param {number} duration     duration of the transition for the easing method\n\nIt accepts all the parameters of sigma.layout.noverlap plugin described on its github page:\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.layout.noverlap)\n\n@example\n<Sigma graph={data}>\n <NOverlap gridSize={10} maxIterations={100}/>\n</Sigma>\n\n**/\n\n\nconst NOverlap = (props: Props) => {\n\t\t\t\tconst s = props.sigma\n\t\t\t\tif(s)\n          return <ReactSigmaLayoutPlugin\n              start={()=>s.startNoverlap()}\n              config={options=>s.configNoverlap(options)}\n              stop={()=>s.stopNoverlap()} {...props} />\n\t\t\t\treturn null\n\t\t\t}\n\nexport default NOverlap;\n\n\n\n// WEBPACK FOOTER //\n// ./src/NOverlap.js","// @flow\n\nimport React from 'react'\nimport '../sigma/parsers.json.js'\nimport '../sigma/neo4j.cypher'\nimport NeoGraphItemsProducers from './NeoGraphItemsProducers'\nimport { embedProps } from './tools'\n\ntype State = {\n    loaded: boolean\n};\ntype Props = {\n\turl: string,\n\tuser: string,\n\tpassword: string,\n\tquery: string,\n\tproducers: NeoGraphItemsProducers,\n    onGraphLoaded?: () => void,\n    children?: mixed,\n    sigma?: sigma\n};\ntype DefaultProps = {\n\tproducers: NeoGraphItemsProducers\n};\n\n\n/**\n\nNeoCypher component, interface for neo4j.cypher sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} url    Neo4j instance REST API URL\n @param {string} user    Neo4j instance REST API user\n @param {string} password    Neo4j instance REST API password\n @param {string} query    Neo4j cypher query\n @param {NeoGraphItemsProducers} producers   Optional transformer for creating Sigma nodes and edges,\n                                    instance compatible with NeoGraphItemsProducers\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\n\nclass NeoCypher extends React.PureComponent {\n    state: State;\n\tprops: Props;\n    onLoad: () => void;\n\n\tstatic defaultProps: DefaultProps = {\n\t\tproducers: new NeoGraphItemsProducers()\n\t};\n\n    constructor(props: Props) {\n        super(props)\n        this.state = {loaded:false}\n        this.onLoad = this._onLoad.bind(this)\n    }\n\n\tcomponentDidMount() {\n\t\tthis._runQuery(this.props.query)\n\t}\n\n\tcomponentWillUpdate(props: Props) {\n\t\t// suppose url, user or password won't change for sigma instance, as well as sigma instance itself\n\t\tif(this.props.query !== props.query) {\n            this.setState({loaded:false})\n\t\t\tthis._runQuery(props.query)\n        }\n\t}\n\n\trender() {\n        if(!this.state.loaded)\n            return null\n        return <div>{ embedProps(this.props.children, {sigma: this.props.sigma}) }</div>\n    }\n\n\n    _runQuery(query: string) {\n        // TODO: add exception handling capability to Sigma Neo4j plugin\n        sigma.neo4j.cypher(\n                { url: this.props.url, user: this.props.user, password: this.props.password } ,\n                query ,\n                this.props.sigma ,\n                this.onLoad,\n                this.props.producers\n        )\n    }\n\n    _onLoad() {\n        this.setState({loaded:true})\n        if(this.props.sigma)\n            this.props.sigma.refresh()\n        if(this.props.onGraphLoaded)\n            return this.props.onGraphLoaded()\n    }\n\n}\n\nexport default NeoCypher;\n\n\n\n// WEBPACK FOOTER //\n// ./src/NeoCypher.js","// @flow\n\nimport React from 'react'\nimport '../sigma/nodes'\n\ntype Props = {\n\tdefault?: Sigma$Node$Shapes,\n\tsigma?: sigma\n};\n\n/**\n\nNodeShapes component, interface for customShapes sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\nNote! this Component requires \"canvas\" renderer to work.\n\nExtra node properties:\n - node.type='shape-name' - node shape renderer e.g. node.type='cross'.\n - node.borderColor - e.g. node.borderColor='#FF3333'\nDetails on shapes configuration and possibility to apply images to nodes, please refer to\n[plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customShapes#images).\n\nSee [plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customEdgeShapes)\nfor more datails on implementation.\n\n@param {string} default  set default sigma node renderer to be applied to nodes where type is not set\n\n\n@example\n```\n<Sigma renderer=\"canvas\" graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n\t<NodeShapes default=\"star\"/>\n</Sigma>\n```\n\n@example\nSupported shapes\n```\ntype Sigma$Node$Shapes = \"def\" | \"pacman\" | \"star\" | \"equilateral\" | \"cross\" | \"diamond\" | \"circle\" | \"square\";\n```\n\n**/\n\nclass NodeShapes extends React.Component {\n\tprops: Props;\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tif(this.props.sigma && this.props.default)\n\t\t\tthis.props.sigma.settings({defaultNodeType:this.props.default})\n\t}\n\n\trender = () => null\n}\n\nexport default NodeShapes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/NodeShapes.js","// @flow\n\nimport React from 'react'\nimport { embedProps } from './tools'\n\ntype Props = {\n  children?: mixed,\n  sigma?: sigma\n};\n\n\n/**\n\nRandomizeNodePositions component, sets random positions to all nodes.\nCan be used within Sigma component with predefined graph or within graph loader component.\n\n**/\n\n\nclass RandomizeNodePositions extends React.PureComponent {\n  props: Props;\n\n  constructor(props: Props) {\n    super(props)\n    if(this.props.sigma) {\n      this.props.sigma.graph.nodes().forEach(n => {\n        n.x = Math.random()\n        n.y = Math.random()\n      } )\n    }\n    if(this.props.sigma) this.props.sigma.refresh()\n  }\n\n  componentDidMount() {\n    if(this.props.sigma) this.props.sigma.refresh()\n  }\n\n  render() {\n    return <div>{ embedProps(this.props.children, {sigma: this.props.sigma}) }</div>\n  }\n\n}\n\nexport default RandomizeNodePositions;\n\n\n\n// WEBPACK FOOTER //\n// ./src/RandomizeNodePositions.js","// @flow\n\nimport React from 'react'\nimport '../sigma/plugins.relativeSize'\n\ntype Props = {\n\tinitialSize: number,\n\tsigma?: sigma\n};\n\n/**\n\nRelativeSize component, interface for RelativeSize sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nSets nodes sizes corresponding its degree.\n\n @param {number} initialSize  start size for every node, will be multiplied by Math.sqrt(node.degree)\n\n**/\n\nclass RelativeSize extends React.Component {\n\tprops: Props;\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tsigma.plugins.relativeSize(this.props.sigma, this.props.initialSize)\n\t}\n\n\trender = () => null\n}\n\nexport default RelativeSize;\n\n\n\n// WEBPACK FOOTER //\n// ./src/RelativeSize.js","import '../sigma/main'\nimport '../sigma/webgl'\n\n/**\n  Component enables WebGL renderer, setting it as default renderer if WebGL is supported by browser.\n**/\nfunction SigmaEnableWebGL() { return null }\n\nexport default SigmaEnableWebGL\n\n\n\n// WEBPACK FOOTER //\n// ./src/SigmaEnableWebGL.js","// @flow\n\nimport React from 'react'\nimport * as Utils from './Utils'\n\ntype State = {\n\trunning: boolean\n};\n\ntype Props = {\n\tconfig: (config: KeyValueObject) => Sigma$Listener,\n\tstart: () => Sigma$Listener,\n\tstop: () => void,\n\tsigma?: sigma\n};\n\n\n/**\n\nReactSigmaLayoutPlugin is a base class for sigma plugins.\n\nUsage\n```\nconst NOverlap = (props: Props) => {\n\t\t\t\tconst s = props.sigma\n\t\t\t\tif(s)\n          return <ReactSigmaLayoutPlugin\n              start={()=>s.startNoverlap()}\n              config={options=>s.configNoverlap(options)}\n              stop={s.stopNoverlap()} {...props} />\n\t\t\t\treturn null\n\t\t\t}\n...\n<NOverlap easing=\"cubicInOut\"/>\n```\n**/\n\n\nclass ReactSigmaLayoutPlugin extends React.Component {\n\tstate: State;\n\tprops: Props;\n\t_mounted: boolean = false;\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tthis.state = {running:false}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._start()\n\t\tthis._mounted = true\n\t}\n\n\t// Change sigma status only after react rendering complete\n\tcomponentDidUpdate(prevProps: Props, prevState: State) {\n\t\tif(prevState.running && !this.state.running && this._mounted) {\n\t\t\tif(this.props.sigma) this.props.sigma.refresh();\n\t\t} else if (Utils.propsChanged(prevProps, this.props)) {\n\t\t\tthis.props.stop()\n\t\t\tthis._start()\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis._mounted = false\n\t\tthis.props.stop()\n\t}\n\n\t//TODO: Render composition of child components after animation\n\trender = () => null\n\n\t_start() {\n\t\tthis.props.config(ReactSigmaLayoutPlugin._stripOptions(this.props))\n\t\tlet listener = this.props.start()\n\n\t\tlistener.bind('stop', () => {\n\t\t\t\t this._mounted && this.setState({running:false}) } )\n\n\t\tthis.setState({running:true})\n\t}\n\n\tstatic _stripOptions(props: Props): KeyValueObject {\n\t\tlet config = {}\n\t\tfor(let key in props)\n\t\t\tif(key!==\"start\" && key!==\"stop\" && key!==\"config\" && key!==\"sigma\" && key!==\"children\")\n\t\t\t\tconfig[key] = props[key]\n\t\treturn config\n\t}\n}\n\n\nexport default ReactSigmaLayoutPlugin;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ReactSigmaLayoutPlugin.js","\texport function propsChanged(prev: Object, next: Object) {\n\t\tfor(let key in prev)\n\t\t\tif(prev[key] !== next[key])\n\t\t\t\treturn true\n\t\treturn false\n\t}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Utils.js","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 114);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 114:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js__ = __webpack_require__(54);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_canvas_sigma_canvas_edges_curve_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_canvas_sigma_canvas_edges_arrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_canvas_sigma_canvas_edges_curvedArrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curve_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_arrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js__ = __webpack_require__(51);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_canvas_sigma_canvas_edgehovers_curvedArrow_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dashed_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_dotted_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_parallel_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edgehovers_tapered_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dashed_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_dotted_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_parallel_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_sigma_react_plugins_sigma_renderers_customEdgeShapes_sigma_canvas_edges_tapered_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curve_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_sigma_react_plugins_sigma_renderers_edgeLabels_sigma_canvas_edges_labels_curvedArrow_js__);\n//base library\n\n\n\n\n\n\n//plugins\n\n\n\n\n\n\n\n\n\n\n\n\n\n/***/ },\n\n/***/ 21:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.dashed =\n    function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    context.save();\n\n    context.setLineDash([8,3]);\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 22:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.dotted =\n    function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    context.save();\n\n    context.setLineDash([2]);\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 23:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.parallel =\n    function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        c,\n        d,\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    // Intersection points of the source node circle:\n    c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    // Intersection points of the target node circle:\n    d = sigma.utils.getCircleIntersection(tX, tY, size, sX, sY, dist);\n\n    context.save();\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(c.xi, c.yi);\n    context.lineTo(d.xi_prime, d.yi_prime);\n    context.closePath();\n    context.stroke();\n\n    context.beginPath();\n    context.moveTo(c.xi_prime, c.yi_prime);\n    context.lineTo(d.xi, d.yi);\n    context.closePath();\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.tapered =\n    function(edge, source, target, context, settings) {\n    // The goal is to draw a triangle where the target node is a point of\n    // the triangle, and the two other points are the intersection of the\n    // source circle and the circle (target, distance(source, target)).\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        prefix = settings('prefix') || '',\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n    size *= settings('edgeHoverSizeRatio');\n\n    // Intersection points:\n    var c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    context.save();\n\n    // Turn transparency on:\n    context.globalAlpha = 0.65;\n\n    // Draw the triangle:\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(tX, tY);\n    context.lineTo(c.xi, c.yi);\n    context.lineTo(c.xi_prime, c.yi_prime);\n    context.closePath();\n    context.fill();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as a dashed line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.dashed = function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.strokeStyle = color;\n    }\n\n    context.setLineDash([8,3]);\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as a dotted line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.dotted = function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.strokeStyle = color;\n    }\n\n    context.setLineDash([2]);\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(\n      source[prefix + 'x'],\n      source[prefix + 'y']\n    );\n    context.lineTo(\n      target[prefix + 'x'],\n      target[prefix + 'y']\n    );\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as two parallel lines.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.parallel = function(edge, source, target, context, settings) {\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        c,\n        d,\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    // Intersection points of the source node circle:\n    c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    // Intersection points of the target node circle:\n    d = sigma.utils.getCircleIntersection(tX, tY, size, sX, sY, dist);\n\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.strokeStyle = color;\n    }\n\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(c.xi, c.yi);\n    context.lineTo(d.xi_prime, d.yi_prime);\n    context.closePath();\n    context.stroke();\n\n    context.beginPath();\n    context.moveTo(c.xi_prime, c.yi_prime);\n    context.lineTo(d.xi, d.yi);\n    context.closePath();\n    context.stroke();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 28:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This method renders the edge as a tapered line.\n   * Danny Holten, Petra Isenberg, Jean-Daniel Fekete, and J. Van Wijk (2010)\n   * Performance Evaluation of Tapered, Curved, and Animated Directed-Edge\n   * Representations in Node-Link Graphs. Research Report, Sep 2010.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.tapered = function(edge, source, target, context, settings) {\n    // The goal is to draw a triangle where the target node is a point of\n    // the triangle, and the two other points are the intersection of the\n    // source circle and the circle (target, distance(source, target)).\n    var color = edge.active ?\n          edge.active_color || settings('defaultEdgeActiveColor') :\n          edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        prefix = settings('prefix') || '',\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    // Intersection points:\n    var c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n\n    context.save();\n\n    if (edge.active) {\n      context.fillStyle = settings('edgeActiveColor') === 'edge' ?\n        (color || defaultEdgeColor) :\n        settings('defaultEdgeActiveColor');\n    }\n    else {\n      context.fillStyle = color;\n    }\n\n    // Turn transparency on:\n    context.globalAlpha = 0.65;\n\n    // Draw the triangle:\n    context.beginPath();\n    context.moveTo(tX, tY);\n    context.lineTo(c.xi, c.yi);\n    context.lineTo(c.xi_prime, c.yi_prime);\n    context.closePath();\n    context.fill();\n\n    context.restore();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 31:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n\n  /**\n   * This label renderer will just display the label on the curve of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the curve.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.labels.curve =\n    function(edge, source, target, context, settings) {\n    if (typeof edge.label !== 'string')\n      return;\n\n    var prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1;\n\n    if (size < settings('edgeLabelThreshold'))\n      return;\n\n    var fontSize,\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dX = tX - sX,\n        dY = tY - sY,\n        sign = (sX < tX) ? 1 : -1,\n        cp = {},\n        c,\n        angle,\n        t = 0.5;  //length of the curve\n\n    if (source.id === target.id) {\n      cp = sigma.utils.getSelfLoopControlPoints(sX, sY, sSize);\n      c = sigma.utils.getPointOnBezierCurve(\n        t, sX, sY, tX, tY, cp.x1, cp.y1, cp.x2, cp.y2\n      );\n      angle = Math.atan2(1, 1); // 45°\n    } else {\n      cp = sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n      c = sigma.utils.getPointOnQuadraticCurve(t, sX, sY, tX, tY, cp.x, cp.y);\n      angle = Math.atan2(dY * sign, dX * sign);\n    }\n\n    // The font size is sublineraly proportional to the edge size, in order to\n    // avoid very large labels on screen.\n    // This is achieved by f(x) = x * x^(-1/ a), where 'x' is the size and 'a'\n    // is the edgeLabelSizePowRatio. Notice that f(1) = 1.\n    // The final form is:\n    // f'(x) = b * x * x^(-1 / a), thus f'(1) = b. Application:\n    // fontSize = defaultEdgeLabelSize if edgeLabelSizePowRatio = 1\n    fontSize = (settings('edgeLabelSize') === 'fixed') ?\n      settings('defaultEdgeLabelSize') :\n      settings('defaultEdgeLabelSize') *\n      size *\n      Math.pow(size, -1 / settings('edgeLabelSizePowRatio'));\n\n    context.save();\n\n    \n    if (edge.active) {\n      context.font = [\n        settings('activeFontStyle'),\n        fontSize + 'px',\n        settings('activeFont') || settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        settings('edgeActiveColor') === 'edge' ?\n        (edge.active_color || settings('defaultEdgeActiveColor')) :\n        settings('defaultEdgeLabelActiveColor');\n    }\n    else {\n      context.font = [\n        settings('fontStyle'),\n        fontSize + 'px',\n        settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        (settings('edgeLabelColor') === 'edge') ?\n        (edge.color || settings('defaultEdgeColor')) :\n        settings('defaultEdgeLabelColor');\n    }\n\n    context.textAlign = 'center';\n    context.textBaseline = 'alphabetic';\n\n    context.translate(c.x, c.y);\n    context.rotate(angle);\n    context.fillText(\n      edge.label,\n      0,\n      (-size / 2) - 3\n    );\n\n    context.restore();\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 32:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n\n  /**\n   * This label renderer will just display the label on the curve of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the curve.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.labels.curvedArrow =\n    function(edge, source, target, context, settings) {\n    sigma.canvas.edges.labels.curve(edge, source, target, context, settings);\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n\n  /**\n   * This label renderer will just display the label on the line of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.labels.def =\n    function(edge, source, target, context, settings) {\n    if (typeof edge.label !== 'string' || source == target)\n      return;\n\n    var prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1;\n\n    if (size < settings('edgeLabelThreshold'))\n      return;\n\n    if (0 === settings('edgeLabelSizePowRatio'))\n      throw '\"edgeLabelSizePowRatio\" must not be 0.';\n\n    var fontSize,\n        x = (source[prefix + 'x'] + target[prefix + 'x']) / 2,\n        y = (source[prefix + 'y'] + target[prefix + 'y']) / 2,\n        dX = target[prefix + 'x'] - source[prefix + 'x'],\n        dY = target[prefix + 'y'] - source[prefix + 'y'],\n        sign = (source[prefix + 'x'] < target[prefix + 'x']) ? 1 : -1,\n        angle = Math.atan2(dY * sign, dX * sign);\n\n    // The font size is sublineraly proportional to the edge size, in order to\n    // avoid very large labels on screen.\n    // This is achieved by f(x) = x * x^(-1/ a), where 'x' is the size and 'a'\n    // is the edgeLabelSizePowRatio. Notice that f(1) = 1.\n    // The final form is:\n    // f'(x) = b * x * x^(-1 / a), thus f'(1) = b. Application:\n    // fontSize = defaultEdgeLabelSize if edgeLabelSizePowRatio = 1\n    fontSize = (settings('edgeLabelSize') === 'fixed') ?\n      settings('defaultEdgeLabelSize') :\n      settings('defaultEdgeLabelSize') *\n      size *\n      Math.pow(size, -1 / settings('edgeLabelSizePowRatio'));\n\n    context.save();\n\n    if (edge.active) {\n      context.font = [\n        settings('activeFontStyle'),\n        fontSize + 'px',\n        settings('activeFont') || settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        settings('edgeActiveColor') === 'edge' ?\n        (edge.active_color || settings('defaultEdgeActiveColor')) :\n        settings('defaultEdgeLabelActiveColor');\n    }\n    else {\n      context.font = [\n        settings('fontStyle'),\n        fontSize + 'px',\n        settings('font')\n      ].join(' ');\n\n      context.fillStyle =\n        (settings('edgeLabelColor') === 'edge') ?\n        (edge.color || settings('defaultEdgeColor')) :\n        settings('defaultEdgeLabelColor');\n    }\n\n    context.textAlign = 'center';\n    context.textBaseline = 'alphabetic';\n\n    context.translate(x, y);\n    context.rotate(angle);\n    context.fillText(\n      edge.label,\n      0,\n      (-size / 2) - 3\n    );\n\n    context.restore();\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 49:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.arrow =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        size = edge[prefix + 'size'] || 1,\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n\n    size = (edge.hover) ?\n      settings('edgeHoverSizeRatio') * size : size;\n    var aSize = size * 2.5,\n        d = Math.sqrt(Math.pow(tX - sX, 2) + Math.pow(tY - sY, 2)),\n        aX = sX + (tX - sX) * (d - aSize - tSize) / d,\n        aY = sY + (tY - sY) * (d - aSize - tSize) / d,\n        vX = (tX - sX) * aSize / d,\n        vY = (tY - sY) * aSize / d;\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(\n      aX,\n      aY\n    );\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 50:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.curve =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = settings('edgeHoverSizeRatio') * (edge[prefix + 'size'] || 1),\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, sSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x1, cp.y1, cp.x2, cp.y2, tX, tY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, tX, tY);\n    }\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 51:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edgehovers');\n\n  /**\n   * This hover renderer will display the edge with a different color or size.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edgehovers.curvedArrow =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        size = settings('edgeHoverSizeRatio') * (edge[prefix + 'size'] || 1),\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        d,\n        aSize,\n        aX,\n        aY,\n        vX,\n        vY;\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, tSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (source.id === target.id) {\n      d = Math.sqrt(Math.pow(tX - cp.x1, 2) + Math.pow(tY - cp.y1, 2));\n      aSize = size * 2.5;\n      aX = cp.x1 + (tX - cp.x1) * (d - aSize - tSize) / d;\n      aY = cp.y1 + (tY - cp.y1) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x1) * aSize / d;\n      vY = (tY - cp.y1) * aSize / d;\n    }\n    else {\n      d = Math.sqrt(Math.pow(tX - cp.x, 2) + Math.pow(tY - cp.y, 2));\n      aSize = size * 2.5;\n      aX = cp.x + (tX - cp.x) * (d - aSize - tSize) / d;\n      aY = cp.y + (tY - cp.y) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x) * aSize / d;\n      vY = (tY - cp.y) * aSize / d;\n    }\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    if (settings('edgeHoverColor') === 'edge') {\n      color = edge.hover_color || color;\n    } else {\n      color = edge.hover_color || settings('defaultEdgeHoverColor') || color;\n    }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x2, cp.y2, cp.x1, cp.y1, aX, aY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, aX, aY);\n    }\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 53:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This edge renderer will display edges as arrows going from the source node\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.arrow = function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        size = edge[prefix + 'size'] || 1,\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        aSize = Math.max(size * 2.5, settings('minArrowSize')),\n        d = Math.sqrt(Math.pow(tX - sX, 2) + Math.pow(tY - sY, 2)),\n        aX = sX + (tX - sX) * (d - aSize - tSize) / d,\n        aY = sY + (tY - sY) * (d - aSize - tSize) / d,\n        vX = (tX - sX) * aSize / d,\n        vY = (tY - sY) * aSize / d;\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(\n      aX,\n      aY\n    );\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 54:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This edge renderer will display edges as curves.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.curve = function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, sSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x1, cp.y1, cp.x2, cp.y2, tX, tY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, tX, tY);\n    }\n    context.stroke();\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 55:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n\n  /**\n   * This edge renderer will display edges as curves with arrow heading.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n  sigma.canvas.edges.curvedArrow =\n    function(edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        size = edge[prefix + 'size'] || 1,\n        tSize = target[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        aSize = Math.max(size * 2.5, settings('minArrowSize')),\n        d,\n        aX,\n        aY,\n        vX,\n        vY;\n\n    cp = (source.id === target.id) ?\n      sigma.utils.getSelfLoopControlPoints(sX, sY, tSize) :\n      sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY);\n\n    if (source.id === target.id) {\n      d = Math.sqrt(Math.pow(tX - cp.x1, 2) + Math.pow(tY - cp.y1, 2));\n      aX = cp.x1 + (tX - cp.x1) * (d - aSize - tSize) / d;\n      aY = cp.y1 + (tY - cp.y1) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x1) * aSize / d;\n      vY = (tY - cp.y1) * aSize / d;\n    }\n    else {\n      d = Math.sqrt(Math.pow(tX - cp.x, 2) + Math.pow(tY - cp.y, 2));\n      aX = cp.x + (tX - cp.x) * (d - aSize - tSize) / d;\n      aY = cp.y + (tY - cp.y) * (d - aSize - tSize) / d;\n      vX = (tX - cp.x) * aSize / d;\n      vY = (tY - cp.y) * aSize / d;\n    }\n\n    if (!color)\n      switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x2, cp.y2, cp.x1, cp.y1, aX, aY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, aX, aY);\n    }\n    context.stroke();\n\n    context.fillStyle = color;\n    context.beginPath();\n    context.moveTo(aX + vX, aY + vY);\n    context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n    context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n    context.lineTo(aX + vX, aY + vY);\n    context.closePath();\n    context.fill();\n  };\n})();\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/edges.js\n// module id = 19\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 126);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 126:\n/***/ function(module, exports, __webpack_require__) {\n\n__webpack_require__(15);\nmodule.exports = __webpack_require__(16);\n\n\n/***/ },\n\n/***/ 15:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  /**\n   * Sigma ForceAtlas2.5 Supervisor\n   * ===============================\n   *\n   * Author: Guillaume Plique (Yomguithereal)\n   * Version: 0.1\n   */\n  var _root = this;\n\n  /**\n   * Feature detection\n   * ------------------\n   */\n  var webWorkers = 'Worker' in _root;\n\n  /**\n   * Supervisor Object\n   * ------------------\n   */\n  function Supervisor(sigInst, options) {\n    var _this = this,\n        workerFn = sigInst.getForceAtlas2Worker &&\n          sigInst.getForceAtlas2Worker();\n\n    options = options || {};\n\n    // _root URL Polyfill\n    _root.URL = _root.URL || _root.webkitURL;\n\n    // Properties\n    this.sigInst = sigInst;\n    this.graph = this.sigInst.graph;\n    this.ppn = 10;\n    this.ppe = 3;\n    this.config = {};\n    this.shouldUseWorker =\n      options.worker === false ? false : true && webWorkers;\n    this.workerUrl = options.workerUrl;\n\n    // State\n    this.started = false;\n    this.running = false;\n\n    // Web worker or classic DOM events?\n    if (this.shouldUseWorker) {\n      if (!this.workerUrl) {\n        var blob = this.makeBlob(workerFn);\n        this.worker = new Worker(URL.createObjectURL(blob));\n      }\n      else {\n        this.worker = new Worker(this.workerUrl);\n      }\n\n      // Post Message Polyfill\n      this.worker.postMessage =\n        this.worker.webkitPostMessage || this.worker.postMessage;\n    }\n    else {\n\n      eval(workerFn);\n    }\n\n    // Worker message receiver\n    this.msgName = (this.worker) ? 'message' : 'newCoords';\n    this.listener = function(e) {\n\n      // Retrieving data\n      _this.nodesByteArray = new Float32Array(e.data.nodes);\n\n      // If ForceAtlas2 is running, we act accordingly\n      if (_this.running) {\n\n        // Applying layout\n        _this.applyLayoutChanges();\n\n        // Send data back to worker and loop\n        _this.sendByteArrayToWorker();\n\n        // Rendering graph\n        _this.sigInst.refresh();\n      }\n    };\n\n    (this.worker || document).addEventListener(this.msgName, this.listener);\n\n    // Filling byteArrays\n    this.graphToByteArrays();\n\n    // Binding on kill to properly terminate layout when parent is killed\n    sigInst.bind('kill', function() {\n      sigInst.killForceAtlas2();\n    });\n  }\n\n  Supervisor.prototype.makeBlob = function(workerFn) {\n    var blob;\n\n    try {\n      blob = new Blob([workerFn], {type: 'application/javascript'});\n    }\n    catch (e) {\n      _root.BlobBuilder = _root.BlobBuilder ||\n                          _root.WebKitBlobBuilder ||\n                          _root.MozBlobBuilder;\n\n      blob = new BlobBuilder();\n      blob.append(workerFn);\n      blob = blob.getBlob();\n    }\n\n    return blob;\n  };\n\n  Supervisor.prototype.graphToByteArrays = function() {\n    var nodes = this.graph.nodes(),\n        edges = this.graph.edges(),\n        nbytes = nodes.length * this.ppn,\n        ebytes = edges.length * this.ppe,\n        nIndex = {},\n        i,\n        j,\n        l;\n\n    // Allocating Byte arrays with correct nb of bytes\n    this.nodesByteArray = new Float32Array(nbytes);\n    this.edgesByteArray = new Float32Array(ebytes);\n\n    // Iterate through nodes\n    for (i = j = 0, l = nodes.length; i < l; i++) {\n\n      // Populating index\n      nIndex[nodes[i].id] = j;\n\n      // Populating byte array\n      this.nodesByteArray[j] = nodes[i].x;\n      this.nodesByteArray[j + 1] = nodes[i].y;\n      this.nodesByteArray[j + 2] = 0;\n      this.nodesByteArray[j + 3] = 0;\n      this.nodesByteArray[j + 4] = 0;\n      this.nodesByteArray[j + 5] = 0;\n      this.nodesByteArray[j + 6] = 1 + this.graph.degree(nodes[i].id);\n      this.nodesByteArray[j + 7] = 1;\n      this.nodesByteArray[j + 8] = nodes[i].size;\n      this.nodesByteArray[j + 9] = 0;\n      j += this.ppn;\n    }\n\n    // Iterate through edges\n    for (i = j = 0, l = edges.length; i < l; i++) {\n      this.edgesByteArray[j] = nIndex[edges[i].source];\n      this.edgesByteArray[j + 1] = nIndex[edges[i].target];\n      this.edgesByteArray[j + 2] = edges[i].weight || 0;\n      j += this.ppe;\n    }\n  };\n\n  // TODO: make a better send function\n  Supervisor.prototype.applyLayoutChanges = function() {\n    var nodes = this.graph.nodes(),\n        j = 0,\n        realIndex;\n\n    // Moving nodes\n    for (var i = 0, l = this.nodesByteArray.length; i < l; i += this.ppn) {\n      nodes[j].x = this.nodesByteArray[i];\n      nodes[j].y = this.nodesByteArray[i + 1];\n      j++;\n    }\n  };\n\n  Supervisor.prototype.sendByteArrayToWorker = function(action) {\n    var content = {\n      action: action || 'loop',\n      nodes: this.nodesByteArray.buffer\n    };\n\n    var buffers = [this.nodesByteArray.buffer];\n\n    if (action === 'start') {\n      content.config = this.config || {};\n      content.edges = this.edgesByteArray.buffer;\n      buffers.push(this.edgesByteArray.buffer);\n    }\n\n    if (this.shouldUseWorker)\n      this.worker.postMessage(content, buffers);\n    else\n      _root.postMessage(content, '*');\n  };\n\n  Supervisor.prototype.start = function() {\n    if (this.running)\n      return;\n\n    this.running = true;\n\n    // Do not refresh edgequadtree during layout:\n    var k,\n        c;\n    for (k in this.sigInst.cameras) {\n      c = this.sigInst.cameras[k];\n      c.edgequadtree._enabled = false;\n    }\n\n    if (!this.started) {\n\n      // Sending init message to worker\n      this.sendByteArrayToWorker('start');\n      this.started = true;\n    }\n    else {\n      this.sendByteArrayToWorker();\n    }\n  };\n\n  Supervisor.prototype.stop = function() {\n    if (!this.running)\n      return;\n\n    // Allow to refresh edgequadtree:\n    var k,\n        c,\n        bounds;\n    for (k in this.sigInst.cameras) {\n      c = this.sigInst.cameras[k];\n      c.edgequadtree._enabled = true;\n\n      // Find graph boundaries:\n      bounds = sigma.utils.getBoundaries(\n        this.graph,\n        c.readPrefix\n      );\n\n      // Refresh edgequadtree:\n      if (c.settings('drawEdges') && c.settings('enableEdgeHovering'))\n        c.edgequadtree.index(this.sigInst.graph, {\n          prefix: c.readPrefix,\n          bounds: {\n            x: bounds.minX,\n            y: bounds.minY,\n            width: bounds.maxX - bounds.minX,\n            height: bounds.maxY - bounds.minY\n          }\n        });\n    }\n\n    this.running = false;\n  };\n\n  Supervisor.prototype.killWorker = function() {\n    if (this.worker) {\n      this.worker.terminate();\n    }\n    else {\n      _root.postMessage({action: 'kill'}, '*');\n      document.removeEventListener(this.msgName, this.listener);\n    }\n  };\n\n  Supervisor.prototype.configure = function(config) {\n\n    // Setting configuration\n    this.config = config;\n\n    if (!this.started)\n      return;\n\n    var data = {action: 'config', config: this.config};\n\n    if (this.shouldUseWorker)\n      this.worker.postMessage(data);\n    else\n      _root.postMessage(data, '*');\n  };\n\n  /**\n   * Interface\n   * ----------\n   */\n  sigma.prototype.startForceAtlas2 = function(config) {\n\n    // Create supervisor if undefined\n    if (!this.supervisor)\n      this.supervisor = new Supervisor(this, config);\n\n    // Configuration provided?\n    if (config)\n      this.supervisor.configure(config);\n\n    // Start algorithm\n    this.supervisor.start();\n\n    return this;\n  };\n\n  sigma.prototype.stopForceAtlas2 = function() {\n    if (!this.supervisor)\n      return this;\n\n    // Pause algorithm\n    this.supervisor.stop();\n\n    return this;\n  };\n\n  sigma.prototype.killForceAtlas2 = function() {\n    if (!this.supervisor)\n      return this;\n\n    // Stop Algorithm\n    this.supervisor.stop();\n\n    // Kill Worker\n    this.supervisor.killWorker();\n\n    // Kill supervisor\n    this.supervisor = null;\n\n    return this;\n  };\n\n  sigma.prototype.configForceAtlas2 = function(config) {\n    if (!this.supervisor)\n      this.supervisor = new Supervisor(this, config);\n\n    this.supervisor.configure(config);\n\n    return this;\n  };\n\n  sigma.prototype.isForceAtlas2Running = function(config) {\n    return !!this.supervisor && this.supervisor.running;\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * Sigma ForceAtlas2.5 Webworker\n   * ==============================\n   *\n   * Author: Guillaume Plique (Yomguithereal)\n   * Algorithm author: Mathieu Jacomy @ Sciences Po Medialab & WebAtlas\n   * Version: 1.0.3\n   */\n\n  var _root = this,\n      inWebWorker = !('document' in _root);\n\n  /**\n   * Worker Function Wrapper\n   * ------------------------\n   *\n   * The worker has to be wrapped into a single stringified function\n   * to be passed afterwards as a BLOB object to the supervisor.\n   */\n  var Worker = function(undefined) {\n    'use strict';\n\n    /**\n     * Worker settings and properties\n     */\n    var W = {\n\n      // Properties\n      ppn: 10,\n      ppe: 3,\n      ppr: 9,\n      maxForce: 10,\n      iterations: 0,\n      converged: false,\n\n      // Possible to change through config\n      settings: {\n        linLogMode: false,\n        outboundAttractionDistribution: false,\n        adjustSizes: false,\n        edgeWeightInfluence: 0,\n        scalingRatio: 1,\n        strongGravityMode: false,\n        gravity: 1,\n        slowDown: 1,\n        barnesHutOptimize: false,\n        barnesHutTheta: 0.5,\n        startingIterations: 1,\n        iterationsPerRender: 1\n      }\n    };\n\n    var NodeMatrix,\n        EdgeMatrix,\n        RegionMatrix;\n\n    /**\n     * Helpers\n     */\n    function extend() {\n      var i,\n          k,\n          res = {},\n          l = arguments.length;\n\n      for (i = l - 1; i >= 0; i--)\n        for (k in arguments[i])\n          res[k] = arguments[i][k];\n      return res;\n    }\n\n    function __emptyObject(obj) {\n      var k;\n\n      for (k in obj)\n        if (!('hasOwnProperty' in obj) || obj.hasOwnProperty(k))\n          delete obj[k];\n\n      return obj;\n    }\n\n    /**\n     * Matrices properties accessors\n     */\n    var nodeProperties = {\n      x: 0,\n      y: 1,\n      dx: 2,\n      dy: 3,\n      old_dx: 4,\n      old_dy: 5,\n      mass: 6,\n      convergence: 7,\n      size: 8,\n      fixed: 9\n    };\n\n    var edgeProperties = {\n      source: 0,\n      target: 1,\n      weight: 2\n    };\n\n    var regionProperties = {\n      node: 0,\n      centerX: 1,\n      centerY: 2,\n      size: 3,\n      nextSibling: 4,\n      firstChild: 5,\n      mass: 6,\n      massCenterX: 7,\n      massCenterY: 8\n    };\n\n    function np(i, p) {\n\n      // DEBUG: safeguards\n      if ((i % W.ppn) !== 0)\n        throw 'np: non correct (' + i + ').';\n      if (i !== parseInt(i))\n        throw 'np: non int.';\n\n      if (p in nodeProperties)\n        return i + nodeProperties[p];\n      else\n        throw 'ForceAtlas2.Worker - ' +\n              'Inexistant node property given (' + p + ').';\n    }\n\n    function ep(i, p) {\n\n      // DEBUG: safeguards\n      if ((i % W.ppe) !== 0)\n        throw 'ep: non correct (' + i + ').';\n      if (i !== parseInt(i))\n        throw 'ep: non int.';\n\n      if (p in edgeProperties)\n        return i + edgeProperties[p];\n      else\n        throw 'ForceAtlas2.Worker - ' +\n              'Inexistant edge property given (' + p + ').';\n    }\n\n    function rp(i, p) {\n\n      // DEBUG: safeguards\n      if ((i % W.ppr) !== 0)\n        throw 'rp: non correct (' + i + ').';\n      if (i !== parseInt(i))\n        throw 'rp: non int.';\n\n      if (p in regionProperties)\n        return i + regionProperties[p];\n      else\n        throw 'ForceAtlas2.Worker - ' +\n              'Inexistant region property given (' + p + ').';\n    }\n\n    // DEBUG\n    function nan(v) {\n      if (isNaN(v))\n        throw 'NaN alert!';\n    }\n\n\n    /**\n     * Algorithm initialization\n     */\n\n    function init(nodes, edges, config) {\n      config = config || {};\n      var i, l;\n\n      // Matrices\n      NodeMatrix = nodes;\n      EdgeMatrix = edges;\n\n      // Length\n      W.nodesLength = NodeMatrix.length;\n      W.edgesLength = EdgeMatrix.length;\n\n      // Merging configuration\n      configure(config);\n    }\n\n    function configure(o) {\n      W.settings = extend(o, W.settings);\n    }\n\n    /**\n     * Algorithm pass\n     */\n\n    // MATH: get distances stuff and power 2 issues\n    function pass() {\n      var a, i, j, l, r, n, n1, n2, e, w, g, k, m;\n\n      var outboundAttCompensation,\n          coefficient,\n          xDist,\n          yDist,\n          ewc,\n          mass,\n          distance,\n          size,\n          factor;\n\n      // 1) Initializing layout data\n      //-----------------------------\n\n      // Resetting positions & computing max values\n      for (n = 0; n < W.nodesLength; n += W.ppn) {\n        NodeMatrix[np(n, 'old_dx')] = NodeMatrix[np(n, 'dx')];\n        NodeMatrix[np(n, 'old_dy')] = NodeMatrix[np(n, 'dy')];\n        NodeMatrix[np(n, 'dx')] = 0;\n        NodeMatrix[np(n, 'dy')] = 0;\n      }\n\n      // If outbound attraction distribution, compensate\n      if (W.settings.outboundAttractionDistribution) {\n        outboundAttCompensation = 0;\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          outboundAttCompensation += NodeMatrix[np(n, 'mass')];\n        }\n\n        outboundAttCompensation /= W.nodesLength;\n      }\n\n\n      // 1.bis) Barnes-Hut computation\n      //------------------------------\n\n      if (W.settings.barnesHutOptimize) {\n\n        var minX = Infinity,\n            maxX = -Infinity,\n            minY = Infinity,\n            maxY = -Infinity,\n            q, q0, q1, q2, q3;\n\n        // Setting up\n        // RegionMatrix = new Float32Array(W.nodesLength / W.ppn * 4 * W.ppr);\n        RegionMatrix = [];\n\n        // Computing min and max values\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          minX = Math.min(minX, NodeMatrix[np(n, 'x')]);\n          maxX = Math.max(maxX, NodeMatrix[np(n, 'x')]);\n          minY = Math.min(minY, NodeMatrix[np(n, 'y')]);\n          maxY = Math.max(maxY, NodeMatrix[np(n, 'y')]);\n        }\n\n        // Build the Barnes Hut root region\n        RegionMatrix[rp(0, 'node')] = -1;\n        RegionMatrix[rp(0, 'centerX')] = (minX + maxX) / 2;\n        RegionMatrix[rp(0, 'centerY')] = (minY + maxY) / 2;\n        RegionMatrix[rp(0, 'size')] = Math.max(maxX - minX, maxY - minY);\n        RegionMatrix[rp(0, 'nextSibling')] = -1;\n        RegionMatrix[rp(0, 'firstChild')] = -1;\n        RegionMatrix[rp(0, 'mass')] = 0;\n        RegionMatrix[rp(0, 'massCenterX')] = 0;\n        RegionMatrix[rp(0, 'massCenterY')] = 0;\n\n        // Add each node in the tree\n        l = 1;\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n\n          // Current region, starting with root\n          r = 0;\n\n          while (true) {\n            // Are there sub-regions?\n\n            // We look at first child index\n            if (RegionMatrix[rp(r, 'firstChild')] >= 0) {\n\n              // There are sub-regions\n\n              // We just iterate to find a \"leave\" of the tree\n              // that is an empty region or a region with a single node\n              // (see next case)\n\n              // Find the quadrant of n\n              if (NodeMatrix[np(n, 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n\n                if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                  // Top Left quarter\n                  q = RegionMatrix[rp(r, 'firstChild')];\n                }\n                else {\n\n                  // Bottom Left quarter\n                  q = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                }\n              }\n              else {\n                if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                  // Top Right quarter\n                  q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                }\n                else {\n\n                  // Bottom Right quarter\n                  q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                }\n              }\n\n              // Update center of mass and mass (we only do it for non-leave regions)\n              RegionMatrix[rp(r, 'massCenterX')] =\n                (RegionMatrix[rp(r, 'massCenterX')] * RegionMatrix[rp(r, 'mass')] +\n                 NodeMatrix[np(n, 'x')] * NodeMatrix[np(n, 'mass')]) /\n                (RegionMatrix[rp(r, 'mass')] + NodeMatrix[np(n, 'mass')]);\n\n              RegionMatrix[rp(r, 'massCenterY')] =\n                (RegionMatrix[rp(r, 'massCenterY')] * RegionMatrix[rp(r, 'mass')] +\n                 NodeMatrix[np(n, 'y')] * NodeMatrix[np(n, 'mass')]) /\n                (RegionMatrix[rp(r, 'mass')] + NodeMatrix[np(n, 'mass')]);\n\n              RegionMatrix[rp(r, 'mass')] += NodeMatrix[np(n, 'mass')];\n\n              // Iterate on the right quadrant\n              r = q;\n              continue;\n            }\n            else {\n\n              // There are no sub-regions: we are in a \"leave\"\n\n              // Is there a node in this leave?\n              if (RegionMatrix[rp(r, 'node')] < 0) {\n\n                // There is no node in region:\n                // we record node n and go on\n                RegionMatrix[rp(r, 'node')] = n;\n                break;\n              }\n              else {\n\n                // There is a node in this region\n\n                // We will need to create sub-regions, stick the two\n                // nodes (the old one r[0] and the new one n) in two\n                // subregions. If they fall in the same quadrant,\n                // we will iterate.\n\n                // Create sub-regions\n                RegionMatrix[rp(r, 'firstChild')] = l * W.ppr;\n                w = RegionMatrix[rp(r, 'size')] / 2;  // new size (half)\n\n                // NOTE: we use screen coordinates\n                // from Top Left to Bottom Right\n\n                // Top Left sub-region\n                g = RegionMatrix[rp(r, 'firstChild')];\n\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] - w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] - w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                // Bottom Left sub-region\n                g += W.ppr;\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] - w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] + w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                // Top Right sub-region\n                g += W.ppr;\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] + w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] - w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                // Bottom Right sub-region\n                g += W.ppr;\n                RegionMatrix[rp(g, 'node')] = -1;\n                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] + w;\n                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] + w;\n                RegionMatrix[rp(g, 'size')] = w;\n                RegionMatrix[rp(g, 'nextSibling')] = RegionMatrix[rp(r, 'nextSibling')];\n                RegionMatrix[rp(g, 'firstChild')] = -1;\n                RegionMatrix[rp(g, 'mass')] = 0;\n                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                l += 4;\n\n                // Now the goal is to find two different sub-regions\n                // for the two nodes: the one previously recorded (r[0])\n                // and the one we want to add (n)\n\n                // Find the quadrant of the old node\n                if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n                  if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Left quarter\n                    q = RegionMatrix[rp(r, 'firstChild')];\n                  }\n                  else {\n\n                    // Bottom Left quarter\n                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                  }\n                }\n                else {\n                  if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Right quarter\n                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                  }\n                  else {\n\n                    // Bottom Right quarter\n                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                  }\n                }\n\n                // We remove r[0] from the region r, add its mass to r and record it in q\n                RegionMatrix[rp(r, 'mass')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')];\n                RegionMatrix[rp(r, 'massCenterX')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')];\n                RegionMatrix[rp(r, 'massCenterY')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')];\n\n                RegionMatrix[rp(q, 'node')] = RegionMatrix[rp(r, 'node')];\n                RegionMatrix[rp(r, 'node')] = -1;\n\n                // Find the quadrant of n\n                if (NodeMatrix[np(n, 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n                  if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Left quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')];\n                  }\n                  else {\n                    // Bottom Left quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                  }\n                }\n                else {\n                  if(NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                    // Top Right quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                  }\n                  else {\n\n                    // Bottom Right quarter\n                    q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                  }\n                }\n\n                if (q === q2) {\n\n                  // If both nodes are in the same quadrant,\n                  // we have to try it again on this quadrant\n                  r = q;\n                  continue;\n                }\n\n                // If both quadrants are different, we record n\n                // in its quadrant\n                RegionMatrix[rp(q2, 'node')] = n;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n\n      // 2) Repulsion\n      //--------------\n      // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n      if (W.settings.barnesHutOptimize) {\n        coefficient = W.settings.scalingRatio;\n\n        // Applying repulsion through regions\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n\n          // Computing leaf quad nodes iteration\n\n          r = 0; // Starting with root region\n          while (true) {\n\n            if (RegionMatrix[rp(r, 'firstChild')] >= 0) {\n\n              // The region has sub-regions\n\n              // We run the Barnes Hut test to see if we are at the right distance\n              distance = Math.sqrt(\n                (Math.pow(NodeMatrix[np(n, 'x')] - RegionMatrix[rp(r, 'massCenterX')], 2)) +\n                (Math.pow(NodeMatrix[np(n, 'y')] - RegionMatrix[rp(r, 'massCenterY')], 2))\n              );\n\n              if (2 * RegionMatrix[rp(r, 'size')] / distance < W.settings.barnesHutTheta) {\n\n                // We treat the region as a single body, and we repulse\n\n                xDist = NodeMatrix[np(n, 'x')] - RegionMatrix[rp(r, 'massCenterX')];\n                yDist = NodeMatrix[np(n, 'y')] - RegionMatrix[rp(r, 'massCenterY')];\n\n                if (W.settings.adjustSizes) {\n\n                  //-- Linear Anti-collision Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      RegionMatrix[rp(r, 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                  else if (distance < 0) {\n                    factor = -coefficient * NodeMatrix[np(n, 'mass')] *\n                      RegionMatrix[rp(r, 'mass')] / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n                else {\n\n                  //-- Linear Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      RegionMatrix[rp(r, 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n\n                // When this is done, we iterate. We have to look at the next sibling.\n                if (RegionMatrix[rp(r, 'nextSibling')] < 0)\n                  break;  // No next sibling: we have finished the tree\n                r = RegionMatrix[rp(r, 'nextSibling')];\n                continue;\n\n              }\n              else {\n\n                // The region is too close and we have to look at sub-regions\n                r = RegionMatrix[rp(r, 'firstChild')];\n                continue;\n              }\n\n            }\n            else {\n\n              // The region has no sub-region\n              // If there is a node r[0] and it is not n, then repulse\n\n              if (RegionMatrix[rp(r, 'node')] >= 0 && RegionMatrix[rp(r, 'node')] !== n) {\n                xDist = NodeMatrix[np(n, 'x')] - NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')];\n                yDist = NodeMatrix[np(n, 'y')] - NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')];\n\n                distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n                if (W.settings.adjustSizes) {\n\n                  //-- Linear Anti-collision Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                  else if (distance < 0) {\n                    factor = -coefficient * NodeMatrix[np(n, 'mass')] *\n                      NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n                else {\n\n                  //-- Linear Repulsion\n                  if (distance > 0) {\n                    factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                      NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance / distance;\n\n                    NodeMatrix[np(n, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n, 'dy')] += yDist * factor;\n                  }\n                }\n\n              }\n\n              // When this is done, we iterate. We have to look at the next sibling.\n              if (RegionMatrix[rp(r, 'nextSibling')] < 0)\n                break;  // No next sibling: we have finished the tree\n              r = RegionMatrix[rp(r, 'nextSibling')];\n              continue;\n            }\n          }\n        }\n      }\n      else {\n        coefficient = W.settings.scalingRatio;\n\n        // Square iteration\n        for (n1 = 0; n1 < W.nodesLength; n1 += W.ppn) {\n          for (n2 = 0; n2 < n1; n2 += W.ppn) {\n\n            // Common to both methods\n            xDist = NodeMatrix[np(n1, 'x')] - NodeMatrix[np(n2, 'x')];\n            yDist = NodeMatrix[np(n1, 'y')] - NodeMatrix[np(n2, 'y')];\n\n            if (W.settings.adjustSizes) {\n\n              //-- Anticollision Linear Repulsion\n              distance = Math.sqrt(xDist * xDist + yDist * yDist) -\n                NodeMatrix[np(n1, 'size')] -\n                NodeMatrix[np(n2, 'size')];\n\n              if (distance > 0) {\n                factor = coefficient *\n                  NodeMatrix[np(n1, 'mass')] *\n                  NodeMatrix[np(n2, 'mass')] /\n                  distance / distance;\n\n                // Updating nodes' dx and dy\n                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                NodeMatrix[np(n2, 'dx')] += xDist * factor;\n                NodeMatrix[np(n2, 'dy')] += yDist * factor;\n              }\n              else if (distance < 0) {\n                factor = 100 * coefficient *\n                  NodeMatrix[np(n1, 'mass')] *\n                  NodeMatrix[np(n2, 'mass')];\n\n                // Updating nodes' dx and dy\n                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n              }\n            }\n            else {\n\n              //-- Linear Repulsion\n              distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n              if (distance > 0) {\n                factor = coefficient *\n                  NodeMatrix[np(n1, 'mass')] *\n                  NodeMatrix[np(n2, 'mass')] /\n                  distance / distance;\n\n                // Updating nodes' dx and dy\n                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n              }\n            }\n          }\n        }\n      }\n\n\n      // 3) Gravity\n      //------------\n      g = W.settings.gravity / W.settings.scalingRatio;\n      coefficient = W.settings.scalingRatio;\n      for (n = 0; n < W.nodesLength; n += W.ppn) {\n        factor = 0;\n\n        // Common to both methods\n        xDist = NodeMatrix[np(n, 'x')];\n        yDist = NodeMatrix[np(n, 'y')];\n        distance = Math.sqrt(\n          Math.pow(xDist, 2) + Math.pow(yDist, 2)\n        );\n\n        if (W.settings.strongGravityMode) {\n\n          //-- Strong gravity\n          if (distance > 0)\n            factor = coefficient * NodeMatrix[np(n, 'mass')] * g;\n        }\n        else {\n\n          //-- Linear Anti-collision Repulsion n\n          if (distance > 0)\n            factor = coefficient * NodeMatrix[np(n, 'mass')] * g / distance;\n        }\n\n        // Updating node's dx and dy\n        NodeMatrix[np(n, 'dx')] -= xDist * factor;\n        NodeMatrix[np(n, 'dy')] -= yDist * factor;\n      }\n\n\n\n      // 4) Attraction\n      //---------------\n      coefficient = 1 *\n        (W.settings.outboundAttractionDistribution ?\n          outboundAttCompensation :\n          1);\n\n      // TODO: simplify distance\n      // TODO: coefficient is always used as -c --> optimize?\n      for (e = 0; e < W.edgesLength; e += W.ppe) {\n        n1 = EdgeMatrix[ep(e, 'source')];\n        n2 = EdgeMatrix[ep(e, 'target')];\n        w = EdgeMatrix[ep(e, 'weight')];\n\n        // Edge weight influence\n        ewc = Math.pow(w, W.settings.edgeWeightInfluence);\n\n        // Common measures\n        xDist = NodeMatrix[np(n1, 'x')] - NodeMatrix[np(n2, 'x')];\n        yDist = NodeMatrix[np(n1, 'y')] - NodeMatrix[np(n2, 'y')];\n\n        // Applying attraction to nodes\n        if (W.settings.adjustSizes) {\n\n          distance = Math.sqrt(\n            (Math.pow(xDist, 2) + Math.pow(yDist, 2)) -\n            NodeMatrix[np(n1, 'size')] -\n            NodeMatrix[np(n2, 'size')]\n          );\n\n          if (W.settings.linLogMode) {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- LinLog Degree Distributed Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc * Math.log(1 + distance) /\n                distance /\n                NodeMatrix[np(n1, 'mass')];\n              }\n            }\n            else {\n\n              //-- LinLog Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc * Math.log(1 + distance) / distance;\n              }\n            }\n          }\n          else {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- Linear Degree Distributed Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc / NodeMatrix[np(n1, 'mass')];\n              }\n            }\n            else {\n\n              //-- Linear Anti-collision Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc;\n              }\n            }\n          }\n        }\n        else {\n\n          distance = Math.sqrt(\n            Math.pow(xDist, 2) + Math.pow(yDist, 2)\n          );\n\n          if (W.settings.linLogMode) {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- LinLog Degree Distributed Attraction\n              if (distance > 0) {\n                factor = -coefficient * ewc * Math.log(1 + distance) /\n                  distance /\n                  NodeMatrix[np(n1, 'mass')];\n              }\n            }\n            else {\n\n              //-- LinLog Attraction\n              if (distance > 0)\n                factor = -coefficient * ewc * Math.log(1 + distance) / distance;\n            }\n          }\n          else {\n            if (W.settings.outboundAttractionDistribution) {\n\n              //-- Linear Attraction Mass Distributed\n              // NOTE: Distance is set to 1 to override next condition\n              distance = 1;\n              factor = -coefficient * ewc / NodeMatrix[np(n1, 'mass')];\n            }\n            else {\n\n              //-- Linear Attraction\n              // NOTE: Distance is set to 1 to override next condition\n              distance = 1;\n              factor = -coefficient * ewc;\n            }\n          }\n        }\n\n        // Updating nodes' dx and dy\n        // TODO: if condition or factor = 1?\n        if (distance > 0) {\n\n          // Updating nodes' dx and dy\n          NodeMatrix[np(n1, 'dx')] += xDist * factor;\n          NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n          NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n          NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n        }\n      }\n\n\n      // 5) Apply Forces\n      //-----------------\n      var force,\n          swinging,\n          traction,\n          nodespeed;\n\n      // MATH: sqrt and square distances\n      if (W.settings.adjustSizes) {\n\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          if (!NodeMatrix[np(n, 'fixed')]) {\n            force = Math.sqrt(\n              Math.pow(NodeMatrix[np(n, 'dx')], 2) +\n              Math.pow(NodeMatrix[np(n, 'dy')], 2)\n            );\n\n            if (force > W.maxForce) {\n              NodeMatrix[np(n, 'dx')] =\n                NodeMatrix[np(n, 'dx')] * W.maxForce / force;\n              NodeMatrix[np(n, 'dy')] =\n                NodeMatrix[np(n, 'dy')] * W.maxForce / force;\n            }\n\n            swinging = NodeMatrix[np(n, 'mass')] *\n              Math.sqrt(\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) *\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) +\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')]) *\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')])\n              );\n\n            traction = Math.sqrt(\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) *\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) +\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')]) *\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')])\n            ) / 2;\n\n            nodespeed =\n              0.1 * Math.log(1 + traction) / (1 + Math.sqrt(swinging));\n\n            // Updating node's positon\n            NodeMatrix[np(n, 'x')] =\n              NodeMatrix[np(n, 'x')] + NodeMatrix[np(n, 'dx')] *\n              (nodespeed / W.settings.slowDown);\n            NodeMatrix[np(n, 'y')] =\n              NodeMatrix[np(n, 'y')] + NodeMatrix[np(n, 'dy')] *\n              (nodespeed / W.settings.slowDown);\n          }\n        }\n      }\n      else {\n\n        for (n = 0; n < W.nodesLength; n += W.ppn) {\n          if (!NodeMatrix[np(n, 'fixed')]) {\n\n            swinging = NodeMatrix[np(n, 'mass')] *\n              Math.sqrt(\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) *\n                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) +\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')]) *\n                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')])\n              );\n\n            traction = Math.sqrt(\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) *\n              (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) +\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')]) *\n              (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')])\n            ) / 2;\n\n            nodespeed = NodeMatrix[np(n, 'convergence')] *\n              Math.log(1 + traction) / (1 + Math.sqrt(swinging));\n\n            // Updating node convergence\n            NodeMatrix[np(n, 'convergence')] =\n              Math.min(1, Math.sqrt(\n                nodespeed *\n                (Math.pow(NodeMatrix[np(n, 'dx')], 2) +\n                 Math.pow(NodeMatrix[np(n, 'dy')], 2)) /\n                (1 + Math.sqrt(swinging))\n              ));\n\n            // Updating node's positon\n            NodeMatrix[np(n, 'x')] =\n              NodeMatrix[np(n, 'x')] + NodeMatrix[np(n, 'dx')] *\n              (nodespeed / W.settings.slowDown);\n            NodeMatrix[np(n, 'y')] =\n              NodeMatrix[np(n, 'y')] + NodeMatrix[np(n, 'dy')] *\n              (nodespeed / W.settings.slowDown);\n          }\n        }\n      }\n\n      // Counting one more iteration\n      W.iterations++;\n    }\n\n    /**\n     * Message reception & sending\n     */\n\n    // Sending data back to the supervisor\n    var sendNewCoords;\n\n    if (typeof window !== 'undefined' && window.document) {\n\n      // From same document as sigma\n      sendNewCoords = function() {\n        var e;\n\n        if (document.createEvent) {\n          e = document.createEvent('Event');\n          e.initEvent('newCoords', true, false);\n        }\n        else {\n          e = document.createEventObject();\n          e.eventType = 'newCoords';\n        }\n\n        e.eventName = 'newCoords';\n        e.data = {\n          nodes: NodeMatrix.buffer\n        };\n        requestAnimationFrame(function() {\n          document.dispatchEvent(e);\n        });\n      };\n    }\n    else {\n\n      // From a WebWorker\n      sendNewCoords = function() {\n        self.postMessage(\n          {nodes: NodeMatrix.buffer},\n          [NodeMatrix.buffer]\n        );\n      };\n    }\n\n    // Algorithm run\n    function run(n) {\n      for (var i = 0; i < n; i++)\n        pass();\n      sendNewCoords();\n    }\n\n    // On supervisor message\n    var listener = function(e) {\n      switch (e.data.action) {\n        case 'start':\n          init(\n            new Float32Array(e.data.nodes),\n            new Float32Array(e.data.edges),\n            e.data.config\n          );\n\n          // First iteration(s)\n          run(W.settings.startingIterations);\n          break;\n\n        case 'loop':\n          NodeMatrix = new Float32Array(e.data.nodes);\n          run(W.settings.iterationsPerRender);\n          break;\n\n        case 'config':\n\n          // Merging new settings\n          configure(e.data.config);\n          break;\n\n        case 'kill':\n\n          // Deleting context for garbage collection\n          __emptyObject(W);\n          NodeMatrix = null;\n          EdgeMatrix = null;\n          RegionMatrix = null;\n          self.removeEventListener('message', listener);\n          break;\n\n        default:\n      }\n    };\n\n    // Adding event listener\n    self.addEventListener('message', listener);\n  };\n\n\n  /**\n   * Exporting\n   * ----------\n   *\n   * Crush the worker function and make it accessible by sigma's instances so\n   * the supervisor can call it.\n   */\n  function crush(fnString) {\n    var pattern,\n        i,\n        l;\n\n    var np = [\n      'x',\n      'y',\n      'dx',\n      'dy',\n      'old_dx',\n      'old_dy',\n      'mass',\n      'convergence',\n      'size',\n      'fixed'\n    ];\n\n    var ep = [\n      'source',\n      'target',\n      'weight'\n    ];\n\n    var rp = [\n      'node',\n      'centerX',\n      'centerY',\n      'size',\n      'nextSibling',\n      'firstChild',\n      'mass',\n      'massCenterX',\n      'massCenterY'\n    ];\n\n    // rp\n    // NOTE: Must go first\n    for (i = 0, l = rp.length; i < l; i++) {\n      pattern = new RegExp('rp\\\\(([^,]*), \\'' + rp[i] + '\\'\\\\)', 'g');\n      fnString = fnString.replace(\n        pattern,\n        (i === 0) ? '$1' : '$1 + ' + i\n      );\n    }\n\n    // np\n    for (i = 0, l = np.length; i < l; i++) {\n      pattern = new RegExp('np\\\\(([^,]*), \\'' + np[i] + '\\'\\\\)', 'g');\n      fnString = fnString.replace(\n        pattern,\n        (i === 0) ? '$1' : '$1 + ' + i\n      );\n    }\n\n    // ep\n    for (i = 0, l = ep.length; i < l; i++) {\n      pattern = new RegExp('ep\\\\(([^,]*), \\'' + ep[i] + '\\'\\\\)', 'g');\n      fnString = fnString.replace(\n        pattern,\n        (i === 0) ? '$1' : '$1 + ' + i\n      );\n    }\n\n    return fnString;\n  }\n\n  // Exporting\n  function getWorkerFn() {\n    var fnString = crush ? crush(Worker.toString()) : Worker.toString();\n    return ';(' + fnString + ').call(this);';\n  }\n\n  if (inWebWorker) {\n\n    // We are in a webworker, so we launch the Worker function\n    eval(getWorkerFn());\n  }\n  else {\n\n    // We are requesting the worker from sigma, we retrieve it therefore\n    if (typeof sigma === 'undefined')\n      throw 'sigma is not declared';\n\n    sigma.prototype.getForceAtlas2Worker = getWorkerFn;\n  }\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/layout.forceAtlas2.js\n// module id = 20\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 118);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 118:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw new Error('sigma is not declared');\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.layout.noverlap');\n\n  /**\n   * Noverlap Layout\n   * ===============================\n   *\n   * Author: @apitts / Andrew Pitts\n   * Algorithm: @jacomyma / Mathieu Jacomy (originally contributed to Gephi and ported to sigma.js under the MIT license by @andpitts with permission)\n   * Acknowledgement: @sheyman / Sébastien Heymann (some inspiration has been taken from other MIT licensed layout algorithms authored by @sheyman)\n   * Version: 0.1\n   */\n\n  var settings = {\n    speed: 3,\n    scaleNodes: 1.2,\n    nodeMargin: 5.0,\n    gridSize: 20,\n    permittedExpansion: 1.1,\n    rendererIndex: 0,\n    maxIterations: 500\n  };\n\n  var _instance = {};\n\n  /**\n   * Event emitter Object\n   * ------------------\n   */\n  var _eventEmitter = {};\n\n   /**\n   * Noverlap Object\n   * ------------------\n   */\n  function Noverlap() {\n    var self = this;\n\n    this.init = function (sigInst, options) {\n      options = options || {};\n\n      // Properties\n      this.sigInst = sigInst;\n      this.config = sigma.utils.extend(options, settings);\n      this.easing = options.easing;\n      this.duration = options.duration;\n\n      if (options.nodes) {\n        this.nodes = options.nodes;\n        delete options.nodes;\n      }\n\n      if (!sigma.plugins || typeof sigma.plugins.animate === 'undefined') {\n        throw new Error('sigma.plugins.animate is not declared');\n      }\n\n      // State\n      this.running = false;\n    };\n\n    /**\n     * Single layout iteration.\n     */\n    this.atomicGo = function () {\n      if (!this.running || this.iterCount < 1) return false;\n\n      var nodes = this.nodes || this.sigInst.graph.nodes(),\n          nodesCount = nodes.length,\n          i,\n          n,\n          n1,\n          n2,\n          xmin = Infinity,\n          xmax = -Infinity,\n          ymin = Infinity,\n          ymax = -Infinity,\n          xwidth,\n          yheight,\n          xcenter,\n          ycenter,\n          grid,\n          row,\n          col,\n          minXBox,\n          maxXBox,\n          minYBox,\n          maxYBox,\n          adjacentNodes,\n          subRow,\n          subCol,\n          nxmin,\n          nxmax,\n          nymin,\n          nymax;\n\n      this.iterCount--;\n      this.running = false;\n\n      for (i=0; i < nodesCount; i++) {\n        n = nodes[i];\n        n.dn.dx = 0;\n        n.dn.dy = 0;\n\n        //Find the min and max for both x and y across all nodes\n        xmin = Math.min(xmin, n.dn_x - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n        xmax = Math.max(xmax, n.dn_x + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n        ymin = Math.min(ymin, n.dn_y - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n        ymax = Math.max(ymax, n.dn_y + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin) );\n\n      }\n\n      xwidth = xmax - xmin;\n      yheight = ymax - ymin;\n      xcenter = (xmin + xmax) / 2;\n      ycenter = (ymin + ymax) / 2;\n      xmin = xcenter - self.config.permittedExpansion*xwidth / 2;\n      xmax = xcenter + self.config.permittedExpansion*xwidth / 2;\n      ymin = ycenter - self.config.permittedExpansion*yheight / 2;\n      ymax = ycenter + self.config.permittedExpansion*yheight / 2;\n\n      grid = {}; //An object of objects where grid[row][col] is an array of node ids representing nodes that fall in that grid. Nodes can fall in more than one grid\n\n      for(row = 0; row < self.config.gridSize; row++) {\n        grid[row] = {};\n        for(col = 0; col < self.config.gridSize; col++) {\n          grid[row][col] = [];\n        }\n      }\n\n      //Place nodes in grid\n      for (i=0; i < nodesCount; i++) {\n        n = nodes[i];\n\n        nxmin = n.dn_x - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n        nxmax = n.dn_x + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n        nymin = n.dn_y - (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n        nymax = n.dn_y + (n.dn_size*self.config.scaleNodes + self.config.nodeMargin);\n\n        minXBox = Math.floor(self.config.gridSize* (nxmin - xmin) / (xmax - xmin) );\n        maxXBox = Math.floor(self.config.gridSize* (nxmax - xmin) / (xmax - xmin) );\n        minYBox = Math.floor(self.config.gridSize* (nymin - ymin) / (ymax - ymin) );\n        maxYBox = Math.floor(self.config.gridSize* (nymax - ymin) / (ymax - ymin) );\n        for(col = minXBox; col <= maxXBox; col++) {\n          for(row = minYBox; row <= maxYBox; row++) {\n            grid[row][col].push(n.id);\n          }\n        }\n      }\n\n\n      adjacentNodes = {}; //An object that stores the node ids of adjacent nodes (either in same grid box or adjacent grid box) for all nodes\n\n      for(row = 0; row < self.config.gridSize; row++) {\n        for(col = 0; col < self.config.gridSize; col++) {\n          grid[row][col].forEach(function(nodeId) {\n            if(!adjacentNodes[nodeId]) {\n              adjacentNodes[nodeId] = [];\n            }\n            for(subRow = Math.max(0, row - 1); subRow <= Math.min(row + 1, self.config.gridSize - 1); subRow++) {\n              for(subCol = Math.max(0, col - 1); subCol <= Math.min(col + 1,  self.config.gridSize - 1); subCol++) {\n                grid[subRow][subCol].forEach(function(subNodeId) {\n                  if(subNodeId !== nodeId && adjacentNodes[nodeId].indexOf(subNodeId) === -1) {\n                    adjacentNodes[nodeId].push(subNodeId);\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n\n      //If two nodes overlap then repulse them\n      for (i=0; i < nodesCount; i++) {\n        n1 = nodes[i];\n        adjacentNodes[n1.id].forEach(function(nodeId) {\n          var n2 = self.sigInst.graph.nodes(nodeId);\n          var xDist = n2.dn_x - n1.dn_x;\n          var yDist = n2.dn_y - n1.dn_y;\n          var dist = Math.sqrt(xDist*xDist + yDist*yDist);\n          var collision = (dist < ((n1.dn_size*self.config.scaleNodes + self.config.nodeMargin) + (n2.dn_size*self.config.scaleNodes + self.config.nodeMargin)));\n          if(collision) {\n            self.running = true;\n            if(dist > 0) {\n              n2.dn.dx += xDist / dist * (1 + n1.dn_size);\n              n2.dn.dy += yDist / dist * (1 + n1.dn_size);\n            } else {\n              n2.dn.dx += xwidth * 0.01 * (0.5 - Math.random());\n              n2.dn.dy += yheight * 0.01 * (0.5 - Math.random());\n            }\n          }\n        });\n      }\n\n      for (i=0; i < nodesCount; i++) {\n        n = nodes[i];\n        if(!n.fixed) {\n          n.dn_x = n.dn_x + n.dn.dx * 0.1 * self.config.speed;\n          n.dn_y = n.dn_y + n.dn.dy * 0.1 * self.config.speed;\n        }\n      }\n\n      if(this.running && this.iterCount < 1) {\n        this.running = false;\n      }\n\n      return this.running;\n    };\n\n    this.go = function () {\n      this.iterCount = this.config.maxIterations;\n\n      while (this.running) {\n        this.atomicGo();\n      };\n\n      this.stop();\n    };\n\n    this.start = function() {\n      if (this.running) return;\n\n      var nodes = this.sigInst.graph.nodes();\n\n      var prefix = this.sigInst.renderers[self.config.rendererIndex].options.prefix;\n\n      this.running = true;\n\n      // Init nodes\n      for (var i = 0; i < nodes.length; i++) {\n        nodes[i].dn_x = nodes[i][prefix + 'x'];\n        nodes[i].dn_y = nodes[i][prefix + 'y'];\n        nodes[i].dn_size = nodes[i][prefix + 'size'];\n        nodes[i].dn = {\n          dx: 0,\n          dy: 0\n        };\n      }\n      _eventEmitter[self.sigInst.id].dispatchEvent('start');\n      this.go();\n    };\n\n    this.stop = function() {\n      var nodes = this.sigInst.graph.nodes();\n\n      this.running = false;\n\n      if (this.easing) {\n        _eventEmitter[self.sigInst.id].dispatchEvent('interpolate');\n        sigma.plugins.animate(\n          self.sigInst,\n          {\n            x: 'dn_x',\n            y: 'dn_y'\n          },\n          {\n            easing: self.easing,\n            onComplete: function() {\n              self.sigInst.refresh();\n              for (var i = 0; i < nodes.length; i++) {\n                nodes[i].dn = null;\n                nodes[i].dn_x = null;\n                nodes[i].dn_y = null;\n              }\n              _eventEmitter[self.sigInst.id].dispatchEvent('stop');\n            },\n            duration: self.duration\n          }\n        );\n      }\n      else {\n        // Apply changes\n        for (var i = 0; i < nodes.length; i++) {\n          nodes[i].x = nodes[i].dn_x;\n          nodes[i].y = nodes[i].dn_y;\n        }\n\n        this.sigInst.refresh();\n\n        for (var i = 0; i < nodes.length; i++) {\n          nodes[i].dn = null;\n          nodes[i].dn_x = null;\n          nodes[i].dn_y = null;\n        }\n        _eventEmitter[self.sigInst.id].dispatchEvent('stop');\n      }\n    };\n\n    this.kill = function() {\n      this.sigInst = null;\n      this.config = null;\n      this.easing = null;\n    };\n  };\n\n  /**\n   * Interface\n   * ----------\n   */\n\n  /**\n   * Configure the layout algorithm.\n\n   * Recognized options:\n   * **********************\n   * Here is the exhaustive list of every accepted parameter in the settings\n   * object:\n   *\n   *   {?number}            speed               A larger value increases the convergence speed at the cost of precision\n   *   {?number}            scaleNodes          The ratio to scale nodes by - a larger ratio will lead to more space around larger nodes\n   *   {?number}            nodeMargin          A fixed margin to apply around nodes regardless of size\n   *   {?number}            maxIterations       The maximum number of iterations to perform before the layout completes.\n   *   {?integer}           gridSize            The number of rows and columns to use when partioning nodes into a grid for efficient computation\n   *   {?number}            permittedExpansion  A permitted expansion factor to the overall size of the network applied at each iteration\n   *   {?integer}           rendererIndex       The index of the renderer to use for node co-ordinates. Defaults to zero.\n   *   {?(function|string)} easing              Either the name of an easing in the sigma.utils.easings package or a function. If not specified, the\n   *                                            quadraticInOut easing from this package will be used instead.\n   *   {?number}            duration            The duration of the animation. If not specified, the \"animationsTime\" setting value of the sigma instance will be used instead.\n   *\n   *\n   * @param  {object} config  The optional configuration object.\n   *\n   * @return {sigma.classes.dispatcher} Returns an event emitter.\n   */\n  sigma.prototype.configNoverlap = function(config) {\n\n    var sigInst = this;\n\n    if (!config) throw new Error('Missing argument: \"config\"');\n\n    // Create instance if undefined\n    if (!_instance[sigInst.id]) {\n      _instance[sigInst.id] = new Noverlap();\n\n      _eventEmitter[sigInst.id] = {};\n      sigma.classes.dispatcher.extend(_eventEmitter[sigInst.id]);\n\n      // Binding on kill to clear the references\n      sigInst.bind('kill', function() {\n        _instance[sigInst.id].kill();\n        _instance[sigInst.id] = null;\n        _eventEmitter[sigInst.id] = null;\n      });\n    }\n\n    _instance[sigInst.id].init(sigInst, config);\n\n    return _eventEmitter[sigInst.id];\n  };\n\n  /**\n   * Start the layout algorithm. It will use the existing configuration if no\n   * new configuration is passed.\n\n   * Recognized options:\n   * **********************\n   * Here is the exhaustive list of every accepted parameter in the settings\n   * object\n   *\n   *   {?number}            speed               A larger value increases the convergence speed at the cost of precision\n   *   {?number}            scaleNodes          The ratio to scale nodes by - a larger ratio will lead to more space around larger nodes\n   *   {?number}            nodeMargin          A fixed margin to apply around nodes regardless of size\n   *   {?number}            maxIterations       The maximum number of iterations to perform before the layout completes.\n   *   {?integer}           gridSize            The number of rows and columns to use when partioning nodes into a grid for efficient computation\n   *   {?number}            permittedExpansion  A permitted expansion factor to the overall size of the network applied at each iteration\n   *   {?integer}           rendererIndex       The index of the renderer to use for node co-ordinates. Defaults to zero.\n   *   {?(function|string)} easing              Either the name of an easing in the sigma.utils.easings package or a function. If not specified, the\n   *                                            quadraticInOut easing from this package will be used instead.\n   *   {?number}            duration            The duration of the animation. If not specified, the \"animationsTime\" setting value of the sigma instance will be used instead.\n   *\n   *\n   *\n   * @param  {object} config  The optional configuration object.\n   *\n   * @return {sigma.classes.dispatcher} Returns an event emitter.\n   */\n\n  sigma.prototype.startNoverlap = function(config) {\n\n    var sigInst = this;\n\n    if (config) {\n      this.configNoverlap(sigInst, config);\n    }\n\n    _instance[sigInst.id].start();\n\n    return _eventEmitter[sigInst.id];\n  };\n\n\n  sigma.prototype.stopNoverlap = function() {\n    var sigInst = this;\n\n    if (_instance[sigInst.id]) {\n      _instance[sigInst.id].stop();\n    }\n  };\n\n  /**\n   * Returns true if the layout has started and is not completed.\n   *\n   * @return {boolean}\n   */\n  sigma.prototype.isNoverlapRunning = function() {\n\n    var sigInst = this;\n\n    return !!_instance[sigInst.id] && _instance[sigInst.id].running;\n  };\n\n}).call(this);\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/layout.noverlap.js\n// module id = 21\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 119);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 119:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function (undefined) {\n    'use strict';\n\n    if (typeof sigma === 'undefined')\n        throw 'sigma is not declared';\n\n    // Declare neo4j package\n    sigma.utils.pkg(\"sigma.neo4j\");\n\n    // Initialize package:\n    sigma.utils.pkg('sigma.utils');\n\n\n    /**\n     * This function is an helper for the neo4j communication.\n     *\n     * @param   {string|object}     neo4j       The URL of neo4j server or a neo4j server object.\n     * @param   {string}            endpoint    Endpoint of the neo4j server\n     * @param   {string}            method      The calling method for the endpoint : 'GET' or 'POST'\n     * @param   {object|string}     data        Data that will be send to the server\n     * @param   {function}          callback    The callback function\n     */\n    sigma.neo4j.send = function(neo4j, endpoint, method, data, callback) {\n        var xhr = sigma.utils.xhr(),\n            url, user, password;\n\n        // if neo4j arg is not an object\n        url = neo4j;\n        if(typeof neo4j === 'object') {\n            url = neo4j.url;\n            user = neo4j.user;\n            password = neo4j.password;\n        }\n\n        if (!xhr)\n            throw 'XMLHttpRequest not supported, cannot load the file.';\n\n        // Construct the endpoint url\n        url += endpoint;\n\n        xhr.open(method, url, true);\n        if( user && password) {\n            xhr.setRequestHeader('Authorization', 'Basic ' + btoa(user + ':' + password));\n        }\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                // Call the callback if specified:\n                callback(JSON.parse(xhr.responseText));\n            }\n        };\n        xhr.send(data);\n    };\n\n    /**\n     * This function parse a neo4j cypher query result, and transform it into\n     * a sigma graph object.\n     *\n     * @param  {object}     result      The server response of a cypher query.\n     *\n     * @return A graph object\n     */\n    sigma.neo4j.cypher_parse = function(result, producers) {\n        var graph = { nodes: [], edges: [] },\n            nodesMap = {},\n            edgesMap = {},\n            key;\n\n        // Iteration on all result data\n        result.results[0].data.forEach(function (data) {\n\n            // iteration on graph for all node\n            data.graph.nodes.forEach(function (node) {\n\n                var sigmaNode = producers.node(node);\n\n                if (sigmaNode.id in nodesMap) {\n                    // do nothing\n                } else {\n                    nodesMap[sigmaNode.id] = sigmaNode;\n                }\n            });\n\n            // iteration on graph for all edges\n            data.graph.relationships.forEach(function (edge) {\n\n                var sigmaEdge = producers.edge(edge);\n\n                if (sigmaEdge.id in edgesMap) {\n                    // do nothing\n                } else {\n                    edgesMap[sigmaEdge.id] = sigmaEdge;\n                }\n            });\n\n        });\n\n        // construct sigma nodes\n        for (key in nodesMap) {\n            graph.nodes.push(nodesMap[key]);\n        }\n        // construct sigma nodes\n        for (key in edgesMap) {\n            graph.edges.push(edgesMap[key]);\n        }\n\n        return graph;\n    };\n\n\n    /**\n     * This function execute a cypher and create a new sigma instance or\n     * updates the graph of a given instance. It is possible to give a callback\n     * that will be executed at the end of the process.\n     *\n     * @param  {object|string}      neo4j       The URL of neo4j server or a neo4j server object.\n     * @param  {string}             cypher      The cypher query\n     * @param  {?object|?sigma}     sig         A sigma configuration object or a sigma instance.\n     * @param  {?function}          callback    Eventually a callback to execute after\n     *                                          having parsed the file. It will be called\n     *                                          with the related sigma instance as\n     *                                          parameter.\n     * @param  {?object}            producers   Factory object with node and/or edge producers functions\n     *                                          By default sigma.neo4j produces black nodes and gray edges.\n     *                                          producers.node(node) takes neo4j node as input,\n     *                                          should output sigma node properties\n     *                                          producers.edge(edge) takes neo4j node as input,\n     *                                          should output sigma edge properties\n     */\n    sigma.neo4j.cypher = function (neo4j, cypher, sig, callback, producers) {\n        var endpoint = '/db/data/transaction/commit',\n            data, cypherCallback;\n\n        if(!producers) producers = sigma.neo4j.defaultProducers;\n\n        // Data that will be send to the server\n        data = JSON.stringify({\n            \"statements\": [\n                {\n                    \"statement\": cypher,\n                    \"resultDataContents\": [\"graph\"],\n                    \"includeStats\": false\n                }\n            ]\n        });\n\n        // Callback method after server response\n        cypherCallback = function (callback) {\n\n            return function (response) {\n\n                var graph = { nodes: [], edges: [] };\n\n                graph = sigma.neo4j.cypher_parse(response, producers);\n\n                // Update the instance's graph:\n                if (sig instanceof sigma) {\n                    sig.graph.clear();\n                    sig.graph.read(graph);\n\n                    // ...or instantiate sigma if needed:\n                } else if (typeof sig === 'object') {\n                    sig = new sigma(sig);\n                    sig.graph.read(graph);\n                    sig.refresh();\n\n                    // ...or it's finally the callback:\n                } else if (typeof sig === 'function') {\n                    callback = sig;\n                    sig = null;\n                }\n\n                // Call the callback if specified:\n                if (callback)\n                    callback(sig || graph);\n            };\n        };\n\n        // Let's call neo4j\n        sigma.neo4j.send(neo4j, endpoint, 'POST', data, cypherCallback(callback));\n    };\n\n    /**\n     * This function call neo4j to get all labels of the graph.\n     *\n     * @param  {string}       neo4j      The URL of neo4j server or an object with the url, user & password.\n     * @param  {function}     callback   The callback function\n     *\n     * @return An array of label\n     */\n    sigma.neo4j.getLabels = function(neo4j, callback) {\n        sigma.neo4j.send(neo4j, '/db/data/labels', 'GET', null, callback);\n    };\n\n    /**\n     * This function parse a neo4j cypher query result.\n     *\n     * @param  {string}       neo4j      The URL of neo4j server or an object with the url, user & password.\n     * @param  {function}     callback   The callback function\n     *\n     * @return An array of relationship type\n     */\n    sigma.neo4j.getTypes = function(neo4j, callback) {\n        sigma.neo4j.send(neo4j, '/db/data/relationship/types', 'GET', null, callback);\n    };\n\n    /**\n     * This object consist of sigma node and endge producers based on neo4j data node.\n     *\n     * @param  {object}       node   node(neo4j_node): sigma_node, where  neo4j_node = {id, label, properties}\n     * @param  {object}       edge   edge(neo4j_edge): sigma_edge, where  neo4j_edge = {id, type, startNode, endNode, properties}\n     *\n     * @return Sigma data object for node or edge\n     */\n    sigma.neo4j.defaultProducers = {\n        node: function(node) {\n            return {\n                id : node.id,\n                label : node.id,\n                x : Math.random(),\n                y : Math.random(),\n                size : 1,\n                color : '#666666',\n                neo4j_labels : node.labels,\n                neo4j_data : node.properties\n            }\n        },\n        edge: function(edge) {\n            return {\n                id : edge.id,\n                label : edge.type,\n                source : edge.startNode,\n                target : edge.endNode,\n                color : '#7D7C8E',\n                neo4j_type : edge.type,\n                neo4j_data : edge.properties\n            }\n        }\n    }\n\n}).call(this);\n\n    \n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/neo4j.cypher.js\n// module id = 22\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 116);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 116:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_plugins_sigma_renderers_customShapes_shape_library_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_plugins_sigma_renderers_customShapes_sigma_renderers_customShapes_js__);\n\n\n\n/***/ },\n\n/***/ 29:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  var shapes = [];\n  var register = function(name,drawShape,drawBorder) {\n    shapes.push({\n      'name': name,\n      'drawShape': drawShape,\n      'drawBorder': drawBorder\n    });\n  }\n\n  var enumerateShapes = function() {\n    return shapes;\n  }\n\n  /**\n   * For the standard closed shapes - the shape fill and border are drawn the\n   * same, with some minor differences for fill and border. To facilitate this we\n   * create the generic draw functions, that take a shape drawing func and\n   * return a shape-renderer/border-renderer\n   * ----------\n   */\n  var genericDrawShape = function(shapeFunc) {\n    return function(node,x,y,size,color,context) {\n      context.fillStyle = color;\n      context.beginPath();\n      shapeFunc(node,x,y,size,context);\n      context.closePath();\n      context.fill();\n    };\n  }\n\n  var genericDrawBorder = function(shapeFunc) {\n    return function(node,x,y,size,color,context) {\n      context.strokeStyle = color;\n      context.lineWidth = size / 5;\n      context.beginPath();\n      shapeFunc(node,x,y,size,context);\n      context.closePath();\n      context.stroke();\n    };\n  }\n\n  /**\n   * We now proced to use the generics to define our standard shape/border\n   * drawers: square, diamond, equilateral (polygon), and star\n   * ----------\n   */\n  var drawSquare = function(node,x,y,size,context) {\n    var rotate = Math.PI*45/180; // 45 deg rotation of a diamond shape\n    context.moveTo(x+size*Math.sin(rotate), y-size*Math.cos(rotate)); // first point on outer radius, dwangle 'rotate'\n    for(var i=1; i<4; i++) {\n      context.lineTo(x+Math.sin(rotate+2*Math.PI*i/4)*size, y-Math.cos(rotate+2*Math.PI*i/4)*size);\n    }\n  }\n  register(\"square\",genericDrawShape(drawSquare),genericDrawBorder(drawSquare));\n\n  var drawCircle = function(node,x,y,size,context) {\n    context.arc(x,y,size,0,Math.PI*2,true);\n  }\n  register(\"circle\",genericDrawShape(drawCircle),genericDrawBorder(drawCircle));\n\n  var drawDiamond = function(node,x,y,size,context) {\n    context.moveTo(x-size, y);\n    context.lineTo(x, y-size);\n    context.lineTo(x+size, y);\n    context.lineTo(x, y+size);\n  }\n  register(\"diamond\",genericDrawShape(drawDiamond),genericDrawBorder(drawDiamond));\n\n  var drawCross = function(node,x,y,size,context) {\n    var lineWeight = (node.cross && node.cross.lineWeight) || 5;\n    context.moveTo(x-size, y-lineWeight);\n    context.lineTo(x-size, y+lineWeight);\n    context.lineTo(x-lineWeight, y+lineWeight);\n    context.lineTo(x-lineWeight, y+size);\n    context.lineTo(x+lineWeight, y+size);\n    context.lineTo(x+lineWeight, y+lineWeight);\n    context.lineTo(x+size, y+lineWeight);\n    context.lineTo(x+size, y-lineWeight);\n    context.lineTo(x+lineWeight, y-lineWeight);\n    context.lineTo(x+lineWeight, y-size);\n    context.lineTo(x-lineWeight, y-size);\n    context.lineTo(x-lineWeight, y-lineWeight);\n  }\n  register(\"cross\",genericDrawShape(drawCross),genericDrawBorder(drawCross));\n\n  var drawEquilateral = function(node,x,y,size,context) {\n    var pcount = (node.equilateral && node.equilateral.numPoints) || 5;\n    var rotate = ((node.equilateral && node.equilateral.rotate) || 0)*Math.PI/180;\n    var radius = size;\n    context.moveTo(x+radius*Math.sin(rotate), y-radius*Math.cos(rotate)); // first point on outer radius, angle 'rotate'\n    for(var i=1; i<pcount; i++) {\n      context.lineTo(x+Math.sin(rotate+2*Math.PI*i/pcount)*radius, y-Math.cos(rotate+2*Math.PI*i/pcount)*radius);\n    }\n  }\n  register(\"equilateral\",genericDrawShape(drawEquilateral),genericDrawBorder(drawEquilateral));\n\n\n  var starShape = function(node,x,y,size,context) {\n    var pcount = (node.star && node.star.numPoints) || 5,\n        inRatio = (node.star && node.star.innerRatio) || 0.5,\n        outR = size,\n        inR = size*inRatio,\n        angleOffset = Math.PI/pcount;\n    context.moveTo(x, y-size); // first point on outer radius, top\n    for(var i=0; i<pcount; i++) {\n      context.lineTo(x+Math.sin(angleOffset+2*Math.PI*i/pcount)*inR,\n          y-Math.cos(angleOffset+2*Math.PI*i/pcount)*inR);\n      context.lineTo(x+Math.sin(2*Math.PI*(i+1)/pcount)*outR,\n          y-Math.cos(2*Math.PI*(i+1)/pcount)*outR);\n    }\n  }\n  register(\"star\",genericDrawShape(starShape),genericDrawBorder(starShape));\n\n  /**\n   * An example of a non standard shape (pacman). Here we WILL NOT use the\n   * genericDraw functions, but rather register a full custom node renderer for\n   * fill, and skip the border renderer which is irrelevant for this shape\n   * ----------\n   */\n  var drawPacman = function(node,x,y,size,color,context) {\n    context.fillStyle = 'yellow';\n    context.beginPath();\n    context.arc(x,y,size,1.25*Math.PI,0,false);\n    context.arc(x,y,size,0,0.75*Math.PI,false);\n    context.lineTo(x,y);\n    context.closePath();\n    context.fill();\n\n    context.fillStyle = 'white';\n    context.strokeStyle = 'black';\n    context.beginPath();\n    context.arc(x+size/3,y-size/3,size/4,0,2*Math.PI,false);\n    context.closePath();\n    context.fill();\n    context.stroke();\n\n    context.fillStyle = 'black';\n    context.beginPath();\n    context.arc(x+4*size/9,y-size/3,size/8,0,2*Math.PI,false);\n    context.closePath();\n    context.fill();\n  }\n  register(\"pacman\",drawPacman,null);\n\n  /**\n   * Exporting\n   * ----------\n   */\n  this.ShapeLibrary = {\n\n    // Functions\n    enumerate: enumerateShapes,\n    // add: addShape,\n\n    // Version\n    version: '0.1'\n  };\n\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 30:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  if (typeof ShapeLibrary === 'undefined')\n    throw 'ShapeLibrary is not declared';\n\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.canvas.nodes');\n  sigma.utils.pkg('sigma.svg.nodes');\n\n  var sigInst = undefined;\n  var imgCache = {};\n\n  var initPlugin = function(inst) {\n    sigInst = inst;\n  }\n\n  var drawImage = function (node,x,y,size,context) {\n    if(sigInst && node.image && node.image.url) {\n      var url = node.image.url;\n      var ih = node.image.h || 1; // 1 is arbitrary, anyway only the ratio counts\n      var iw = node.image.w || 1;\n      var scale = node.image.scale || 1;\n      var clip = node.image.clip || 1;\n\n      // create new IMG or get from imgCache\n      var image = imgCache[url];\n      if(!image) {\n        image = document.createElement('IMG');\n        image.src = url;\n        image.status = 'loading';\n        image.onerror = function() {\n          console.log(\"error loading\", url);\n          image.status = 'error';\n        };\n        image.onload = function(){\n          // TODO see how we redraw on load\n          // need to provide the siginst as a parameter to the library\n          console.log(\"redraw on image load\", url);\n          image.status = 'ok';\n          sigInst.refresh();\n        };\n        imgCache[url] = image;\n      }\n\n      // calculate position and draw\n      var xratio = (iw<ih) ? (iw/ih) : 1;\n      var yratio = (ih<iw) ? (ih/iw) : 1;\n      var r = size*scale;\n\n      // Draw the clipping disc:\n      context.save(); // enter clipping mode\n      context.beginPath();\n      context.arc(x,y,size*clip,0,Math.PI*2,true);\n      context.closePath();\n      context.clip();\n\n      if(image.status === 'ok') {\n        // Draw the actual image\n        context.drawImage(image,\n            x+Math.sin(-3.142/4)*r*xratio,\n            y-Math.cos(-3.142/4)*r*yratio,\n            r*xratio*2*Math.sin(-3.142/4)*(-1),\n            r*yratio*2*Math.cos(-3.142/4));\n      }\n      context.restore(); // exit clipping mode\n    }\n  }\n\n  var drawSVGImage = function (node, group, settings) {\n    if(sigInst && node.image && node.image.url) {\n      var clipCircle = document.createElementNS(settings('xmlns'), 'circle'),\n        clipPath = document.createElementNS(settings('xmlns'), 'clipPath'),\n        clipPathId = settings('classPrefix') + '-clip-path-' + node.id,\n        def = document.createElementNS(settings('xmlns'), 'defs'),\n        image = document.createElementNS(settings('xmlns'), 'image'),\n        url = node.image.url;\n\n      clipPath.setAttributeNS(null, 'id', clipPathId);\n      clipPath.appendChild(clipCircle);\n      def.appendChild(clipPath);\n\n      // angular's base tag will change the relative fragment id, so\n      // #<clipPathId> doesn't work\n      // HACKHACK: IE <=9 does not respect the HTML base element in SVG.\n      // They don't need the current URL in the clip path reference.\n      var absolutePath = /MSIE [5-9]/.test(navigator.userAgent) ?\n        \"\" : document.location.href;\n      // To fix cases where an anchor tag was used\n      absolutePath = absolutePath.split(\"#\")[0];\n      image.setAttributeNS(null, 'class',\n        settings('classPrefix') + '-node-image');\n      image.setAttributeNS(null, 'clip-path',\n        'url(' + absolutePath + '#' + clipPathId + ')');\n      image.setAttributeNS(null, 'pointer-events', 'none');\n      image.setAttributeNS('http://www.w3.org/1999/xlink', 'href',\n        node.image.url);\n      group.appendChild(def);\n      group.appendChild(image);\n    }\n  }\n\n  var register = function(name,drawShape,drawBorder) {\n    sigma.canvas.nodes[name] = function(node, context, settings) {\n      var args = arguments,\n          prefix = settings('prefix') || '',\n          size = node[prefix + 'size'],\n          color = node.color || settings('defaultNodeColor'),\n          borderColor = node.borderColor || color,\n          x = node[prefix + 'x'],\n          y = node[prefix + 'y'];\n\n      context.save();\n\n      if(drawShape) {\n        drawShape(node,x,y,size,color,context);\n      }\n\n      if(drawBorder) {\n        drawBorder(node,x,y,size,borderColor,context);\n      }\n\n      drawImage(node,x,y,size,context);\n\n      context.restore();\n    };\n\n    sigma.svg.nodes[name] = {\n      create: function(node, settings) {\n        var group = document.createElementNS(settings('xmlns'), 'g'),\n        circle = document.createElementNS(settings('xmlns'), 'circle');\n\n        group.setAttributeNS(null, 'class',\n          settings('classPrefix') + '-node-group');\n        group.setAttributeNS(null, 'data-node-id', node.id);\n        // Defining the node's circle\n        circle.setAttributeNS(null, 'data-node-id', node.id);\n        circle.setAttributeNS(null, 'class',\n          settings('classPrefix') + '-node');\n        circle.setAttributeNS(null, 'fill',\n          node.color || settings('defaultNodeColor'));\n\n        group.appendChild(circle);\n        drawSVGImage(node, group, settings);\n        return group;\n      },\n      update: function(node, group, settings) {\n        var classPrefix = settings('classPrefix'),\n          clip = node.image.clip || 1,\n          // 1 is arbitrary, anyway only the ratio counts\n          ih = node.image.h || 1,\n          iw = node.image.w || 1,\n          prefix = settings('prefix') || '',\n          scale = node.image.scale || 1,\n          size = node[prefix + 'size'],\n          x = node[prefix + 'x'],\n          y = node[prefix + 'y'];\n\n          var r = scale * size,\n          xratio = (iw<ih) ? (iw/ih) : 1,\n          yratio = (ih<iw) ? (ih/iw) : 1;\n\n        for(var i = 0, childNodes = group.childNodes; i < childNodes.length; i ++) {\n          var className = childNodes[i].getAttribute('class');\n\n          switch (className) {\n            case classPrefix + '-node':\n              childNodes[i].setAttributeNS(null, 'cx', x);\n              childNodes[i].setAttributeNS(null, 'cy', y);\n              childNodes[i].setAttributeNS(null, 'r', size);\n\n              // // Updating only if not freestyle\n              if (!settings('freeStyle')) {\n                childNodes[i].setAttributeNS(\n                  null,\n                  'fill',\n                  node.color || settings('defaultNodeColor'));\n              }\n              break;\n            case classPrefix + '-node-image':\n              childNodes[i].setAttributeNS(null, 'x',\n                x+Math.sin(-3.142/4)*r*xratio);\n              childNodes[i].setAttributeNS(null, 'y',\n                y-Math.cos(-3.142/4)*r*yratio);\n              childNodes[i].setAttributeNS(null, 'width',\n                r*xratio*2*Math.sin(-3.142/4)*(-1));\n              childNodes[i].setAttributeNS(null, 'height',\n                r*yratio*2*Math.cos(-3.142/4));\n              break;\n            default:\n              // no class name, must be the clip-path\n              var clipPath = childNodes[i].firstChild;\n              if (clipPath != null) {\n                var clipPathId = classPrefix + '-clip-path-' + node.id;\n                if (clipPath.getAttribute('id') === clipPathId) {\n                  clipPath.firstChild.setAttributeNS(null, 'cx', x);\n                  clipPath.firstChild.setAttributeNS(null, 'cy', y);\n                  clipPath.firstChild.setAttributeNS(null, 'r',\n                    clip * size);\n                }\n              }\n              break;\n          }\n        }\n\n        // showing\n        group.style.display = '';\n      }\n    }\n  }\n\n  ShapeLibrary.enumerate().forEach(function(shape) {\n    register(shape.name,shape.drawShape,shape.drawBorder);\n  });\n\n  /**\n   * Exporting\n   * ----------\n   */\n  this.CustomShapes = {\n\n    // Functions\n    init: initPlugin,\n    // add pre-cache images\n\n    // Version\n    version: '0.1'\n  };\n\n\n\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/nodes.js\n// module id = 23\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 128);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 128:\n/***/ function(module, exports, __webpack_require__) {\n\n__webpack_require__(19);\nmodule.exports = __webpack_require__(20);\n\n\n/***/ },\n\n/***/ 19:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  /**\n   * GEXF Library\n   * =============\n   *\n   * Author: PLIQUE Guillaume (Yomguithereal)\n   * URL: https://github.com/Yomguithereal/gexf-parser\n   * Version: 0.1.1\n   */\n\n  /**\n   * Helper Namespace\n   * -----------------\n   *\n   * A useful batch of function dealing with DOM operations and types.\n   */\n  var _helpers = {\n    getModelTags: function(xml) {\n      var attributesTags = xml.getElementsByTagName('attributes'),\n          modelTags = {},\n          l = attributesTags.length,\n          i;\n\n      for (i = 0; i < l; i++)\n        modelTags[attributesTags[i].getAttribute('class')] =\n          attributesTags[i].childNodes;\n\n      return modelTags;\n    },\n    nodeListToArray: function(nodeList) {\n\n      // Return array\n      var children = [];\n\n      // Iterating\n      for (var i = 0, len = nodeList.length; i < len; ++i) {\n        if (nodeList[i].nodeName !== '#text')\n          children.push(nodeList[i]);\n      }\n\n      return children;\n    },\n    nodeListEach: function(nodeList, func) {\n\n      // Iterating\n      for (var i = 0, len = nodeList.length; i < len; ++i) {\n        if (nodeList[i].nodeName !== '#text')\n          func(nodeList[i]);\n      }\n    },\n    nodeListToHash: function(nodeList, filter) {\n\n      // Return object\n      var children = {};\n\n      // Iterating\n      for (var i = 0; i < nodeList.length; i++) {\n        if (nodeList[i].nodeName !== '#text') {\n          var prop = filter(nodeList[i]);\n          children[prop.key] = prop.value;\n        }\n      }\n\n      return children;\n    },\n    namedNodeMapToObject: function(nodeMap) {\n\n      // Return object\n      var attributes = {};\n\n      // Iterating\n      for (var i = 0; i < nodeMap.length; i++) {\n        attributes[nodeMap[i].name] = nodeMap[i].value;\n      }\n\n      return attributes;\n    },\n    getFirstElementByTagNS: function(node, ns, tag) {\n      var el = node.getElementsByTagName(ns + ':' + tag)[0];\n\n      if (!el)\n        el = node.getElementsByTagNameNS(ns, tag)[0];\n\n      if (!el)\n        el = node.getElementsByTagName(tag)[0];\n\n      return el;\n    },\n    getAttributeNS: function(node, ns, attribute) {\n      var attr_value = node.getAttribute(ns + ':' + attribute);\n\n      if (attr_value === undefined)\n        attr_value = node.getAttributeNS(ns, attribute);\n\n      if (attr_value === undefined)\n        attr_value = node.getAttribute(attribute);\n\n      return attr_value;\n    },\n    enforceType: function(type, value) {\n\n      switch (type) {\n        case 'boolean':\n          value = (value === 'true');\n          break;\n\n        case 'integer':\n        case 'long':\n        case 'float':\n        case 'double':\n          value = +value;\n          break;\n\n        case 'liststring':\n          value = value ? value.split('|') : [];\n          break;\n      }\n\n      return value;\n    },\n    getRGB: function(values) {\n      return (values[3]) ?\n        'rgba(' + values.join(',') + ')' :\n        'rgb(' + values.slice(0, -1).join(',') + ')';\n    }\n  };\n\n\n  /**\n   * Parser Core Functions\n   * ----------------------\n   *\n   * The XML parser's functions themselves.\n   */\n\n  /**\n   * Node structure.\n   * A function returning an object guarded with default value.\n   *\n   * @param  {object} properties The node properties.\n   * @return {object}            The guarded node object.\n   */\n  function Node(properties) {\n\n    // Possible Properties\n    var node = {\n      id: properties.id,\n      label: properties.label\n    };\n\n    if (properties.viz)\n      node.viz = properties.viz;\n\n    if (properties.attributes)\n      node.attributes = properties.attributes;\n\n    return node;\n  }\n\n\n  /**\n   * Edge structure.\n   * A function returning an object guarded with default value.\n   *\n   * @param  {object} properties The edge properties.\n   * @return {object}            The guarded edge object.\n   */\n  function Edge(properties) {\n\n    // Possible Properties\n    var edge = {\n      id: properties.id,\n      type: properties.type || 'undirected',\n      label: properties.label || '',\n      source: properties.source,\n      target: properties.target,\n      weight: +properties.weight || 1.0\n    };\n\n    if (properties.viz)\n      edge.viz = properties.viz;\n\n    if (properties.attributes)\n      edge.attributes = properties.attributes;\n\n    return edge;\n  }\n\n  /**\n   * Graph parser.\n   * This structure parse a gexf string and return an object containing the\n   * parsed graph.\n   *\n   * @param  {string} xml The xml string of the gexf file to parse.\n   * @return {object}     The parsed graph.\n   */\n  function Graph(xml) {\n    var _xml = {};\n\n    // Basic Properties\n    //------------------\n    _xml.els = {\n      root: xml.getElementsByTagName('gexf')[0],\n      graph: xml.getElementsByTagName('graph')[0],\n      meta: xml.getElementsByTagName('meta')[0],\n      nodes: xml.getElementsByTagName('node'),\n      edges: xml.getElementsByTagName('edge'),\n      model: _helpers.getModelTags(xml)\n    };\n\n    // Information\n    _xml.hasViz = !!_helpers.getAttributeNS(_xml.els.root, 'xmlns', 'viz');\n    _xml.version = _xml.els.root.getAttribute('version') || '1.0';\n    _xml.mode = _xml.els.graph.getAttribute('mode') || 'static';\n\n    var edgeType = _xml.els.graph.getAttribute('defaultedgetype');\n    _xml.defaultEdgetype = edgeType || 'undirected';\n\n    // Parser Functions\n    //------------------\n\n    // Meta Data\n    function _metaData() {\n\n      var metas = {};\n      if (!_xml.els.meta)\n        return metas;\n\n      // Last modified date\n      metas.lastmodifieddate = _xml.els.meta.getAttribute('lastmodifieddate');\n\n      // Other information\n      _helpers.nodeListEach(_xml.els.meta.childNodes, function(child) {\n        metas[child.tagName.toLowerCase()] = child.textContent;\n      });\n\n      return metas;\n    }\n\n    // Model\n    function _model(cls) {\n      var attributes = [];\n\n      // Iterating through attributes\n      if (_xml.els.model[cls])\n        _helpers.nodeListEach(_xml.els.model[cls], function(attr) {\n\n          // Properties\n          var properties = {\n            id: attr.getAttribute('id') || attr.getAttribute('for'),\n            type: attr.getAttribute('type') || 'string',\n            title: attr.getAttribute('title') || ''\n          };\n\n          // Defaults\n          var default_el = _helpers.nodeListToArray(attr.childNodes);\n\n          if (default_el.length > 0)\n            properties.defaultValue = default_el[0].textContent;\n\n          // Creating attribute\n          attributes.push(properties);\n        });\n\n      return attributes.length > 0 ? attributes : false;\n    }\n\n    // Data from nodes or edges\n    function _data(model, node_or_edge) {\n\n      var data = {};\n      var attvalues_els = node_or_edge.getElementsByTagName('attvalue');\n\n      // Getting Node Indicated Attributes\n      var ah = _helpers.nodeListToHash(attvalues_els, function(el) {\n        var attributes = _helpers.namedNodeMapToObject(el.attributes);\n        var key = attributes.id || attributes['for'];\n\n        // Returning object\n        return {key: key, value: attributes.value};\n      });\n\n\n      // Iterating through model\n      model.map(function(a) {\n\n        // Default value?\n        data[a.id] = !(a.id in ah) && 'defaultValue' in a ?\n          _helpers.enforceType(a.type, a.defaultValue) :\n          _helpers.enforceType(a.type, ah[a.id]);\n\n      });\n\n      return data;\n    }\n\n    // Nodes\n    function _nodes(model) {\n      var nodes = [];\n\n      // Iteration through nodes\n      _helpers.nodeListEach(_xml.els.nodes, function(n) {\n\n        // Basic properties\n        var properties = {\n          id: n.getAttribute('id'),\n          label: n.getAttribute('label') || ''\n        };\n\n        // Retrieving data from nodes if any\n        if (model)\n          properties.attributes = _data(model, n);\n\n        // Retrieving viz information\n        if (_xml.hasViz)\n          properties.viz = _nodeViz(n);\n\n        // Pushing node\n        nodes.push(Node(properties));\n      });\n\n      return nodes;\n    }\n\n    // Viz information from nodes\n    function _nodeViz(node) {\n      var viz = {};\n\n      // Color\n      var color_el = _helpers.getFirstElementByTagNS(node, 'viz', 'color');\n\n      if (color_el) {\n        var color = ['r', 'g', 'b', 'a'].map(function(c) {\n          return color_el.getAttribute(c);\n        });\n\n        viz.color = _helpers.getRGB(color);\n      }\n\n      // Position\n      var pos_el = _helpers.getFirstElementByTagNS(node, 'viz', 'position');\n\n      if (pos_el) {\n        viz.position = {};\n\n        ['x', 'y', 'z'].map(function(p) {\n          viz.position[p] = +pos_el.getAttribute(p);\n        });\n      }\n\n      // Size\n      var size_el = _helpers.getFirstElementByTagNS(node, 'viz', 'size');\n      if (size_el)\n        viz.size = +size_el.getAttribute('value');\n\n      // Shape\n      var shape_el = _helpers.getFirstElementByTagNS(node, 'viz', 'shape');\n      if (shape_el)\n        viz.shape = shape_el.getAttribute('value');\n\n      return viz;\n    }\n\n    // Edges\n    function _edges(model, default_type) {\n      var edges = [];\n\n      // Iteration through edges\n      _helpers.nodeListEach(_xml.els.edges, function(e) {\n\n        // Creating the edge\n        var properties = _helpers.namedNodeMapToObject(e.attributes);\n        if (!('type' in properties)) {\n          properties.type = default_type;\n        }\n\n        // Retrieving edge data\n        if (model)\n          properties.attributes = _data(model, e);\n\n\n        // Retrieving viz information\n        if (_xml.hasViz)\n          properties.viz = _edgeViz(e);\n\n        edges.push(Edge(properties));\n      });\n\n      return edges;\n    }\n\n    // Viz information from edges\n    function _edgeViz(edge) {\n      var viz = {};\n\n      // Color\n      var color_el = _helpers.getFirstElementByTagNS(edge, 'viz', 'color');\n\n      if (color_el) {\n        var color = ['r', 'g', 'b', 'a'].map(function(c) {\n          return color_el.getAttribute(c);\n        });\n\n        viz.color = _helpers.getRGB(color);\n      }\n\n      // Shape\n      var shape_el = _helpers.getFirstElementByTagNS(edge, 'viz', 'shape');\n      if (shape_el)\n        viz.shape = shape_el.getAttribute('value');\n\n      // Thickness\n      var thick_el = _helpers.getFirstElementByTagNS(edge, 'viz', 'thickness');\n      if (thick_el)\n        viz.thickness = +thick_el.getAttribute('value');\n\n      return viz;\n    }\n\n\n    // Returning the Graph\n    //---------------------\n    var nodeModel = _model('node'),\n        edgeModel = _model('edge');\n\n    var graph = {\n      version: _xml.version,\n      mode: _xml.mode,\n      defaultEdgeType: _xml.defaultEdgetype,\n      meta: _metaData(),\n      model: {},\n      nodes: _nodes(nodeModel),\n      edges: _edges(edgeModel, _xml.defaultEdgetype)\n    };\n\n    if (nodeModel)\n      graph.model.node = nodeModel;\n    if (edgeModel)\n      graph.model.edge = edgeModel;\n\n    return graph;\n  }\n\n\n  /**\n   * Public API\n   * -----------\n   *\n   * User-accessible functions.\n   */\n\n  // Fetching GEXF with XHR\n  function fetch(gexf_url, callback) {\n    var xhr = (function() {\n      if (window.XMLHttpRequest)\n        return new XMLHttpRequest();\n\n      var names,\n          i;\n\n      if (window.ActiveXObject) {\n        names = [\n          'Msxml2.XMLHTTP.6.0',\n          'Msxml2.XMLHTTP.3.0',\n          'Msxml2.XMLHTTP',\n          'Microsoft.XMLHTTP'\n        ];\n\n        for (i in names)\n          try {\n            return new ActiveXObject(names[i]);\n          } catch (e) {}\n      }\n\n      return null;\n    })();\n\n    if (!xhr)\n      throw 'XMLHttpRequest not supported, cannot load the file.';\n\n    // Async?\n    var async = (typeof callback === 'function'),\n        getResult;\n\n    // If we can't override MIME type, we are on IE 9\n    // We'll be parsing the response string then.\n    if (xhr.overrideMimeType) {\n      xhr.overrideMimeType('text/xml');\n      getResult = function(r) {\n        return r.responseXML;\n      };\n    }\n    else {\n      getResult = function(r) {\n        var p = new DOMParser();\n        return p.parseFromString(r.responseText, 'application/xml');\n      };\n    }\n\n    xhr.open('GET', gexf_url, async);\n\n    if (async)\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4)\n          callback(getResult(xhr));\n      };\n\n    xhr.send();\n\n    return (async) ? xhr : getResult(xhr);\n  }\n\n  // Parsing the GEXF File\n  function parse(gexf) {\n    return Graph(gexf);\n  }\n\n  // Fetch and parse the GEXF File\n  function fetchAndParse(gexf_url, callback) {\n    if (typeof callback === 'function') {\n      return fetch(gexf_url, function(gexf) {\n        callback(Graph(gexf));\n      });\n    } else\n      return Graph(fetch(gexf_url));\n  }\n\n\n  /**\n   * Exporting\n   * ----------\n   */\n  if (typeof this.gexf !== 'undefined')\n    throw 'gexf: error - a variable called \"gexf\" already ' +\n          'exists in the global scope';\n\n  this.gexf = {\n\n    // Functions\n    parse: parse,\n    fetch: fetchAndParse,\n\n    // Version\n    version: '0.1.1'\n  };\n\n  if (typeof exports !== 'undefined' && this.exports !== exports)\n    module.exports = this.gexf;\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 20:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.parsers');\n\n  // Just a basic ID generator:\n  var _id = 0;\n  function edgeId() {\n    return 'e' + (_id++);\n  }\n\n  /**\n   * If the first arguments is a valid URL, this function loads a GEXF file and\n   * creates a new sigma instance or updates the graph of a given instance. It\n   * is possible to give a callback that will be executed at the end of the\n   * process. And if the first argument is a DOM element, it will skip the\n   * loading step and parse the given XML tree to fill the graph.\n   *\n   * @param  {string|DOMElement} target   The URL of the GEXF file or a valid\n   *                                      GEXF tree.\n   * @param  {object|sigma}      sig      A sigma configuration object or a\n   *                                      sigma instance.\n   * @param  {?function}         callback Eventually a callback to execute\n   *                                      after having parsed the file. It will\n   *                                      be called with the related sigma\n   *                                      instance as parameter.\n   */\n  sigma.parsers.gexf = function(target, sig, callback) {\n    var i,\n        l,\n        arr,\n        obj;\n\n    function parse(graph) {\n      // Adapt the graph:\n      arr = graph.nodes;\n      for (i = 0, l = arr.length; i < l; i++) {\n        obj = arr[i];\n\n        obj.id = obj.id;\n        if (obj.viz && typeof obj.viz === 'object') {\n          if (obj.viz.position && typeof obj.viz.position === 'object') {\n            obj.x = obj.viz.position.x;\n            obj.y = -obj.viz.position.y; // Needed otherwise it's up side down\n          }\n          obj.size = obj.viz.size;\n          obj.color = obj.viz.color;\n        }\n      }\n\n      arr = graph.edges;\n      for (i = 0, l = arr.length; i < l; i++) {\n        obj = arr[i];\n\n        obj.id = typeof obj.id === 'string' ? obj.id : edgeId();\n        obj.source = '' + obj.source;\n        obj.target = '' + obj.target;\n\n        if (obj.viz && typeof obj.viz === 'object') {\n          obj.color = obj.viz.color;\n          obj.size = obj.viz.thickness;\n        }\n\n        // Weight over viz.thickness?\n        obj.size = obj.weight;\n\n        // Changing type to be direction so it won't mess with sigma's naming\n        obj.direction = obj.type;\n        delete obj.type;\n      }\n\n      // Update the instance's graph:\n      if (sig instanceof sigma) {\n        sig.graph.clear();\n\n        arr = graph.nodes;\n        for (i = 0, l = arr.length; i < l; i++)\n          sig.graph.addNode(arr[i]);\n\n        arr = graph.edges;\n        for (i = 0, l = arr.length; i < l; i++)\n          sig.graph.addEdge(arr[i]);\n\n      // ...or instantiate sigma if needed:\n      } else if (typeof sig === 'object') {\n        sig.graph = graph;\n        sig = new sigma(sig);\n\n      // ...or it's finally the callback:\n      } else if (typeof sig === 'function') {\n        callback = sig;\n        sig = null;\n      }\n\n      // Call the callback if specified:\n      if (callback) {\n        callback(sig || graph);\n        return;\n      } else\n        return graph;\n    }\n\n    if (typeof target === 'string')\n      gexf.fetch(target, parse);\n    else if (typeof target === 'object')\n      return parse(gexf.parse(target));\n  };\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/parsers.gexf.js\n// module id = 24\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 121);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 121:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/**\n * This plugin provides a method to animate a sigma instance by interpolating\n * some node properties. Check the sigma.plugins.animate function doc or the\n * examples/animate.html code sample to know more.\n */\n(function() {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  sigma.utils.pkg('sigma.plugins');\n\n  var _id = 0,\n      _cache = {};\n\n  // TOOLING FUNCTIONS:\n  // ******************\n  function parseColor(val) {\n    if (_cache[val])\n      return _cache[val];\n\n    var result = [0, 0, 0];\n\n    if (val.match(/^#/)) {\n      val = (val || '').replace(/^#/, '');\n      result = (val.length === 3) ?\n        [\n          parseInt(val.charAt(0) + val.charAt(0), 16),\n          parseInt(val.charAt(1) + val.charAt(1), 16),\n          parseInt(val.charAt(2) + val.charAt(2), 16)\n        ] :\n        [\n          parseInt(val.charAt(0) + val.charAt(1), 16),\n          parseInt(val.charAt(2) + val.charAt(3), 16),\n          parseInt(val.charAt(4) + val.charAt(5), 16)\n        ];\n    } else if (val.match(/^ *rgba? *\\(/)) {\n      val = val.match(\n        /^ *rgba? *\\( *([0-9]*) *, *([0-9]*) *, *([0-9]*) *(,.*)?\\) *$/\n      );\n      result = [\n        +val[1],\n        +val[2],\n        +val[3]\n      ];\n    }\n\n    _cache[val] = {\n      r: result[0],\n      g: result[1],\n      b: result[2]\n    };\n\n    return _cache[val];\n  }\n\n  function interpolateColors(c1, c2, p) {\n    c1 = parseColor(c1);\n    c2 = parseColor(c2);\n\n    var c = {\n      r: c1.r * (1 - p) + c2.r * p,\n      g: c1.g * (1 - p) + c2.g * p,\n      b: c1.b * (1 - p) + c2.b * p\n    };\n\n    return 'rgb(' + [c.r | 0, c.g | 0, c.b | 0].join(',') + ')';\n  }\n\n  /**\n   * This function will animate some specified node properties. It will\n   * basically call requestAnimationFrame, interpolate the values and call the\n   * refresh method during a specified duration.\n   *\n   * Recognized parameters:\n   * **********************\n   * Here is the exhaustive list of every accepted parameters in the settings\n   * object:\n   *\n   *   {?array}             nodes      An array of node objects or node ids. If\n   *                                   not specified, all nodes of the graph\n   *                                   will be animated.\n   *   {?(function|string)} easing     Either the name of an easing in the\n   *                                   sigma.utils.easings package or a\n   *                                   function. If not specified, the\n   *                                   quadraticInOut easing from this package\n   *                                   will be used instead.\n   *   {?number}            duration   The duration of the animation. If not\n   *                                   specified, the \"animationsTime\" setting\n   *                                   value of the sigma instance will be used\n   *                                   instead.\n   *   {?function}          onComplete Eventually a function to call when the\n   *                                   animation is ended.\n   *\n   * @param  {sigma}   s       The related sigma instance.\n   * @param  {object}  animate An hash with the keys being the node properties\n   *                           to interpolate, and the values being the related\n   *                           target values.\n   * @param  {?object} options Eventually an object with options.\n   */\n  sigma.plugins.animate = function(s, animate, options) {\n    var o = options || {},\n        id = ++_id,\n        duration = o.duration || s.settings('animationsTime'),\n        easing = typeof o.easing === 'string' ?\n          sigma.utils.easings[o.easing] :\n          typeof o.easing === 'function' ?\n          o.easing :\n          sigma.utils.easings.quadraticInOut,\n        start = sigma.utils.dateNow(),\n        nodes,\n        startPositions;\n\n    if (o.nodes && o.nodes.length) {\n      if (typeof o.nodes[0] === 'object')\n        nodes = o.nodes;\n      else\n        nodes = s.graph.nodes(o.nodes); // argument is an array of IDs\n    }\n    else\n      nodes = s.graph.nodes();\n\n    // Store initial positions:\n    startPositions = nodes.reduce(function(res, node) {\n      var k;\n      res[node.id] = {};\n      for (k in animate)\n        if (k in node)\n          res[node.id][k] = node[k];\n      return res;\n    }, {});\n\n    s.animations = s.animations || Object.create({});\n    sigma.plugins.kill(s);\n\n    // Do not refresh edgequadtree during drag:\n    var k,\n        c;\n    for (k in s.cameras) {\n      c = s.cameras[k];\n      c.edgequadtree._enabled = false;\n    }\n\n    function step() {\n      var p = (sigma.utils.dateNow() - start) / duration;\n\n      if (p >= 1) {\n        nodes.forEach(function(node) {\n          for (var k in animate)\n            if (k in animate)\n              node[k] = node[animate[k]];\n        });\n\n        // Allow to refresh edgequadtree:\n        var k,\n            c;\n        for (k in s.cameras) {\n          c = s.cameras[k];\n          c.edgequadtree._enabled = true;\n        }\n\n        s.refresh();\n        if (typeof o.onComplete === 'function')\n          o.onComplete();\n      } else {\n        p = easing(p);\n        nodes.forEach(function(node) {\n          for (var k in animate)\n            if (k in animate) {\n              if (k.match(/color$/))\n                node[k] = interpolateColors(\n                  startPositions[node.id][k],\n                  node[animate[k]],\n                  p\n                );\n              else\n                node[k] =\n                  node[animate[k]] * p +\n                  startPositions[node.id][k] * (1 - p);\n            }\n        });\n\n        s.refresh();\n        s.animations[id] = requestAnimationFrame(step);\n      }\n    }\n\n    step();\n  };\n\n  sigma.plugins.kill = function(s) {\n    for (var k in (s.animations || {}))\n      cancelAnimationFrame(s.animations[k]);\n\n    // Allow to refresh edgequadtree:\n    var k,\n        c;\n    for (k in s.cameras) {\n      c = s.cameras[k];\n      c.edgequadtree._enabled = true;\n    }\n  };\n}).call(window);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/plugins.animate.js\n// module id = 25\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 122);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 122:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize package:\n  sigma.utils.pkg('sigma.plugins');\n\n  // Add custom graph methods:\n  /**\n   * This methods returns an array of nodes that are adjacent to a node.\n   *\n   * @param  {string} id The node id.\n   * @return {array}     The array of adjacent nodes.\n   */\n  if (!sigma.classes.graph.hasMethod('adjacentNodes'))\n    sigma.classes.graph.addMethod('adjacentNodes', function(id) {\n      if (typeof id !== 'string')\n        throw 'adjacentNodes: the node id must be a string.';\n\n      var target,\n          nodes = [];\n      for(target in this.allNeighborsIndex[id]) {\n        nodes.push(this.nodesIndex[target]);\n      }\n      return nodes;\n    });\n\n  /**\n   * This methods returns an array of edges that are adjacent to a node.\n   *\n   * @param  {string} id The node id.\n   * @return {array}     The array of adjacent edges.\n   */\n  if (!sigma.classes.graph.hasMethod('adjacentEdges'))\n    sigma.classes.graph.addMethod('adjacentEdges', function(id) {\n      if (typeof id !== 'string')\n        throw 'adjacentEdges: the node id must be a string.';\n\n      var a = this.allNeighborsIndex[id],\n          eid,\n          target,\n          edges = [];\n      for(target in a) {\n        for(eid in a[target]) {\n          edges.push(a[target][eid]);\n        }\n      }\n      return edges;\n    });\n\n  /**\n   * Sigma Filter\n   * =============================\n   *\n   * @author Sébastien Heymann <seb@linkurio.us> (Linkurious)\n   * @version 0.1\n   */\n\n   var _g = undefined,\n       _s = undefined,\n       _chain = [], // chain of wrapped filters\n       _keysIndex = Object.create(null),\n       Processors = {};   // available predicate processors\n\n\n  /**\n   * Library of processors\n   * ------------------\n   */\n\n   /**\n    *\n    * @param  {function} fn The predicate.\n    */\n  Processors.nodes = function nodes(fn) {\n    var n = _g.nodes(),\n        ln = n.length,\n        e = _g.edges(),\n        le = e.length;\n\n    // hide node, or keep former value\n    while(ln--)\n      n[ln].hidden = !fn.call(_g, n[ln]) || n[ln].hidden;\n\n    while(le--)\n      if (_g.nodes(e[le].source).hidden || _g.nodes(e[le].target).hidden)\n        e[le].hidden = true;\n  };\n\n   /**\n    *\n    * @param  {function} fn The predicate.\n    */\n  Processors.edges = function edges(fn) {\n    var e = _g.edges(),\n        le = e.length;\n\n    // hide edge, or keep former value\n    while(le--)\n      e[le].hidden = !fn.call(_g, e[le]) || e[le].hidden;\n  };\n\n   /**\n    *\n    * @param  {string} id The center node.\n    */\n  Processors.neighbors = function neighbors(id) {\n    var n = _g.nodes(),\n        ln = n.length,\n        e = _g.edges(),\n        le = e.length,\n        neighbors = _g.adjacentNodes(id),\n        nn = neighbors.length,\n        no = {};\n\n    while(nn--)\n      no[neighbors[nn].id] = true;\n\n    while(ln--)\n      if (n[ln].id !== id && !(n[ln].id in no))\n        n[ln].hidden = true;\n\n    while(le--)\n      if (_g.nodes(e[le].source).hidden || _g.nodes(e[le].target).hidden)\n        e[le].hidden = true;\n  };\n\n\n  /**\n   * This function adds a filter to the chain of filters.\n   *\n   * @param  {function} fn  The filter (i.e. predicate processor).\n   * @param  {function} p   The predicate.\n   * @param  {?string}  key The key to identify the filter.\n   */\n  function register(fn, p, key) {\n    if (key != undefined && typeof key !== 'string')\n      throw 'The filter key \"'+ key.toString() +'\" must be a string.';\n\n    if (key != undefined && !key.length)\n      throw 'The filter key must be a non-empty string.';\n\n    if (typeof fn !== 'function')\n      throw 'The predicate of key \"'+ key +'\" must be a function.';\n\n    if ('undo' === key)\n      throw '\"undo\" is a reserved key.';\n\n    if (_keysIndex[key])\n      throw 'The filter \"' + key + '\" already exists.';\n\n    if (key)\n      _keysIndex[key] = true;\n\n    _chain.push({\n      'key': key,\n      'processor': fn,\n      'predicate': p\n    });\n  };\n\n  /**\n   * This function removes a set of filters from the chain.\n   *\n   * @param {object} o The filter keys.\n   */\n  function unregister (o) {\n    _chain = _chain.filter(function(a) {\n      return !(a.key in o);\n    });\n\n    for(var key in o)\n      delete _keysIndex[key];\n  };\n\n\n\n\n  /**\n   * Filter Object\n   * ------------------\n   * @param  {sigma} s The related sigma instance.\n   */\n  function Filter(s) {\n    _s = s;\n    _g = s.graph;\n  };\n\n\n  /**\n   * This method is used to filter the nodes. The method must be called with\n   * the predicate, which is a function that takes a node as argument and\n   * returns a boolean. It may take an identifier as argument to undo the\n   * filter later. The method wraps the predicate into an anonymous function\n   * that looks through each node in the graph. When executed, the anonymous\n   * function hides the nodes that fail a truth test (predicate). The method\n   * adds the anonymous function to the chain of filters. The filter is not\n   * executed until the apply() method is called.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.nodesBy(function(n) {\n   * >   return this.degree(n.id) > 0;\n   * > }, 'degreeNotNull');\n   *\n   * @param  {function}             fn  The filter predicate.\n   * @param  {?string}              key The key to identify the filter.\n   * @return {sigma.plugins.filter}     Returns the instance.\n   */\n  Filter.prototype.nodesBy = function(fn, key) {\n    // Wrap the predicate to be applied on the graph and add it to the chain.\n    register(Processors.nodes, fn, key);\n\n    return this;\n  };\n\n  /**\n   * This method is used to filter the edges. The method must be called with\n   * the predicate, which is a function that takes a node as argument and\n   * returns a boolean. It may take an identifier as argument to undo the\n   * filter later. The method wraps the predicate into an anonymous function\n   * that looks through each edge in the graph. When executed, the anonymous\n   * function hides the edges that fail a truth test (predicate). The method\n   * adds the anonymous function to the chain of filters. The filter is not\n   * executed until the apply() method is called.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.edgesBy(function(e) {\n   * >   return e.size > 1;\n   * > }, 'edgeSize');\n   *\n   * @param  {function}             fn  The filter predicate.\n   * @param  {?string}              key The key to identify the filter.\n   * @return {sigma.plugins.filter}     Returns the instance.\n   */\n  Filter.prototype.edgesBy = function(fn, key) {\n    // Wrap the predicate to be applied on the graph and add it to the chain.\n    register(Processors.edges, fn, key);\n\n    return this;\n  };\n\n  /**\n   * This method is used to filter the nodes which are not direct connections\n   * of a given node. The method must be called with the node identifier. It\n   * may take an identifier as argument to undo the filter later. The filter\n   * is not executed until the apply() method is called.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.neighborsOf('n0');\n   *\n   * @param  {string}               id  The node id.\n   * @param  {?string}              key The key to identify the filter.\n   * @return {sigma.plugins.filter}     Returns the instance.\n   */\n  Filter.prototype.neighborsOf = function(id, key) {\n    if (typeof id !== 'string')\n      throw 'The node id \"'+ id.toString() +'\" must be a string.';\n    if (!id.length)\n      throw 'The node id must be a non-empty string.';\n\n    // Wrap the predicate to be applied on the graph and add it to the chain.\n    register(Processors.neighbors, id, key);\n\n    return this;\n  };\n\n  /**\n   * This method is used to execute the chain of filters and to refresh the\n   * display.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter\n   * >   .nodesBy(function(n) {\n   * >     return this.degree(n.id) > 0;\n   * >   }, 'degreeNotNull')\n   * >   .apply();\n   *\n   * @return {sigma.plugins.filter}      Returns the instance.\n   */\n  Filter.prototype.apply = function() {\n    for (var i = 0, len = _chain.length; i < len; ++i) {\n      _chain[i].processor(_chain[i].predicate);\n    };\n\n    if (_chain[0] && 'undo' === _chain[0].key) {\n      _chain.shift();\n    }\n\n    _s.refresh();\n\n    return this;\n  };\n\n  /**\n   * This method undoes one or several filters, depending on how it is called.\n   *\n   * To undo all filters, call \"undo\" without argument. To undo a specific\n   * filter, call it with the key of the filter. To undo multiple filters, call\n   * it with an array of keys or multiple arguments, and it will undo each\n   * filter, in the same order. The undo is not executed until the apply()\n   * method is called. For instance:\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter\n   * >   .nodesBy(function(n) {\n   * >     return this.degree(n.id) > 0;\n   * >   }, 'degreeNotNull');\n   * >   .edgesBy(function(e) {\n   * >     return e.size > 1;\n   * >   }, 'edgeSize')\n   * >   .undo();\n   *\n   * Other examples:\n   * > filter.undo();\n   * > filter.undo('myfilter');\n   * > filter.undo(['myfilter1', 'myfilter2']);\n   * > filter.undo('myfilter1', 'myfilter2');\n   *\n   * @param  {?(string|array|*string))} v Eventually one key, an array of keys.\n   * @return {sigma.plugins.filter}       Returns the instance.\n   */\n  Filter.prototype.undo = function(v) {\n    var q = Object.create(null),\n        la = arguments.length;\n\n    // find removable filters\n    if (la === 1) {\n      if (Object.prototype.toString.call(v) === '[object Array]')\n        for (var i = 0, len = v.length; i < len; i++)\n          q[v[i]] = true;\n\n      else // 1 filter key\n        q[v] = true;\n\n    } else if (la > 1) {\n      for (var i = 0; i < la; i++)\n        q[arguments[i]] = true;\n    }\n    else\n      this.clear();\n\n    unregister(q);\n\n    function processor() {\n      var n = _g.nodes(),\n          ln = n.length,\n          e = _g.edges(),\n          le = e.length;\n\n      while(ln--)\n        n[ln].hidden = false;\n\n      while(le--)\n        e[le].hidden = false;\n    };\n\n    _chain.unshift({\n      'key': 'undo',\n      'processor': processor\n    });\n\n    return this;\n  };\n\n  // fast deep copy function\n  function deepCopy(o) {\n    var copy = Object.create(null);\n    for (var i in o) {\n      if (typeof o[i] === \"object\" && o[i] !== null) {\n        copy[i] = deepCopy(o[i]);\n      }\n      else if (typeof o[i] === \"function\" && o[i] !== null) {\n        // clone function:\n        eval(\" copy[i] = \" +  o[i].toString());\n        //copy[i] = o[i].bind(_g);\n      }\n\n      else\n        copy[i] = o[i];\n    }\n    return copy;\n  };\n\n  function cloneChain(chain) {\n    // Clone the array of filters:\n    var copy = chain.slice(0);\n    for (var i = 0, len = copy.length; i < len; i++) {\n      copy[i] = deepCopy(copy[i]);\n      if (typeof copy[i].processor === \"function\")\n        copy[i].processor = 'filter.processors.' + copy[i].processor.name;\n    };\n    return copy;\n  }\n\n  /**\n   * This method is used to empty the chain of filters.\n   * Prefer the undo() method to reset filters.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > filter.clear();\n   *\n   * @return {sigma.plugins.filter} Returns the instance.\n   */\n  Filter.prototype.clear = function() {\n    _chain.length = 0; // clear the array\n    _keysIndex = Object.create(null);\n    return this;\n  };\n\n  /**\n   * This method clones the filter chain and return the copy.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > var chain = filter.export();\n   *\n   * @return {object}   The cloned chain of filters.\n   */\n  Filter.prototype.export = function() {\n    var c = cloneChain(_chain);\n    return c;\n  };\n\n  /**\n   * This method sets the chain of filters with the specified chain.\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   * > var chain = [\n   * >   {\n   * >     key: 'my-filter',\n   * >     predicate: function(n) {...},\n   * >     processor: 'filter.processors.nodes'\n   * >   }, ...\n   * > ];\n   * > filter.import(chain);\n   *\n   * @param {array} chain The chain of filters.\n   * @return {sigma.plugins.filter} Returns the instance.\n   */\n  Filter.prototype.import = function(chain) {\n    if (chain === undefined)\n      throw 'Wrong arguments.';\n\n    if (Object.prototype.toString.call(chain) !== '[object Array]')\n      throw 'The chain\" must be an array.';\n\n    var copy = cloneChain(chain);\n\n    for (var i = 0, len = copy.length; i < len; i++) {\n      if (copy[i].predicate === undefined || copy[i].processor === undefined)\n        throw 'Wrong arguments.';\n\n      if (copy[i].key != undefined && typeof copy[i].key !== 'string')\n        throw 'The filter key \"'+ copy[i].key.toString() +'\" must be a string.';\n\n      if (typeof copy[i].predicate !== 'function')\n        throw 'The predicate of key \"'+ copy[i].key +'\" must be a function.';\n\n      if (typeof copy[i].processor !== 'string')\n        throw 'The processor of key \"'+ copy[i].key +'\" must be a string.';\n\n      // Replace the processor name by the corresponding function:\n      switch(copy[i].processor) {\n        case 'filter.processors.nodes':\n          copy[i].processor = Processors.nodes;\n          break;\n        case 'filter.processors.edges':\n          copy[i].processor = Processors.edges;\n          break;\n        case 'filter.processors.neighbors':\n          copy[i].processor = Processors.neighbors;\n          break;\n        default:\n          throw 'Unknown processor ' + copy[i].processor;\n      }\n    };\n\n    _chain = copy;\n\n    return this;\n  };\n\n\n  /**\n   * Interface\n   * ------------------\n   *\n   * > var filter = new sigma.plugins.filter(s);\n   */\n  var filter = null;\n\n  /**\n   * @param  {sigma} s The related sigma instance.\n   */\n  sigma.plugins.filter = function(s) {\n    // Create new filter to update the graph params. Be aware, filter is a singleton,\n    // therefore filter instance can work on one sigma instance at a time.\n    filter = new Filter(s);\n    return filter;\n  };\n\n}).call(this);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/plugins.filter.js\n// module id = 26\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 124);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 124:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n(function() {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  sigma.utils.pkg('sigma.plugins');\n\n  var _id = 0,\n      _cache = {};\n\n  /**\n   * This function will change size for all nodes depending to their degree\n   *\n   * @param  {sigma}   s       \t\tThe related sigma instance.\n   * @param  {object}  initialSize \tStart size property\n   */\n  sigma.plugins.relativeSize = function(s, initialSize) {\n    var nodes = s.graph.nodes();\n\n    // second create size for every node\n    for(var i = 0; i < nodes.length; i++) {\n      var degree = s.graph.degree(nodes[i].id);\n      nodes[i].size = initialSize * Math.sqrt(degree);\n    }\n    s.refresh();\n  };\n}).call(window);\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/plugins.relativeSize.js\n// module id = 27\n// module chunks = 0","var Sigma =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 117);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 117:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sigma_react_src_renderers_sigma_renderers_webgl_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sigma_react_src_renderers_sigma_renderers_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sigma_react_src_renderers_webgl_sigma_webgl_nodes_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_sigma_react_src_renderers_webgl_sigma_webgl_nodes_fast_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sigma_react_src_renderers_webgl_sigma_webgl_edges_def_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sigma_react_src_renderers_webgl_sigma_webgl_edges_fast_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_sigma_react_src_renderers_webgl_sigma_webgl_edges_arrow_js__);\n\n\n\n\n\n\n\n\n/***/ },\n\n/***/ 62:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(global) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.renderers');\n\n  // Check if WebGL is enabled:\n  var canvas,\n      webgl = !!global.WebGLRenderingContext;\n  if (webgl) {\n    canvas = document.createElement('canvas');\n    try {\n      webgl = !!(\n        canvas.getContext('webgl') ||\n        canvas.getContext('experimental-webgl')\n      );\n    } catch (e) {\n      webgl = false;\n    }\n  }\n\n  // Copy the good renderer:\n  sigma.renderers.def = webgl ?\n    sigma.renderers.webgl :\n    sigma.renderers.canvas;\n})(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 63:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function(undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined')\n    throw 'sigma is not declared';\n\n  // Initialize packages:\n  sigma.utils.pkg('sigma.renderers');\n\n  /**\n   * This function is the constructor of the canvas sigma's renderer.\n   *\n   * @param  {sigma.classes.graph}            graph    The graph to render.\n   * @param  {sigma.classes.camera}           camera   The camera.\n   * @param  {configurable}           settings The sigma instance settings\n   *                                           function.\n   * @param  {object}                 object   The options object.\n   * @return {sigma.renderers.canvas}          The renderer instance.\n   */\n  sigma.renderers.webgl = function(graph, camera, settings, options) {\n    if (typeof options !== 'object')\n      throw 'sigma.renderers.webgl: Wrong arguments.';\n\n    if (!(options.container instanceof HTMLElement))\n      throw 'Container not found.';\n\n    var k,\n        i,\n        l,\n        a,\n        fn,\n        _self = this;\n\n    sigma.classes.dispatcher.extend(this);\n\n    // Conrad related attributes:\n    this.jobs = {};\n\n    Object.defineProperty(this, 'conradId', {\n      value: sigma.utils.id()\n    });\n\n    // Initialize main attributes:\n    this.graph = graph;\n    this.camera = camera;\n    this.contexts = {};\n    this.domElements = {};\n    this.options = options;\n    this.container = this.options.container;\n    this.settings = (\n        typeof options.settings === 'object' &&\n        options.settings\n      ) ?\n        settings.embedObjects(options.settings) :\n        settings;\n\n    // Find the prefix:\n    this.options.prefix = this.camera.readPrefix;\n\n    // Initialize programs hash\n    Object.defineProperty(this, 'nodePrograms', {\n      value: {}\n    });\n    Object.defineProperty(this, 'edgePrograms', {\n      value: {}\n    });\n    Object.defineProperty(this, 'nodeFloatArrays', {\n      value: {}\n    });\n    Object.defineProperty(this, 'edgeFloatArrays', {\n      value: {}\n    });\n    Object.defineProperty(this, 'edgeIndicesArrays', {\n      value: {}\n    });\n\n    // Initialize the DOM elements:\n    if (this.settings(options, 'batchEdgesDrawing')) {\n      this.initDOM('canvas', 'edges', true);\n      this.initDOM('canvas', 'nodes', true);\n    } else {\n      this.initDOM('canvas', 'scene', true);\n      this.contexts.nodes = this.contexts.scene;\n      this.contexts.edges = this.contexts.scene;\n    }\n\n    this.initDOM('canvas', 'labels');\n    this.initDOM('canvas', 'mouse');\n    this.contexts.hover = this.contexts.mouse;\n\n    // Initialize captors:\n    this.captors = [];\n    a = this.options.captors || [sigma.captors.mouse, sigma.captors.touch];\n    for (i = 0, l = a.length; i < l; i++) {\n      fn = typeof a[i] === 'function' ? a[i] : sigma.captors[a[i]];\n      this.captors.push(\n        new fn(\n          this.domElements.mouse,\n          this.camera,\n          this.settings\n        )\n      );\n    }\n\n    // Deal with sigma events:\n    sigma.misc.bindEvents.call(this, this.camera.prefix);\n    sigma.misc.drawHovers.call(this, this.camera.prefix);\n\n    this.resize();\n  };\n\n\n\n\n  /**\n   * This method will generate the nodes and edges float arrays. This step is\n   * separated from the \"render\" method, because to keep WebGL efficient, since\n   * all the camera and middlewares are modelised as matrices and they do not\n   * require the float arrays to be regenerated.\n   *\n   * Basically, when the user moves the camera or applies some specific linear\n   * transformations, this process step will be skipped, and the \"render\"\n   * method will efficiently refresh the rendering.\n   *\n   * And when the user modifies the graph colors or positions (applying a new\n   * layout or filtering the colors, for instance), this \"process\" step will be\n   * required to regenerate the float arrays.\n   *\n   * @return {sigma.renderers.webgl} Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.process = function() {\n    var a,\n        i,\n        l,\n        k,\n        type,\n        renderer,\n        graph = this.graph,\n        options = sigma.utils.extend(options, this.options),\n        defaultEdgeType = this.settings(options, 'defaultEdgeType'),\n        defaultNodeType = this.settings(options, 'defaultNodeType');\n\n    // Empty float arrays:\n    for (k in this.nodeFloatArrays)\n      delete this.nodeFloatArrays[k];\n\n    for (k in this.edgeFloatArrays)\n      delete this.edgeFloatArrays[k];\n\n    for (k in this.edgeIndicesArrays)\n      delete this.edgeIndicesArrays[k];\n\n    // Sort edges and nodes per types:\n    for (a = graph.edges(), i = 0, l = a.length; i < l; i++) {\n      type = a[i].type || defaultEdgeType;\n      k = (type && sigma.webgl.edges[type]) ? type : 'def';\n\n      if (!this.edgeFloatArrays[k])\n        this.edgeFloatArrays[k] = {\n          edges: []\n        };\n\n      this.edgeFloatArrays[k].edges.push(a[i]);\n    }\n\n    for (a = graph.nodes(), i = 0, l = a.length; i < l; i++) {\n      type = a[i].type || defaultNodeType;\n      k = (type && sigma.webgl.nodes[type]) ? type : 'def';\n\n      if (!this.nodeFloatArrays[k])\n        this.nodeFloatArrays[k] = {\n          nodes: []\n        };\n\n      this.nodeFloatArrays[k].nodes.push(a[i]);\n    }\n\n    // Push edges:\n    for (k in this.edgeFloatArrays) {\n      renderer = sigma.webgl.edges[k];\n      a = this.edgeFloatArrays[k].edges;\n\n      // Creating the necessary arrays\n      this.edgeFloatArrays[k].array = new Float32Array(\n        a.length * renderer.POINTS * renderer.ATTRIBUTES\n      );\n\n      for (i = 0, l = a.length; i < l; i++) {\n\n        // Just check that the edge and both its extremities are visible:\n        if (\n          !a[i].hidden &&\n          !graph.nodes(a[i].source).hidden &&\n          !graph.nodes(a[i].target).hidden\n        )\n          renderer.addEdge(\n            a[i],\n            graph.nodes(a[i].source),\n            graph.nodes(a[i].target),\n            this.edgeFloatArrays[k].array,\n            i * renderer.POINTS * renderer.ATTRIBUTES,\n            options.prefix,\n            this.settings\n          );\n      }\n\n      if (typeof renderer.computeIndices === 'function')\n        this.edgeIndicesArrays[k] = renderer.computeIndices(\n          this.edgeFloatArrays[k].array\n        );\n    }\n\n    // Push nodes:\n    for (k in this.nodeFloatArrays) {\n      renderer = sigma.webgl.nodes[k];\n      a = this.nodeFloatArrays[k].nodes;\n\n      // Creating the necessary arrays\n      this.nodeFloatArrays[k].array = new Float32Array(\n        a.length * renderer.POINTS * renderer.ATTRIBUTES\n      );\n\n      for (i = 0, l = a.length; i < l; i++) {\n        if (!this.nodeFloatArrays[k].array)\n          this.nodeFloatArrays[k].array = new Float32Array(\n            a.length * renderer.POINTS * renderer.ATTRIBUTES\n          );\n\n        // Just check that the edge and both its extremities are visible:\n        if (\n          !a[i].hidden\n        )\n          renderer.addNode(\n            a[i],\n            this.nodeFloatArrays[k].array,\n            i * renderer.POINTS * renderer.ATTRIBUTES,\n            options.prefix,\n            this.settings\n          );\n      }\n    }\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method renders the graph. It basically calls each program (and\n   * generate them if they do not exist yet) to render nodes and edges, batched\n   * per renderer.\n   *\n   * As in the canvas renderer, it is possible to display edges, nodes and / or\n   * labels in batches, to make the whole thing way more scalable.\n   *\n   * @param  {?object}               params Eventually an object of options.\n   * @return {sigma.renderers.webgl}        Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.render = function(params) {\n    var a,\n        i,\n        l,\n        k,\n        o,\n        program,\n        renderer,\n        self = this,\n        graph = this.graph,\n        nodesGl = this.contexts.nodes,\n        edgesGl = this.contexts.edges,\n        matrix = this.camera.getMatrix(),\n        options = sigma.utils.extend(params, this.options),\n        drawLabels = this.settings(options, 'drawLabels'),\n        drawEdges = this.settings(options, 'drawEdges'),\n        drawNodes = this.settings(options, 'drawNodes');\n\n    // Call the resize function:\n    this.resize(false);\n\n    // Check the 'hideEdgesOnMove' setting:\n    if (this.settings(options, 'hideEdgesOnMove'))\n      if (this.camera.isAnimated || this.camera.isMoving)\n        drawEdges = false;\n\n    // Clear canvases:\n    this.clear();\n\n    // Translate matrix to [width/2, height/2]:\n    matrix = sigma.utils.matrices.multiply(\n      matrix,\n      sigma.utils.matrices.translation(this.width / 2, this.height / 2)\n    );\n\n    // Kill running jobs:\n    for (k in this.jobs)\n      if (conrad.hasJob(k))\n        conrad.killJob(k);\n\n    if (drawEdges) {\n      if (this.settings(options, 'batchEdgesDrawing'))\n        (function() {\n          var a,\n              k,\n              i,\n              id,\n              job,\n              arr,\n              end,\n              start,\n              indices,\n              renderer,\n              batchSize,\n              currentProgram;\n\n          id = 'edges_' + this.conradId;\n          batchSize = this.settings(options, 'webglEdgesBatchSize');\n          a = Object.keys(this.edgeFloatArrays);\n\n          if (!a.length)\n            return;\n          i = 0;\n          renderer = sigma.webgl.edges[a[i]];\n          arr = this.edgeFloatArrays[a[i]].array;\n          indices = this.edgeIndicesArrays[a[i]];\n          start = 0;\n          end = Math.min(\n            start + batchSize * renderer.POINTS,\n            arr.length / renderer.ATTRIBUTES\n          );\n\n          job = function() {\n            // Check program:\n            if (!this.edgePrograms[a[i]])\n              this.edgePrograms[a[i]] = renderer.initProgram(edgesGl);\n\n            if (start < end) {\n              edgesGl.useProgram(this.edgePrograms[a[i]]);\n              renderer.render(\n                edgesGl,\n                this.edgePrograms[a[i]],\n                arr,\n                {\n                  settings: this.settings,\n                  matrix: matrix,\n                  width: this.width,\n                  height: this.height,\n                  ratio: this.camera.ratio,\n                  scalingRatio: this.settings(\n                    options,\n                    'webglOversamplingRatio'\n                  ),\n                  start: start,\n                  count: end - start,\n                  indicesData: indices\n                }\n              );\n            }\n\n            // Catch job's end:\n            if (\n              end >= arr.length / renderer.ATTRIBUTES &&\n              i === a.length - 1\n            ) {\n              delete this.jobs[id];\n              return false;\n            }\n\n            if (end >= arr.length / renderer.ATTRIBUTES) {\n              i++;\n              arr = this.edgeFloatArrays[a[i]].array;\n              renderer = sigma.webgl.edges[a[i]];\n              start = 0;\n              end = Math.min(\n                start + batchSize * renderer.POINTS,\n                arr.length / renderer.ATTRIBUTES\n              );\n            } else {\n              start = end;\n              end = Math.min(\n                start + batchSize * renderer.POINTS,\n                arr.length / renderer.ATTRIBUTES\n              );\n            }\n\n            return true;\n          };\n\n          this.jobs[id] = job;\n          conrad.addJob(id, job.bind(this));\n        }).call(this);\n      else {\n        for (k in this.edgeFloatArrays) {\n          renderer = sigma.webgl.edges[k];\n\n          // Check program:\n          if (!this.edgePrograms[k])\n            this.edgePrograms[k] = renderer.initProgram(edgesGl);\n\n          // Render\n          if (this.edgeFloatArrays[k]) {\n            edgesGl.useProgram(this.edgePrograms[k]);\n            renderer.render(\n              edgesGl,\n              this.edgePrograms[k],\n              this.edgeFloatArrays[k].array,\n              {\n                settings: this.settings,\n                matrix: matrix,\n                width: this.width,\n                height: this.height,\n                ratio: this.camera.ratio,\n                scalingRatio: this.settings(options, 'webglOversamplingRatio'),\n                indicesData: this.edgeIndicesArrays[k]\n              }\n            );\n          }\n        }\n      }\n    }\n\n    if (drawNodes) {\n      // Enable blending:\n      nodesGl.blendFunc(nodesGl.SRC_ALPHA, nodesGl.ONE_MINUS_SRC_ALPHA);\n      nodesGl.enable(nodesGl.BLEND);\n\n      for (k in this.nodeFloatArrays) {\n        renderer = sigma.webgl.nodes[k];\n\n        // Check program:\n        if (!this.nodePrograms[k])\n          this.nodePrograms[k] = renderer.initProgram(nodesGl);\n\n        // Render\n        if (this.nodeFloatArrays[k]) {\n          nodesGl.useProgram(this.nodePrograms[k]);\n          renderer.render(\n            nodesGl,\n            this.nodePrograms[k],\n            this.nodeFloatArrays[k].array,\n            {\n              settings: this.settings,\n              matrix: matrix,\n              width: this.width,\n              height: this.height,\n              ratio: this.camera.ratio,\n              scalingRatio: this.settings(options, 'webglOversamplingRatio')\n            }\n          );\n        }\n      }\n    }\n\n    if (drawLabels) {\n      a = this.camera.quadtree.area(\n        this.camera.getRectangle(this.width, this.height)\n      );\n\n      // Apply camera view to these nodes:\n      this.camera.applyView(\n        undefined,\n        undefined,\n        {\n          nodes: a,\n          edges: [],\n          width: this.width,\n          height: this.height\n        }\n      );\n\n      o = function(key) {\n        return self.settings({\n          prefix: self.camera.prefix\n        }, key);\n      };\n\n      for (i = 0, l = a.length; i < l; i++)\n        if (!a[i].hidden)\n          (\n            sigma.canvas.labels[\n              a[i].type ||\n              this.settings(options, 'defaultNodeType')\n            ] || sigma.canvas.labels.def\n          )(a[i], this.contexts.labels, o);\n    }\n\n    this.dispatchEvent('render');\n\n    return this;\n  };\n\n\n\n\n  /**\n   * This method creates a DOM element of the specified type, switches its\n   * position to \"absolute\", references it to the domElements attribute, and\n   * finally appends it to the container.\n   *\n   * @param  {string}   tag   The label tag.\n   * @param  {string}   id    The id of the element (to store it in\n   *                          \"domElements\").\n   * @param  {?boolean} webgl Will init the WebGL context if true.\n   */\n  sigma.renderers.webgl.prototype.initDOM = function(tag, id, webgl) {\n    var gl,\n        dom = document.createElement(tag),\n        self = this;\n\n    dom.style.position = 'absolute';\n    dom.setAttribute('class', 'sigma-' + id);\n\n    this.domElements[id] = dom;\n    this.container.appendChild(dom);\n\n    if (tag.toLowerCase() === 'canvas') {\n      this.contexts[id] = dom.getContext(webgl ? 'experimental-webgl' : '2d', {\n        preserveDrawingBuffer: true\n      });\n\n      // Adding webgl context loss listeners\n      if (webgl) {\n        dom.addEventListener('webglcontextlost', function(e) {\n          e.preventDefault();\n        }, false);\n\n        dom.addEventListener('webglcontextrestored', function(e) {\n          self.render();\n        }, false);\n      }\n    }\n  };\n\n  /**\n   * This method resizes each DOM elements in the container and stores the new\n   * dimensions. Then, it renders the graph.\n   *\n   * @param  {?number}               width  The new width of the container.\n   * @param  {?number}               height The new height of the container.\n   * @return {sigma.renderers.webgl}        Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.resize = function(w, h) {\n    var k,\n        oldWidth = this.width,\n        oldHeight = this.height,\n        pixelRatio = sigma.utils.getPixelRatio();\n\n    if (w !== undefined && h !== undefined) {\n      this.width = w;\n      this.height = h;\n    } else {\n      this.width = this.container.offsetWidth;\n      this.height = this.container.offsetHeight;\n\n      w = this.width;\n      h = this.height;\n    }\n\n    if (oldWidth !== this.width || oldHeight !== this.height) {\n      for (k in this.domElements) {\n        this.domElements[k].style.width = w + 'px';\n        this.domElements[k].style.height = h + 'px';\n\n        if (this.domElements[k].tagName.toLowerCase() === 'canvas') {\n          // If simple 2D canvas:\n          if (this.contexts[k] && this.contexts[k].scale) {\n            this.domElements[k].setAttribute('width', (w * pixelRatio) + 'px');\n            this.domElements[k].setAttribute('height', (h * pixelRatio) + 'px');\n\n            if (pixelRatio !== 1)\n              this.contexts[k].scale(pixelRatio, pixelRatio);\n          } else {\n            this.domElements[k].setAttribute(\n              'width',\n              (w * this.settings('webglOversamplingRatio')) + 'px'\n            );\n            this.domElements[k].setAttribute(\n              'height',\n              (h * this.settings('webglOversamplingRatio')) + 'px'\n            );\n          }\n        }\n      }\n    }\n\n    // Scale:\n    for (k in this.contexts)\n      if (this.contexts[k] && this.contexts[k].viewport)\n        this.contexts[k].viewport(\n          0,\n          0,\n          this.width * this.settings('webglOversamplingRatio'),\n          this.height * this.settings('webglOversamplingRatio')\n        );\n\n    return this;\n  };\n\n  /**\n   * This method clears each canvas.\n   *\n   * @return {sigma.renderers.webgl} Returns the instance itself.\n   */\n  sigma.renderers.webgl.prototype.clear = function() {\n    this.contexts.labels.clearRect(0, 0, this.width, this.height);\n    this.contexts.nodes.clear(this.contexts.nodes.COLOR_BUFFER_BIT);\n    this.contexts.edges.clear(this.contexts.edges.COLOR_BUFFER_BIT);\n\n    return this;\n  };\n\n  /**\n   * This method kills contexts and other attributes.\n   */\n  sigma.renderers.webgl.prototype.kill = function() {\n    var k,\n        captor;\n\n    // Kill captors:\n    while ((captor = this.captors.pop()))\n      captor.kill();\n    delete this.captors;\n\n    // Kill contexts:\n    for (k in this.domElements) {\n      this.domElements[k].parentNode.removeChild(this.domElements[k]);\n      delete this.domElements[k];\n      delete this.contexts[k];\n    }\n    delete this.domElements;\n    delete this.contexts;\n  };\n\n\n\n\n  /**\n   * The object \"sigma.webgl.nodes\" contains the different WebGL node\n   * renderers. The default one draw nodes as discs. Here are the attributes\n   * any node renderer must have:\n   *\n   * {number}   POINTS      The number of points required to draw a node.\n   * {number}   ATTRIBUTES  The number of attributes needed to draw one point.\n   * {function} addNode     A function that adds a node to the data stack that\n   *                        will be given to the buffer. Here is the arguments:\n   *                        > {object}       node\n   *                        > {number}       index   The node index in the\n   *                                                 nodes array.\n   *                        > {Float32Array} data    The stack.\n   *                        > {object}       options Some options.\n   * {function} render      The function that will effectively render the nodes\n   *                        into the buffer.\n   *                        > {WebGLRenderingContext} gl\n   *                        > {WebGLProgram}          program\n   *                        > {Float32Array} data    The stack to give to the\n   *                                                 buffer.\n   *                        > {object}       params  An object containing some\n   *                                                 options, like width,\n   *                                                 height, the camera ratio.\n   * {function} initProgram The function that will initiate the program, with\n   *                        the relevant shaders and parameters. It must return\n   *                        the newly created program.\n   *\n   * Check sigma.webgl.nodes.def or sigma.webgl.nodes.fast to see how it\n   * works more precisely.\n   */\n  sigma.utils.pkg('sigma.webgl.nodes');\n\n\n\n\n  /**\n   * The object \"sigma.webgl.edges\" contains the different WebGL edge\n   * renderers. The default one draw edges as direct lines. Here are the\n   * attributes any edge renderer must have:\n   *\n   * {number}   POINTS      The number of points required to draw an edge.\n   * {number}   ATTRIBUTES  The number of attributes needed to draw one point.\n   * {function} addEdge     A function that adds an edge to the data stack that\n   *                        will be given to the buffer. Here is the arguments:\n   *                        > {object}       edge\n   *                        > {object}       source\n   *                        > {object}       target\n   *                        > {Float32Array} data    The stack.\n   *                        > {object}       options Some options.\n   * {function} render      The function that will effectively render the edges\n   *                        into the buffer.\n   *                        > {WebGLRenderingContext} gl\n   *                        > {WebGLProgram}          program\n   *                        > {Float32Array} data    The stack to give to the\n   *                                                 buffer.\n   *                        > {object}       params  An object containing some\n   *                                                 options, like width,\n   *                                                 height, the camera ratio.\n   * {function} initProgram The function that will initiate the program, with\n   *                        the relevant shaders and parameters. It must return\n   *                        the newly created program.\n   *\n   * Check sigma.webgl.edges.def or sigma.webgl.edges.fast to see how it\n   * works more precisely.\n   */\n  sigma.utils.pkg('sigma.webgl.edges');\n\n\n\n\n  /**\n   * The object \"sigma.canvas.labels\" contains the different\n   * label renderers for the WebGL renderer. Since displaying texts in WebGL is\n   * definitely painful and since there a way less labels to display than nodes\n   * or edges, the default renderer simply renders them in a canvas.\n   *\n   * A labels renderer is a simple function, taking as arguments the related\n   * node, the renderer and a settings function.\n   */\n  sigma.utils.pkg('sigma.canvas.labels');\n}).call(this);\n\n}.call(window));\n\n/***/ },\n\n/***/ 64:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.edges');\n\n  /**\n   * This edge renderer will display edges as arrows going from the source node\n   * to the target node. To deal with edge thicknesses, the lines are made of\n   * three triangles: two forming rectangles, with the gl.TRIANGLES drawing\n   * mode.\n   *\n   * It is expensive, since drawing a single edge requires 9 points, each\n   * having a lot of attributes.\n   */\n  sigma.webgl.edges.arrow = {\n    POINTS: 9,\n    ATTRIBUTES: 11,\n    addEdge: function(edge, source, target, data, i, prefix, settings) {\n      var w = (edge[prefix + 'size'] || 1) / 2,\n          x1 = source[prefix + 'x'],\n          y1 = source[prefix + 'y'],\n          x2 = target[prefix + 'x'],\n          y2 = target[prefix + 'y'],\n          targetSize = target[prefix + 'size'],\n          color = edge.color;\n\n      if (!color)\n        switch (settings('edgeColor')) {\n          case 'source':\n            color = source.color || settings('defaultNodeColor');\n            break;\n          case 'target':\n            color = target.color || settings('defaultNodeColor');\n            break;\n          default:\n            color = settings('defaultEdgeColor');\n            break;\n        }\n\n      // Normalize color:\n      color = sigma.utils.floatColor(color);\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      // Arrow head:\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = -1.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = targetSize;\n      data[i++] = 1.0;\n      data[i++] = 0.0;\n      data[i++] = 1.0;\n      data[i++] = 1.0;\n      data[i++] = color;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var positionLocation1 =\n            gl.getAttribLocation(program, 'a_pos1'),\n          positionLocation2 =\n            gl.getAttribLocation(program, 'a_pos2'),\n          thicknessLocation =\n            gl.getAttribLocation(program, 'a_thickness'),\n          targetSizeLocation =\n            gl.getAttribLocation(program, 'a_tSize'),\n          delayLocation =\n            gl.getAttribLocation(program, 'a_delay'),\n          minusLocation =\n            gl.getAttribLocation(program, 'a_minus'),\n          headLocation =\n            gl.getAttribLocation(program, 'a_head'),\n          headPositionLocation =\n            gl.getAttribLocation(program, 'a_headPosition'),\n          colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          matrixHalfPiLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPi'),\n          matrixHalfPiMinusLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPiMinus'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          nodeRatioLocation =\n            gl.getUniformLocation(program, 'u_nodeRatio'),\n          arrowHeadLocation =\n            gl.getUniformLocation(program, 'u_arrowHead'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        params.ratio / Math.pow(params.ratio, params.settings('edgesPowRatio'))\n      );\n      gl.uniform1f(\n        nodeRatioLocation,\n        Math.pow(params.ratio, params.settings('nodesPowRatio')) /\n        params.ratio\n      );\n      gl.uniform1f(arrowHeadLocation, 5.0);\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n      gl.uniformMatrix2fv(\n        matrixHalfPiLocation,\n        false,\n        sigma.utils.matrices.rotation(Math.PI / 2, true)\n      );\n      gl.uniformMatrix2fv(\n        matrixHalfPiMinusLocation,\n        false,\n        sigma.utils.matrices.rotation(-Math.PI / 2, true)\n      );\n\n      gl.enableVertexAttribArray(positionLocation1);\n      gl.enableVertexAttribArray(positionLocation2);\n      gl.enableVertexAttribArray(thicknessLocation);\n      gl.enableVertexAttribArray(targetSizeLocation);\n      gl.enableVertexAttribArray(delayLocation);\n      gl.enableVertexAttribArray(minusLocation);\n      gl.enableVertexAttribArray(headLocation);\n      gl.enableVertexAttribArray(headPositionLocation);\n      gl.enableVertexAttribArray(colorLocation);\n\n      gl.vertexAttribPointer(positionLocation1,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(positionLocation2,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(thicknessLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        16\n      );\n      gl.vertexAttribPointer(targetSizeLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        20\n      );\n      gl.vertexAttribPointer(delayLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        24\n      );\n      gl.vertexAttribPointer(minusLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        28\n      );\n      gl.vertexAttribPointer(headLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        32\n      );\n      gl.vertexAttribPointer(headPositionLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        36\n      );\n      gl.vertexAttribPointer(colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        40\n      );\n\n      gl.drawArrays(\n        gl.TRIANGLES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_pos1;',\n          'attribute vec2 a_pos2;',\n          'attribute float a_thickness;',\n          'attribute float a_tSize;',\n          'attribute float a_delay;',\n          'attribute float a_minus;',\n          'attribute float a_head;',\n          'attribute float a_headPosition;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_nodeRatio;',\n          'uniform float u_arrowHead;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n          'uniform mat2 u_matrixHalfPi;',\n          'uniform mat2 u_matrixHalfPiMinus;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Find the good point:\n            'vec2 pos = normalize(a_pos2 - a_pos1);',\n\n            'mat2 matrix = (1.0 - a_head) *',\n              '(',\n                'a_minus * u_matrixHalfPiMinus +',\n                '(1.0 - a_minus) * u_matrixHalfPi',\n              ') + a_head * (',\n                'a_headPosition * u_matrixHalfPiMinus * 0.6 +',\n                '(a_headPosition * a_headPosition - 1.0) * mat2(1.0)',\n              ');',\n\n            'pos = a_pos1 + (',\n              // Deal with body:\n              '(1.0 - a_head) * a_thickness * u_ratio * matrix * pos +',\n              // Deal with head:\n              'a_head * u_arrowHead * a_thickness * u_ratio * matrix * pos +',\n              // Deal with delay:\n              'a_delay * pos * (',\n                'a_tSize / u_nodeRatio +',\n                'u_arrowHead * a_thickness * u_ratio',\n              ')',\n            ');',\n\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(pos, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'gl_FragColor = color;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 65:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.edges');\n\n  /**\n   * This edge renderer will display edges as lines going from the source node\n   * to the target node. To deal with edge thicknesses, the lines are made of\n   * two triangles forming rectangles, with the gl.TRIANGLES drawing mode.\n   *\n   * It is expensive, since drawing a single edge requires 6 points, each\n   * having 7 attributes (source position, target position, thickness, color\n   * and a flag indicating which vertice of the rectangle it is).\n   */\n  sigma.webgl.edges.def = {\n    POINTS: 6,\n    ATTRIBUTES: 7,\n    addEdge: function(edge, source, target, data, i, prefix, settings) {\n      var w = (edge[prefix + 'size'] || 1) / 2,\n          x1 = source[prefix + 'x'],\n          y1 = source[prefix + 'y'],\n          x2 = target[prefix + 'x'],\n          y2 = target[prefix + 'y'],\n          color = edge.color;\n\n      if (!color)\n        switch (settings('edgeColor')) {\n          case 'source':\n            color = source.color || settings('defaultNodeColor');\n            break;\n          case 'target':\n            color = target.color || settings('defaultNodeColor');\n            break;\n          default:\n            color = settings('defaultEdgeColor');\n            break;\n        }\n\n      // Normalize color:\n      color = sigma.utils.floatColor(color);\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = 1.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = 1.0;\n      data[i++] = color;\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = w;\n      data[i++] = 0.0;\n      data[i++] = color;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          positionLocation1 =\n            gl.getAttribLocation(program, 'a_position1'),\n          positionLocation2 =\n            gl.getAttribLocation(program, 'a_position2'),\n          thicknessLocation =\n            gl.getAttribLocation(program, 'a_thickness'),\n          minusLocation =\n            gl.getAttribLocation(program, 'a_minus'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          matrixHalfPiLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPi'),\n          matrixHalfPiMinusLocation =\n            gl.getUniformLocation(program, 'u_matrixHalfPiMinus'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        params.ratio / Math.pow(params.ratio, params.settings('edgesPowRatio'))\n      );\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n      gl.uniformMatrix2fv(\n        matrixHalfPiLocation,\n        false,\n        sigma.utils.matrices.rotation(Math.PI / 2, true)\n      );\n      gl.uniformMatrix2fv(\n        matrixHalfPiMinusLocation,\n        false,\n        sigma.utils.matrices.rotation(-Math.PI / 2, true)\n      );\n\n      gl.enableVertexAttribArray(colorLocation);\n      gl.enableVertexAttribArray(positionLocation1);\n      gl.enableVertexAttribArray(positionLocation2);\n      gl.enableVertexAttribArray(thicknessLocation);\n      gl.enableVertexAttribArray(minusLocation);\n\n      gl.vertexAttribPointer(positionLocation1,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(positionLocation2,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(thicknessLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        16\n      );\n      gl.vertexAttribPointer(minusLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        20\n      );\n      gl.vertexAttribPointer(colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        24\n      );\n\n      gl.drawArrays(\n        gl.TRIANGLES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position1;',\n          'attribute vec2 a_position2;',\n          'attribute float a_thickness;',\n          'attribute float a_minus;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n          'uniform mat2 u_matrixHalfPi;',\n          'uniform mat2 u_matrixHalfPiMinus;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Find the good point:\n            'vec2 position = a_thickness * u_ratio *',\n              'normalize(a_position2 - a_position1);',\n\n            'mat2 matrix = a_minus * u_matrixHalfPiMinus +',\n              '(1.0 - a_minus) * u_matrixHalfPi;',\n\n            'position = matrix * position + a_position1;',\n\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(position, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'gl_FragColor = color;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 66:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.edges');\n\n  /**\n   * This edge renderer will display edges as lines with the gl.LINES display\n   * mode. Since this mode does not support well thickness, edges are all drawn\n   * with the same thickness (3px), independantly of the edge attributes or the\n   * zooming ratio.\n   */\n  sigma.webgl.edges.fast = {\n    POINTS: 2,\n    ATTRIBUTES: 3,\n    addEdge: function(edge, source, target, data, i, prefix, settings) {\n      var w = (edge[prefix + 'size'] || 1) / 2,\n          x1 = source[prefix + 'x'],\n          y1 = source[prefix + 'y'],\n          x2 = target[prefix + 'x'],\n          y2 = target[prefix + 'y'],\n          color = edge.color;\n\n      if (!color)\n        switch (settings('edgeColor')) {\n          case 'source':\n            color = source.color || settings('defaultNodeColor');\n            break;\n          case 'target':\n            color = target.color || settings('defaultNodeColor');\n            break;\n          default:\n            color = settings('defaultEdgeColor');\n            break;\n        }\n\n      // Normalize color:\n      color = sigma.utils.floatColor(color);\n\n      data[i++] = x1;\n      data[i++] = y1;\n      data[i++] = color;\n\n      data[i++] = x2;\n      data[i++] = y2;\n      data[i++] = color;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          positionLocation =\n            gl.getAttribLocation(program, 'a_position'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n\n      gl.enableVertexAttribArray(positionLocation);\n      gl.enableVertexAttribArray(colorLocation);\n\n      gl.vertexAttribPointer(positionLocation,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n\n      gl.lineWidth(3);\n      gl.drawArrays(\n        gl.LINES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform mat3 u_matrix;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(a_position, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'gl_FragColor = color;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 67:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.nodes');\n\n  /**\n   * This node renderer will display nodes as discs, shaped in triangles with\n   * the gl.TRIANGLES display mode. So, to be more precise, to draw one node,\n   * it will store three times the center of node, with the color and the size,\n   * and an angle indicating which \"corner\" of the triangle to draw.\n   *\n   * The fragment shader does not deal with anti-aliasing, so make sure that\n   * you deal with it somewhere else in the code (by default, the WebGL\n   * renderer will oversample the rendering through the webglOversamplingRatio\n   * value).\n   */\n  sigma.webgl.nodes.def = {\n    POINTS: 3,\n    ATTRIBUTES: 5,\n    addNode: function(node, data, i, prefix, settings) {\n      var color = sigma.utils.floatColor(\n        node.color || settings('defaultNodeColor')\n      );\n\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = color;\n      data[i++] = 0;\n\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = color;\n      data[i++] = 2 * Math.PI / 3;\n\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = color;\n      data[i++] = 4 * Math.PI / 3;\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var positionLocation =\n            gl.getAttribLocation(program, 'a_position'),\n          sizeLocation =\n            gl.getAttribLocation(program, 'a_size'),\n          colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          angleLocation =\n            gl.getAttribLocation(program, 'a_angle'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        1 / Math.pow(params.ratio, params.settings('nodesPowRatio'))\n      );\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n\n      gl.enableVertexAttribArray(positionLocation);\n      gl.enableVertexAttribArray(sizeLocation);\n      gl.enableVertexAttribArray(colorLocation);\n      gl.enableVertexAttribArray(angleLocation);\n\n      gl.vertexAttribPointer(\n        positionLocation,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(\n        sizeLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(\n        colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        12\n      );\n      gl.vertexAttribPointer(\n        angleLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        16\n      );\n\n      gl.drawArrays(\n        gl.TRIANGLES,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position;',\n          'attribute float a_size;',\n          'attribute float a_color;',\n          'attribute float a_angle;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n\n          'varying vec4 color;',\n          'varying vec2 center;',\n          'varying float radius;',\n\n          'void main() {',\n            // Multiply the point size twice:\n            'radius = a_size * u_ratio;',\n\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'vec2 position = (u_matrix * vec3(a_position, 1)).xy;',\n            // 'center = (position / u_resolution * 2.0 - 1.0) * vec2(1, -1);',\n            'center = position * u_scale;',\n            'center = vec2(center.x, u_scale * u_resolution.y - center.y);',\n\n            'position = position +',\n              '2.0 * radius * vec2(cos(a_angle), sin(a_angle));',\n            'position = (position / u_resolution * 2.0 - 1.0) * vec2(1, -1);',\n\n            'radius = radius * u_scale;',\n\n            'gl_Position = vec4(position, 0, 1);',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n          'varying vec2 center;',\n          'varying float radius;',\n\n          'void main(void) {',\n            'vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);',\n\n            'vec2 m = gl_FragCoord.xy - center;',\n            'float diff = radius - sqrt(m.x * m.x + m.y * m.y);',\n\n            // Here is how we draw a disc instead of a square:\n            'if (diff > 0.0)',\n              'gl_FragColor = color;',\n            'else',\n              'gl_FragColor = color0;',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ },\n\n/***/ 68:\n/***/ function(module, exports) {\n\n/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;(function() {\n  'use strict';\n\n  sigma.utils.pkg('sigma.webgl.nodes');\n\n  /**\n   * This node renderer will display nodes in the fastest way: Nodes are basic\n   * squares, drawn through the gl.POINTS drawing method. The size of the nodes\n   * are represented with the \"gl_PointSize\" value in the vertex shader.\n   *\n   * It is the fastest node renderer here since the buffer just takes one line\n   * to draw each node (with attributes \"x\", \"y\", \"size\" and \"color\").\n   *\n   * Nevertheless, this method has some problems, especially due to some issues\n   * with the gl.POINTS:\n   *  - First, if the center of a node is outside the scene, the point will not\n   *    be drawn, even if it should be partly on screen.\n   *  - I tried applying a fragment shader similar to the one in the default\n   *    node renderer to display them as discs, but it did not work fine on\n   *    some computers settings, filling the discs with weird gradients not\n   *    depending on the actual color.\n   */\n  sigma.webgl.nodes.fast = {\n    POINTS: 1,\n    ATTRIBUTES: 4,\n    addNode: function(node, data, i, prefix, settings) {\n      data[i++] = node[prefix + 'x'];\n      data[i++] = node[prefix + 'y'];\n      data[i++] = node[prefix + 'size'];\n      data[i++] = sigma.utils.floatColor(\n        node.color || settings('defaultNodeColor')\n      );\n    },\n    render: function(gl, program, data, params) {\n      var buffer;\n\n      // Define attributes:\n      var positionLocation =\n            gl.getAttribLocation(program, 'a_position'),\n          sizeLocation =\n            gl.getAttribLocation(program, 'a_size'),\n          colorLocation =\n            gl.getAttribLocation(program, 'a_color'),\n          resolutionLocation =\n            gl.getUniformLocation(program, 'u_resolution'),\n          matrixLocation =\n            gl.getUniformLocation(program, 'u_matrix'),\n          ratioLocation =\n            gl.getUniformLocation(program, 'u_ratio'),\n          scaleLocation =\n            gl.getUniformLocation(program, 'u_scale');\n\n      buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\n\n      gl.uniform2f(resolutionLocation, params.width, params.height);\n      gl.uniform1f(\n        ratioLocation,\n        1 / Math.pow(params.ratio, params.settings('nodesPowRatio'))\n      );\n      gl.uniform1f(scaleLocation, params.scalingRatio);\n      gl.uniformMatrix3fv(matrixLocation, false, params.matrix);\n\n      gl.enableVertexAttribArray(positionLocation);\n      gl.enableVertexAttribArray(sizeLocation);\n      gl.enableVertexAttribArray(colorLocation);\n\n      gl.vertexAttribPointer(\n        positionLocation,\n        2,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        0\n      );\n      gl.vertexAttribPointer(\n        sizeLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        8\n      );\n      gl.vertexAttribPointer(\n        colorLocation,\n        1,\n        gl.FLOAT,\n        false,\n        this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT,\n        12\n      );\n\n      gl.drawArrays(\n        gl.POINTS,\n        params.start || 0,\n        params.count || (data.length / this.ATTRIBUTES)\n      );\n    },\n    initProgram: function(gl) {\n      var vertexShader,\n          fragmentShader,\n          program;\n\n      vertexShader = sigma.utils.loadShader(\n        gl,\n        [\n          'attribute vec2 a_position;',\n          'attribute float a_size;',\n          'attribute float a_color;',\n\n          'uniform vec2 u_resolution;',\n          'uniform float u_ratio;',\n          'uniform float u_scale;',\n          'uniform mat3 u_matrix;',\n\n          'varying vec4 color;',\n\n          'void main() {',\n            // Scale from [[-1 1] [-1 1]] to the container:\n            'gl_Position = vec4(',\n              '((u_matrix * vec3(a_position, 1)).xy /',\n                'u_resolution * 2.0 - 1.0) * vec2(1, -1),',\n              '0,',\n              '1',\n            ');',\n\n            // Multiply the point size twice:\n            //  - x SCALING_RATIO to correct the canvas scaling\n            //  - x 2 to correct the formulae\n            'gl_PointSize = a_size * u_ratio * u_scale * 2.0;',\n\n            // Extract the color:\n            'float c = a_color;',\n            'color.b = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.g = mod(c, 256.0); c = floor(c / 256.0);',\n            'color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;',\n            'color.a = 1.0;',\n          '}'\n        ].join('\\n'),\n        gl.VERTEX_SHADER\n      );\n\n      fragmentShader = sigma.utils.loadShader(\n        gl,\n        [\n          'precision mediump float;',\n\n          'varying vec4 color;',\n\n          'void main(void) {',\n            'float border = 0.01;',\n            'float radius = 0.5;',\n\n            'vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);',\n            'vec2 m = gl_PointCoord - vec2(0.5, 0.5);',\n            'float dist = radius - sqrt(m.x * m.x + m.y * m.y);',\n\n            'float t = 0.0;',\n            'if (dist > border)',\n              't = 1.0;',\n            'else if (dist > 0.0)',\n              't = dist / border;',\n\n            'gl_FragColor = mix(color0, color, t);',\n          '}'\n        ].join('\\n'),\n        gl.FRAGMENT_SHADER\n      );\n\n      program = sigma.utils.loadProgram(gl, [vertexShader, fragmentShader]);\n\n      return program;\n    }\n  };\n})();\n\n}.call(window));\n\n/***/ }\n\n/******/ });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sigma/webgl.js\n// module id = 28\n// module chunks = 0","export Sigma from './Sigma'\nexport EdgeShapes from './EdgeShapes'\nexport NodeShapes from './NodeShapes'\nexport LoadJSON from './LoadJSON'\nexport LoadGEXF from './LoadGEXF'\nexport Filter from './Filter'\nexport ForceAtlas2 from './ForceAtlas2'\nexport RelativeSize from './RelativeSize'\nexport NOverlap from './NOverlap'\nexport NeoCypher from './NeoCypher'\nexport NeoGraphItemsProducers from './NeoGraphItemsProducers'\nexport RandomizeNodePositions from './RandomizeNodePositions'\nexport SigmaEnableWebGL from './SigmaEnableWebGL'\n\nimport Sigma from './Sigma'\nexport default Sigma\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}